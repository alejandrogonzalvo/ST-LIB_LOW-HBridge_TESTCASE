
STLIB-LOW_HBridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013448  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08013718  08013718  00023718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000020  08013e88  08013e88  00023e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000020  08013ea8  08013ea8  00023ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08013ec8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e30  24000074  08013f3c  00030074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000ea4  08013f3c  00030ea4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c27be  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000b206  00000000  00000000  000f2860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00005bb8  00000000  00000000  000fda68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005d78  00000000  00000000  00103620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000509f7  00000000  00000000  00109398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00048f90  00000000  00000000  00159d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0022cb58  00000000  00000000  001a2d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  003cf877  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0001ad80  00000000  00000000  003cf8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013700 	.word	0x08013700

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	08013700 	.word	0x08013700

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fb1b 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f833 	bl	8000384 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800031e:	f000 f8bb 	bl	8000498 <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  HalfBridge half_bridge1 = HalfBridge(PE9, PE8, PE11, PE10, PE15);
 8000322:	1d38      	adds	r0, r7, #4
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <main+0x60>)
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <main+0x64>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <main+0x68>)
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <main+0x6c>)
 8000330:	4913      	ldr	r1, [pc, #76]	; (8000380 <main+0x70>)
 8000332:	f00a ff3c 	bl	800b1ae <_ZN10HalfBridgeC1ER3PinS1_S1_S1_S1_>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  Pin::start();
 8000336:	f005 f9fb 	bl	8005730 <_ZN3Pin5startEv>
  PWMservice::start();
 800033a:	f006 fc39 	bl	8006bb0 <_ZN10PWMservice5startEv>
  /* USER CODE BEGIN 2 */

  half_bridge1.turn_on();
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f00a ff7a 	bl	800b23a <_ZN10HalfBridge7turn_onEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  half_bridge1.set_duty_cycle(30);
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	211e      	movs	r1, #30
 800034a:	4618      	mov	r0, r3
 800034c:	f00a ff8b 	bl	800b266 <_ZN10HalfBridge14set_duty_cycleEa>
	  HAL_Delay(1000);
 8000350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000354:	f000 fb8e 	bl	8000a74 <HAL_Delay>
	  half_bridge1.set_duty_cycle(-30);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	f06f 011d 	mvn.w	r1, #29
 800035e:	4618      	mov	r0, r3
 8000360:	f00a ff81 	bl	800b266 <_ZN10HalfBridge14set_duty_cycleEa>
	  HAL_Delay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000368:	f000 fb84 	bl	8000a74 <HAL_Delay>
	  half_bridge1.set_duty_cycle(30);
 800036c:	e7eb      	b.n	8000346 <main+0x36>
 800036e:	bf00      	nop
 8000370:	240006d0 	.word	0x240006d0
 8000374:	240006a8 	.word	0x240006a8
 8000378:	240006b0 	.word	0x240006b0
 800037c:	24000698 	.word	0x24000698
 8000380:	240006a0 	.word	0x240006a0

08000384 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b09c      	sub	sp, #112	; 0x70
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038e:	224c      	movs	r2, #76	; 0x4c
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f013 f86a 	bl	801346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2220      	movs	r2, #32
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f013 f864 	bl	801346c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003a4:	2002      	movs	r0, #2
 80003a6:	f002 f945 	bl	8002634 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003aa:	2300      	movs	r3, #0
 80003ac:	603b      	str	r3, [r7, #0]
 80003ae:	4b38      	ldr	r3, [pc, #224]	; (8000490 <_Z18SystemClock_Configv+0x10c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a37      	ldr	r2, [pc, #220]	; (8000490 <_Z18SystemClock_Configv+0x10c>)
 80003b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b35      	ldr	r3, [pc, #212]	; (8000490 <_Z18SystemClock_Configv+0x10c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <_Z18SystemClock_Configv+0x10c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d2:	bf14      	ite	ne
 80003d4:	2301      	movne	r3, #1
 80003d6:	2300      	moveq	r3, #0
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d000      	beq.n	80003e0 <_Z18SystemClock_Configv+0x5c>
 80003de:	e7f2      	b.n	80003c6 <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003e0:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <_Z18SystemClock_Configv+0x110>)
 80003e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e4:	f023 0303 	bic.w	r3, r3, #3
 80003e8:	4a2a      	ldr	r2, [pc, #168]	; (8000494 <_Z18SystemClock_Configv+0x110>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003f0:	2309      	movs	r3, #9
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003fa:	2301      	movs	r3, #1
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000402:	2302      	movs	r3, #2
 8000404:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000406:	2304      	movs	r3, #4
 8000408:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800040a:	f240 1313 	movw	r3, #275	; 0x113
 800040e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000410:	2301      	movs	r3, #1
 8000412:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000414:	2304      	movs	r3, #4
 8000416:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000418:	2302      	movs	r3, #2
 800041a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800041c:	2304      	movs	r3, #4
 800041e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000420:	2300      	movs	r3, #0
 8000422:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800042c:	4618      	mov	r0, r3
 800042e:	f002 f93b 	bl	80026a8 <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	bf14      	ite	ne
 8000438:	2301      	movne	r3, #1
 800043a:	2300      	moveq	r3, #0
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000442:	f000 f85a 	bl	80004fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	233f      	movs	r3, #63	; 0x3f
 8000448:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2303      	movs	r3, #3
 800044c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000452:	2308      	movs	r3, #8
 8000454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800045a:	2340      	movs	r3, #64	; 0x40
 800045c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800045e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000462:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000464:	2340      	movs	r3, #64	; 0x40
 8000466:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2103      	movs	r1, #3
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fcc9 	bl	8002e04 <HAL_RCC_ClockConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	bf14      	ite	ne
 8000478:	2301      	movne	r3, #1
 800047a:	2300      	moveq	r3, #0
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8000482:	f000 f83a 	bl	80004fa <Error_Handler>
  }
}
 8000486:	bf00      	nop
 8000488:	3770      	adds	r7, #112	; 0x70
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	58024800 	.word	0x58024800
 8000494:	58024400 	.word	0x58024400

08000498 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b0ae      	sub	sp, #184	; 0xb8
 800049c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	22b4      	movs	r2, #180	; 0xb4
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f012 ffe1 	bl	801346c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004ae:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80004b0:	2301      	movs	r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80004b4:	2318      	movs	r3, #24
 80004b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004bc:	2302      	movs	r3, #2
 80004be:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004c0:	2302      	movs	r3, #2
 80004c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80004c4:	23c0      	movs	r3, #192	; 0xc0
 80004c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 ffc3 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf14      	ite	ne
 80004e4:	2301      	movne	r3, #1
 80004e6:	2300      	moveq	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 80004ee:	f000 f804 	bl	80004fa <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	37b8      	adds	r7, #184	; 0xb8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fe:	b672      	cpsid	i
}
 8000500:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000502:	e7fe      	b.n	8000502 <Error_Handler+0x8>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_MspInit+0x30>)
 800050c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_MspInit+0x30>)
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_MspInit+0x30>)
 800051c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000520:	f003 0302 	and.w	r3, r3, #2
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	58024400 	.word	0x58024400

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler+0x4>

0800054a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler+0x4>

08000556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000584:	f000 fa56 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000590:	2001      	movs	r0, #1
 8000592:	f001 ff54 	bl	800243e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800059e:	2002      	movs	r0, #2
 80005a0:	f001 ff4d 	bl	800243e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <DMA1_Stream0_IRQHandler+0x10>)
 80005ae:	f000 fe5b 	bl	8001268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	240001e0 	.word	0x240001e0

080005bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <DMA1_Stream1_IRQHandler+0x10>)
 80005c2:	f000 fe51 	bl	8001268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	24000258 	.word	0x24000258

080005d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <DMA1_Stream2_IRQHandler+0x10>)
 80005d6:	f000 fe47 	bl	8001268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	240002d0 	.word	0x240002d0

080005e4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <LPTIM1_IRQHandler+0x10>)
 80005ea:	f001 ff42 	bl	8002472 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	24000348 	.word	0x24000348

080005f8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <ADC3_IRQHandler+0x10>)
 80005fe:	f000 fac5 	bl	8000b8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000170 	.word	0x24000170

0800060c <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <LPTIM2_IRQHandler+0x10>)
 8000612:	f001 ff2e 	bl	8002472 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	24000380 	.word	0x24000380

08000620 <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <LPTIM3_IRQHandler+0x10>)
 8000626:	f001 ff24 	bl	8002472 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	240003b8 	.word	0x240003b8

08000634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	return 1;
 8000638:	2301      	movs	r3, #1
}
 800063a:	4618      	mov	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_kill>:

int _kill(int pid, int sig)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800064e:	f012 feab 	bl	80133a8 <__errno>
 8000652:	4603      	mov	r3, r0
 8000654:	2216      	movs	r2, #22
 8000656:	601a      	str	r2, [r3, #0]
	return -1;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <_exit>:

void _exit (int status)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800066c:	f04f 31ff 	mov.w	r1, #4294967295
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ffe7 	bl	8000644 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000676:	e7fe      	b.n	8000676 <_exit+0x12>

08000678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a8:	f012 fe7e 	bl	80133a8 <__errno>
 80006ac:	4603      	mov	r3, r0
 80006ae:	220c      	movs	r2, #12
 80006b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <_sbrk+0x64>)
 80006c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	24050000 	.word	0x24050000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	240003f0 	.word	0x240003f0
 80006e0:	24000ea8 	.word	0x24000ea8

080006e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e8:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <SystemInit+0xd0>)
 80006ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ee:	4a31      	ldr	r2, [pc, #196]	; (80007b4 <SystemInit+0xd0>)
 80006f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <SystemInit+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 030f 	and.w	r3, r3, #15
 8000700:	2b06      	cmp	r3, #6
 8000702:	d807      	bhi.n	8000714 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemInit+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f023 030f 	bic.w	r3, r3, #15
 800070c:	4a2a      	ldr	r2, [pc, #168]	; (80007b8 <SystemInit+0xd4>)
 800070e:	f043 0307 	orr.w	r3, r3, #7
 8000712:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <SystemInit+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a28      	ldr	r2, [pc, #160]	; (80007bc <SystemInit+0xd8>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <SystemInit+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemInit+0xd8>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4924      	ldr	r1, [pc, #144]	; (80007bc <SystemInit+0xd8>)
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <SystemInit+0xdc>)
 800072e:	4013      	ands	r3, r2
 8000730:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <SystemInit+0xd4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	2b00      	cmp	r3, #0
 800073c:	d007      	beq.n	800074e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <SystemInit+0xd4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f023 030f 	bic.w	r3, r3, #15
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <SystemInit+0xd4>)
 8000748:	f043 0307 	orr.w	r3, r3, #7
 800074c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <SystemInit+0xd8>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemInit+0xd8>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <SystemInit+0xd8>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <SystemInit+0xd8>)
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <SystemInit+0xe0>)
 8000764:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <SystemInit+0xd8>)
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <SystemInit+0xe4>)
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0xd8>)
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <SystemInit+0xe8>)
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <SystemInit+0xd8>)
 8000774:	2200      	movs	r2, #0
 8000776:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <SystemInit+0xd8>)
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <SystemInit+0xe8>)
 800077c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0xd8>)
 8000780:	2200      	movs	r2, #0
 8000782:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <SystemInit+0xd8>)
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <SystemInit+0xe8>)
 8000788:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SystemInit+0xd8>)
 800078c:	2200      	movs	r2, #0
 800078e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <SystemInit+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a09      	ldr	r2, [pc, #36]	; (80007bc <SystemInit+0xd8>)
 8000796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <SystemInit+0xd8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <SystemInit+0xec>)
 80007a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	52002000 	.word	0x52002000
 80007bc:	58024400 	.word	0x58024400
 80007c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c4:	02020200 	.word	0x02020200
 80007c8:	01ff0000 	.word	0x01ff0000
 80007cc:	01010280 	.word	0x01010280
 80007d0:	52004000 	.word	0x52004000

080007d4 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim23);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a40      	ldr	r2, [pc, #256]	; (80008e4 <HAL_TIM_PWM_MspInit+0x110>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d10f      	bne.n	8000806 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 80007e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007ec:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 80007f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
 8000802:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000804:	e067      	b.n	80008d6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800080e:	d10f      	bne.n	8000830 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000816:	4a34      	ldr	r2, [pc, #208]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000820:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
}
 800082e:	e052      	b.n	80008d6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM3)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <HAL_TIM_PWM_MspInit+0x118>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10f      	bne.n	800085a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 800083c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000840:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 800084c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
}
 8000858:	e03d      	b.n	80008d6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM4)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <HAL_TIM_PWM_MspInit+0x11c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d10f      	bne.n	8000884 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
}
 8000882:	e028      	b.n	80008d6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM12)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <HAL_TIM_PWM_MspInit+0x120>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d10f      	bne.n	80008ae <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 8000896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 80008a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	e013      	b.n	80008d6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM15)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <HAL_TIM_PWM_MspInit+0x124>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d10e      	bne.n	80008d6 <HAL_TIM_PWM_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 80008ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <HAL_TIM_PWM_MspInit+0x114>)
 80008ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
}
 80008d6:	bf00      	nop
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40010000 	.word	0x40010000
 80008e8:	58024400 	.word	0x58024400
 80008ec:	40000400 	.word	0x40000400
 80008f0:	40000800 	.word	0x40000800
 80008f4:	40001800 	.word	0x40001800
 80008f8:	40014000 	.word	0x40014000

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000900:	f7ff fef0 	bl	80006e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f012 fd43 	bl	80133b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fcef 	bl	8000310 <main>
  bx  lr
 8000932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000938:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800093c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000940:	08013ec8 	.word	0x08013ec8
  ldr r2, =_sbss
 8000944:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000948:	24000ea4 	.word	0x24000ea4

0800094c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000956:	2003      	movs	r0, #3
 8000958:	f000 fc54 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800095c:	f002 fc08 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8000960:	4602      	mov	r2, r0
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_Init+0x68>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	4913      	ldr	r1, [pc, #76]	; (80009bc <HAL_Init+0x6c>)
 800096e:	5ccb      	ldrb	r3, [r1, r3]
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	fa22 f303 	lsr.w	r3, r2, r3
 8000978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_Init+0x68>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_Init+0x6c>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	fa22 f303 	lsr.w	r3, r2, r3
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_Init+0x70>)
 8000992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_Init+0x74>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f814 	bl	80009c8 <HAL_InitTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e002      	b.n	80009b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009aa:	f7ff fdab 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58024400 	.word	0x58024400
 80009bc:	08013e70 	.word	0x08013e70
 80009c0:	24000004 	.word	0x24000004
 80009c4:	24000000 	.word	0x24000000

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_InitTick+0x60>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e021      	b.n	8000a20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_InitTick+0x64>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_InitTick+0x60>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fc2b 	bl	800124e <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 fc03 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x68>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2400000c 	.word	0x2400000c
 8000a2c:	24000000 	.word	0x24000000
 8000a30:	24000008 	.word	0x24000008

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2400000c 	.word	0x2400000c
 8000a58:	24000524 	.word	0x24000524

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	24000524 	.word	0x24000524

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2400000c 	.word	0x2400000c

08000abc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 031f 	and.w	r3, r3, #31
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d101      	bne.n	8000b58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d101      	bne.n	8000b7e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a87      	ldr	r2, [pc, #540]	; (8000dcc <HAL_ADC_IRQHandler+0x240>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d004      	beq.n	8000bbc <HAL_ADC_IRQHandler+0x30>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a86      	ldr	r2, [pc, #536]	; (8000dd0 <HAL_ADC_IRQHandler+0x244>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d101      	bne.n	8000bc0 <HAL_ADC_IRQHandler+0x34>
 8000bbc:	4b85      	ldr	r3, [pc, #532]	; (8000dd4 <HAL_ADC_IRQHandler+0x248>)
 8000bbe:	e000      	b.n	8000bc2 <HAL_ADC_IRQHandler+0x36>
 8000bc0:	4b85      	ldr	r3, [pc, #532]	; (8000dd8 <HAL_ADC_IRQHandler+0x24c>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffa0 	bl	8000b08 <LL_ADC_GetMultimode>
 8000bc8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d017      	beq.n	8000c04 <HAL_ADC_IRQHandler+0x78>
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d012      	beq.n	8000c04 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d105      	bne.n	8000bf6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 fa48 	bl	800108c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2202      	movs	r2, #2
 8000c02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d004      	beq.n	8000c18 <HAL_ADC_IRQHandler+0x8c>
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10a      	bne.n	8000c2e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8083 	beq.w	8000d2a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d07d      	beq.n	8000d2a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d105      	bne.n	8000c46 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff36 	bl	8000abc <LL_ADC_REG_IsTriggerSourceSWStart>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d062      	beq.n	8000d1c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a5d      	ldr	r2, [pc, #372]	; (8000dd0 <HAL_ADC_IRQHandler+0x244>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d002      	beq.n	8000c66 <HAL_ADC_IRQHandler+0xda>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	e000      	b.n	8000c68 <HAL_ADC_IRQHandler+0xdc>
 8000c66:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <HAL_ADC_IRQHandler+0x240>)
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d008      	beq.n	8000c82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d002      	beq.n	8000c82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d104      	bne.n	8000c8c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	623b      	str	r3, [r7, #32]
 8000c8a:	e00c      	b.n	8000ca6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a4f      	ldr	r2, [pc, #316]	; (8000dd0 <HAL_ADC_IRQHandler+0x244>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d002      	beq.n	8000c9c <HAL_ADC_IRQHandler+0x110>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	e000      	b.n	8000c9e <HAL_ADC_IRQHandler+0x112>
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <HAL_ADC_IRQHandler+0x240>)
 8000c9e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d135      	bne.n	8000d1c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d12e      	bne.n	8000d1c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff3c 	bl	8000b40 <LL_ADC_REG_IsConversionOngoing>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11a      	bne.n	8000d04 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 020c 	bic.w	r2, r2, #12
 8000cdc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d112      	bne.n	8000d1c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	661a      	str	r2, [r3, #96]	; 0x60
 8000d02:	e00b      	b.n	8000d1c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d08:	f043 0210 	orr.w	r2, r3, #16
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d14:	f043 0201 	orr.w	r2, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 f96f 	bl	8001000 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	f003 0320 	and.w	r3, r3, #32
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d004      	beq.n	8000d3e <HAL_ADC_IRQHandler+0x1b2>
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10b      	bne.n	8000d56 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80a0 	beq.w	8000e8a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 809a 	beq.w	8000e8a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff feb5 	bl	8000ae2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000d78:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe9c 	bl	8000abc <LL_ADC_REG_IsTriggerSourceSWStart>
 8000d84:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_ADC_IRQHandler+0x244>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d002      	beq.n	8000d96 <HAL_ADC_IRQHandler+0x20a>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	e000      	b.n	8000d98 <HAL_ADC_IRQHandler+0x20c>
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_ADC_IRQHandler+0x240>)
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d008      	beq.n	8000db2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2b06      	cmp	r3, #6
 8000daa:	d002      	beq.n	8000db2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2b07      	cmp	r3, #7
 8000db0:	d104      	bne.n	8000dbc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	e014      	b.n	8000de6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_ADC_IRQHandler+0x244>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00a      	beq.n	8000ddc <HAL_ADC_IRQHandler+0x250>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	e008      	b.n	8000dde <HAL_ADC_IRQHandler+0x252>
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	40022100 	.word	0x40022100
 8000dd4:	40022300 	.word	0x40022300
 8000dd8:	58026300 	.word	0x58026300
 8000ddc:	4b84      	ldr	r3, [pc, #528]	; (8000ff0 <HAL_ADC_IRQHandler+0x464>)
 8000dde:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d047      	beq.n	8000e7c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d007      	beq.n	8000e06 <HAL_ADC_IRQHandler+0x27a>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d03f      	beq.n	8000e7c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d13a      	bne.n	8000e7c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e10:	2b40      	cmp	r3, #64	; 0x40
 8000e12:	d133      	bne.n	8000e7c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d12e      	bne.n	8000e7c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fe9f 	bl	8000b66 <LL_ADC_INJ_IsConversionOngoing>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d11a      	bne.n	8000e64 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000e3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d112      	bne.n	8000e7c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	661a      	str	r2, [r3, #96]	; 0x60
 8000e62:	e00b      	b.n	8000e7c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e68:	f043 0210 	orr.w	r2, r3, #16
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e74:	f043 0201 	orr.w	r2, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f8dd 	bl	800103c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2260      	movs	r2, #96	; 0x60
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d011      	beq.n	8000eb8 <HAL_ADC_IRQHandler+0x32c>
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00c      	beq.n	8000eb8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f8b2 	bl	8001014 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <HAL_ADC_IRQHandler+0x35c>
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00d      	beq.n	8000ee8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f8c3 	bl	8001064 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d012      	beq.n	8000f18 <HAL_ADC_IRQHandler+0x38c>
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00d      	beq.n	8000f18 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f8b5 	bl	8001078 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d043      	beq.n	8000faa <HAL_ADC_IRQHandler+0x41e>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d03e      	beq.n	8000faa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8000f34:	2301      	movs	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
 8000f38:	e021      	b.n	8000f7e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d015      	beq.n	8000f6c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a2a      	ldr	r2, [pc, #168]	; (8000ff0 <HAL_ADC_IRQHandler+0x464>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d004      	beq.n	8000f54 <HAL_ADC_IRQHandler+0x3c8>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <HAL_ADC_IRQHandler+0x468>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_ADC_IRQHandler+0x3cc>
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_ADC_IRQHandler+0x46c>)
 8000f56:	e000      	b.n	8000f5a <HAL_ADC_IRQHandler+0x3ce>
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_ADC_IRQHandler+0x470>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fde2 	bl	8000b24 <LL_ADC_GetMultiDMATransfer>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8000f66:	2301      	movs	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	e008      	b.n	8000f7e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d10e      	bne.n	8000fa2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f94:	f043 0202 	orr.w	r2, r3, #2
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f843 	bl	8001028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d018      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0x45a>
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d013      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fce:	f043 0208 	orr.w	r2, r3, #8
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fde:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f835 	bl	8001050 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40022000 	.word	0x40022000
 8000ff4:	40022100 	.word	0x40022100
 8000ff8:	40022300 	.word	0x40022300
 8000ffc:	58026300 	.word	0x58026300

08001000 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <__NVIC_SetPriorityGrouping+0x40>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x40>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00
 80010e4:	05fa0000 	.word	0x05fa0000

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff47 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff5e 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff90 	bl	8001158 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5f 	bl	8001104 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffb2 	bl	80011c0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001274:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_DMA_IRQHandler+0x1ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a67      	ldr	r2, [pc, #412]	; (8001418 <HAL_DMA_IRQHandler+0x1b0>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0a9b      	lsrs	r3, r3, #10
 8001280:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5f      	ldr	r2, [pc, #380]	; (800141c <HAL_DMA_IRQHandler+0x1b4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d04a      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5d      	ldr	r2, [pc, #372]	; (8001420 <HAL_DMA_IRQHandler+0x1b8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d045      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a5c      	ldr	r2, [pc, #368]	; (8001424 <HAL_DMA_IRQHandler+0x1bc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d040      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <HAL_DMA_IRQHandler+0x1c0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d03b      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a59      	ldr	r2, [pc, #356]	; (800142c <HAL_DMA_IRQHandler+0x1c4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d036      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_DMA_IRQHandler+0x1c8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d031      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a56      	ldr	r2, [pc, #344]	; (8001434 <HAL_DMA_IRQHandler+0x1cc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d02c      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_DMA_IRQHandler+0x1d0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d027      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a53      	ldr	r2, [pc, #332]	; (800143c <HAL_DMA_IRQHandler+0x1d4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d022      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_DMA_IRQHandler+0x1d8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01d      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a50      	ldr	r2, [pc, #320]	; (8001444 <HAL_DMA_IRQHandler+0x1dc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d018      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_DMA_IRQHandler+0x1e0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_DMA_IRQHandler+0x1e4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d00e      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_DMA_IRQHandler+0x1e8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d009      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <HAL_DMA_IRQHandler+0x1ec>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d004      	beq.n	800133a <HAL_DMA_IRQHandler+0xd2>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_DMA_IRQHandler+0x1f0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_DMA_IRQHandler+0xd6>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_DMA_IRQHandler+0xd8>
 800133e:	2300      	movs	r3, #0
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 842b 	beq.w	8001b9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2208      	movs	r2, #8
 8001350:	409a      	lsls	r2, r3
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80a2 	beq.w	80014a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2e      	ldr	r2, [pc, #184]	; (800141c <HAL_DMA_IRQHandler+0x1b4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d04a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_DMA_IRQHandler+0x1b8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d045      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <HAL_DMA_IRQHandler+0x1bc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d040      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <HAL_DMA_IRQHandler+0x1c0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d03b      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <HAL_DMA_IRQHandler+0x1c4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d036      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_DMA_IRQHandler+0x1c8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d031      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a25      	ldr	r2, [pc, #148]	; (8001434 <HAL_DMA_IRQHandler+0x1cc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02c      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a24      	ldr	r2, [pc, #144]	; (8001438 <HAL_DMA_IRQHandler+0x1d0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d027      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_DMA_IRQHandler+0x1d4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d022      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_DMA_IRQHandler+0x1d8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d01d      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <HAL_DMA_IRQHandler+0x1dc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d018      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_DMA_IRQHandler+0x1e0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1c      	ldr	r2, [pc, #112]	; (800144c <HAL_DMA_IRQHandler+0x1e4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00e      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <HAL_DMA_IRQHandler+0x1e8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d009      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_DMA_IRQHandler+0x1ec>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d004      	beq.n	80013fc <HAL_DMA_IRQHandler+0x194>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_DMA_IRQHandler+0x1f0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d12f      	bne.n	800145c <HAL_DMA_IRQHandler+0x1f4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	bf14      	ite	ne
 800140a:	2301      	movne	r3, #1
 800140c:	2300      	moveq	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	e02e      	b.n	8001470 <HAL_DMA_IRQHandler+0x208>
 8001412:	bf00      	nop
 8001414:	24000000 	.word	0x24000000
 8001418:	1b4e81b5 	.word	0x1b4e81b5
 800141c:	40020010 	.word	0x40020010
 8001420:	40020028 	.word	0x40020028
 8001424:	40020040 	.word	0x40020040
 8001428:	40020058 	.word	0x40020058
 800142c:	40020070 	.word	0x40020070
 8001430:	40020088 	.word	0x40020088
 8001434:	400200a0 	.word	0x400200a0
 8001438:	400200b8 	.word	0x400200b8
 800143c:	40020410 	.word	0x40020410
 8001440:	40020428 	.word	0x40020428
 8001444:	40020440 	.word	0x40020440
 8001448:	40020458 	.word	0x40020458
 800144c:	40020470 	.word	0x40020470
 8001450:	40020488 	.word	0x40020488
 8001454:	400204a0 	.word	0x400204a0
 8001458:	400204b8 	.word	0x400204b8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d015      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2208      	movs	r2, #8
 800148e:	409a      	lsls	r2, r3
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	f043 0201 	orr.w	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	fa22 f303 	lsr.w	r3, r2, r3
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d06e      	beq.n	8001594 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a69      	ldr	r2, [pc, #420]	; (8001660 <HAL_DMA_IRQHandler+0x3f8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d04a      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a67      	ldr	r2, [pc, #412]	; (8001664 <HAL_DMA_IRQHandler+0x3fc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d045      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_DMA_IRQHandler+0x400>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d040      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a64      	ldr	r2, [pc, #400]	; (800166c <HAL_DMA_IRQHandler+0x404>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d03b      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_DMA_IRQHandler+0x408>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d036      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a61      	ldr	r2, [pc, #388]	; (8001674 <HAL_DMA_IRQHandler+0x40c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d031      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a60      	ldr	r2, [pc, #384]	; (8001678 <HAL_DMA_IRQHandler+0x410>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d02c      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a5e      	ldr	r2, [pc, #376]	; (800167c <HAL_DMA_IRQHandler+0x414>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d027      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5d      	ldr	r2, [pc, #372]	; (8001680 <HAL_DMA_IRQHandler+0x418>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d022      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5b      	ldr	r2, [pc, #364]	; (8001684 <HAL_DMA_IRQHandler+0x41c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01d      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <HAL_DMA_IRQHandler+0x420>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d018      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_DMA_IRQHandler+0x424>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_DMA_IRQHandler+0x428>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00e      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a55      	ldr	r2, [pc, #340]	; (8001694 <HAL_DMA_IRQHandler+0x42c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d009      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_DMA_IRQHandler+0x430>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d004      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ee>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a52      	ldr	r2, [pc, #328]	; (800169c <HAL_DMA_IRQHandler+0x434>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10a      	bne.n	800156c <HAL_DMA_IRQHandler+0x304>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	e003      	b.n	8001574 <HAL_DMA_IRQHandler+0x30c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00d      	beq.n	8001594 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2201      	movs	r2, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f043 0202 	orr.w	r2, r3, #2
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2204      	movs	r2, #4
 800159e:	409a      	lsls	r2, r3
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 808f 	beq.w	80016c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <HAL_DMA_IRQHandler+0x3f8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d04a      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_DMA_IRQHandler+0x3fc>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d045      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a29      	ldr	r2, [pc, #164]	; (8001668 <HAL_DMA_IRQHandler+0x400>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d040      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_DMA_IRQHandler+0x404>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d03b      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a26      	ldr	r2, [pc, #152]	; (8001670 <HAL_DMA_IRQHandler+0x408>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d036      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_DMA_IRQHandler+0x40c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d031      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_DMA_IRQHandler+0x410>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d02c      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <HAL_DMA_IRQHandler+0x414>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d027      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_DMA_IRQHandler+0x418>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d022      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <HAL_DMA_IRQHandler+0x41c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d01d      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_DMA_IRQHandler+0x420>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d018      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_DMA_IRQHandler+0x424>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <HAL_DMA_IRQHandler+0x428>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00e      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a18      	ldr	r2, [pc, #96]	; (8001694 <HAL_DMA_IRQHandler+0x42c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d009      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_DMA_IRQHandler+0x430>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d004      	beq.n	800164a <HAL_DMA_IRQHandler+0x3e2>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_DMA_IRQHandler+0x434>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12a      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x438>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	e023      	b.n	80016a8 <HAL_DMA_IRQHandler+0x440>
 8001660:	40020010 	.word	0x40020010
 8001664:	40020028 	.word	0x40020028
 8001668:	40020040 	.word	0x40020040
 800166c:	40020058 	.word	0x40020058
 8001670:	40020070 	.word	0x40020070
 8001674:	40020088 	.word	0x40020088
 8001678:	400200a0 	.word	0x400200a0
 800167c:	400200b8 	.word	0x400200b8
 8001680:	40020410 	.word	0x40020410
 8001684:	40020428 	.word	0x40020428
 8001688:	40020440 	.word	0x40020440
 800168c:	40020458 	.word	0x40020458
 8001690:	40020470 	.word	0x40020470
 8001694:	40020488 	.word	0x40020488
 8001698:	400204a0 	.word	0x400204a0
 800169c:	400204b8 	.word	0x400204b8
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2300      	movs	r3, #0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	2204      	movs	r2, #4
 80016b6:	409a      	lsls	r2, r3
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c0:	f043 0204 	orr.w	r2, r3, #4
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2210      	movs	r2, #16
 80016d2:	409a      	lsls	r2, r3
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a6 	beq.w	800182a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a85      	ldr	r2, [pc, #532]	; (80018f8 <HAL_DMA_IRQHandler+0x690>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d04a      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a83      	ldr	r2, [pc, #524]	; (80018fc <HAL_DMA_IRQHandler+0x694>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d045      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a82      	ldr	r2, [pc, #520]	; (8001900 <HAL_DMA_IRQHandler+0x698>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d040      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a80      	ldr	r2, [pc, #512]	; (8001904 <HAL_DMA_IRQHandler+0x69c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d03b      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7f      	ldr	r2, [pc, #508]	; (8001908 <HAL_DMA_IRQHandler+0x6a0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d036      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a7d      	ldr	r2, [pc, #500]	; (800190c <HAL_DMA_IRQHandler+0x6a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d031      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_DMA_IRQHandler+0x6a8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d02c      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a7a      	ldr	r2, [pc, #488]	; (8001914 <HAL_DMA_IRQHandler+0x6ac>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d027      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a79      	ldr	r2, [pc, #484]	; (8001918 <HAL_DMA_IRQHandler+0x6b0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d022      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a77      	ldr	r2, [pc, #476]	; (800191c <HAL_DMA_IRQHandler+0x6b4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01d      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a76      	ldr	r2, [pc, #472]	; (8001920 <HAL_DMA_IRQHandler+0x6b8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d018      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a74      	ldr	r2, [pc, #464]	; (8001924 <HAL_DMA_IRQHandler+0x6bc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <HAL_DMA_IRQHandler+0x6c0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00e      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a71      	ldr	r2, [pc, #452]	; (800192c <HAL_DMA_IRQHandler+0x6c4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d009      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a70      	ldr	r2, [pc, #448]	; (8001930 <HAL_DMA_IRQHandler+0x6c8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d004      	beq.n	800177e <HAL_DMA_IRQHandler+0x516>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a6e      	ldr	r2, [pc, #440]	; (8001934 <HAL_DMA_IRQHandler+0x6cc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10a      	bne.n	8001794 <HAL_DMA_IRQHandler+0x52c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	e009      	b.n	80017a8 <HAL_DMA_IRQHandler+0x540>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03e      	beq.n	800182a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2210      	movs	r2, #16
 80017b6:	409a      	lsls	r2, r3
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d018      	beq.n	80017fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d108      	bne.n	80017ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d024      	beq.n	800182a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
 80017e8:	e01f      	b.n	800182a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01b      	beq.n	800182a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
 80017fa:	e016      	b.n	800182a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d107      	bne.n	800181a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0208 	bic.w	r2, r2, #8
 8001818:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	2220      	movs	r2, #32
 8001834:	409a      	lsls	r2, r3
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8110 	beq.w	8001a60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <HAL_DMA_IRQHandler+0x690>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_DMA_IRQHandler+0x694>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d045      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a29      	ldr	r2, [pc, #164]	; (8001900 <HAL_DMA_IRQHandler+0x698>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a28      	ldr	r2, [pc, #160]	; (8001904 <HAL_DMA_IRQHandler+0x69c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d03b      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_DMA_IRQHandler+0x6a0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d036      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_DMA_IRQHandler+0x6a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a23      	ldr	r2, [pc, #140]	; (8001910 <HAL_DMA_IRQHandler+0x6a8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02c      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <HAL_DMA_IRQHandler+0x6ac>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d027      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HAL_DMA_IRQHandler+0x6b0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1f      	ldr	r2, [pc, #124]	; (800191c <HAL_DMA_IRQHandler+0x6b4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_DMA_IRQHandler+0x6b8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d018      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <HAL_DMA_IRQHandler+0x6bc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <HAL_DMA_IRQHandler+0x6c0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00e      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_DMA_IRQHandler+0x6c4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d009      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_DMA_IRQHandler+0x6c8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x678>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a16      	ldr	r2, [pc, #88]	; (8001934 <HAL_DMA_IRQHandler+0x6cc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d12b      	bne.n	8001938 <HAL_DMA_IRQHandler+0x6d0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	e02a      	b.n	800194c <HAL_DMA_IRQHandler+0x6e4>
 80018f6:	bf00      	nop
 80018f8:	40020010 	.word	0x40020010
 80018fc:	40020028 	.word	0x40020028
 8001900:	40020040 	.word	0x40020040
 8001904:	40020058 	.word	0x40020058
 8001908:	40020070 	.word	0x40020070
 800190c:	40020088 	.word	0x40020088
 8001910:	400200a0 	.word	0x400200a0
 8001914:	400200b8 	.word	0x400200b8
 8001918:	40020410 	.word	0x40020410
 800191c:	40020428 	.word	0x40020428
 8001920:	40020440 	.word	0x40020440
 8001924:	40020458 	.word	0x40020458
 8001928:	40020470 	.word	0x40020470
 800192c:	40020488 	.word	0x40020488
 8001930:	400204a0 	.word	0x400204a0
 8001934:	400204b8 	.word	0x400204b8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8087 	beq.w	8001a60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2220      	movs	r2, #32
 800195c:	409a      	lsls	r2, r3
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b04      	cmp	r3, #4
 800196c:	d139      	bne.n	80019e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0216 	bic.w	r2, r2, #22
 800197c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <HAL_DMA_IRQHandler+0x736>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0208 	bic.w	r2, r2, #8
 80019ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	223f      	movs	r2, #63	; 0x3f
 80019b8:	409a      	lsls	r2, r3
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 834a 	beq.w	800206c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
          }
          return;
 80019e0:	e344      	b.n	800206c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d018      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d02c      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
 8001a0e:	e027      	b.n	8001a60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
 8001a20:	e01e      	b.n	8001a60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0210 	bic.w	r2, r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8306 	beq.w	8002076 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8088 	beq.w	8001b88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_DMA_IRQHandler+0xa08>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a79      	ldr	r2, [pc, #484]	; (8001c74 <HAL_DMA_IRQHandler+0xa0c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a77      	ldr	r2, [pc, #476]	; (8001c78 <HAL_DMA_IRQHandler+0xa10>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a76      	ldr	r2, [pc, #472]	; (8001c7c <HAL_DMA_IRQHandler+0xa14>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a74      	ldr	r2, [pc, #464]	; (8001c80 <HAL_DMA_IRQHandler+0xa18>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a73      	ldr	r2, [pc, #460]	; (8001c84 <HAL_DMA_IRQHandler+0xa1c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <HAL_DMA_IRQHandler+0xa20>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a70      	ldr	r2, [pc, #448]	; (8001c8c <HAL_DMA_IRQHandler+0xa24>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_DMA_IRQHandler+0xa28>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6d      	ldr	r2, [pc, #436]	; (8001c94 <HAL_DMA_IRQHandler+0xa2c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <HAL_DMA_IRQHandler+0xa30>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <HAL_DMA_IRQHandler+0xa34>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a68      	ldr	r2, [pc, #416]	; (8001ca0 <HAL_DMA_IRQHandler+0xa38>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a67      	ldr	r2, [pc, #412]	; (8001ca4 <HAL_DMA_IRQHandler+0xa3c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <HAL_DMA_IRQHandler+0xa40>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x8b8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a64      	ldr	r2, [pc, #400]	; (8001cac <HAL_DMA_IRQHandler+0xa44>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d108      	bne.n	8001b32 <HAL_DMA_IRQHandler+0x8ca>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e007      	b.n	8001b42 <HAL_DMA_IRQHandler+0x8da>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3301      	adds	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d307      	bcc.n	8001b5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f2      	bne.n	8001b42 <HAL_DMA_IRQHandler+0x8da>
 8001b5c:	e000      	b.n	8001b60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001b5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001b76:	e003      	b.n	8001b80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8272 	beq.w	8002076 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
 8001b9a:	e26c      	b.n	8002076 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a43      	ldr	r2, [pc, #268]	; (8001cb0 <HAL_DMA_IRQHandler+0xa48>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d022      	beq.n	8001bec <HAL_DMA_IRQHandler+0x984>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_DMA_IRQHandler+0xa4c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01d      	beq.n	8001bec <HAL_DMA_IRQHandler+0x984>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a40      	ldr	r2, [pc, #256]	; (8001cb8 <HAL_DMA_IRQHandler+0xa50>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d018      	beq.n	8001bec <HAL_DMA_IRQHandler+0x984>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3f      	ldr	r2, [pc, #252]	; (8001cbc <HAL_DMA_IRQHandler+0xa54>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_DMA_IRQHandler+0x984>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <HAL_DMA_IRQHandler+0xa58>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00e      	beq.n	8001bec <HAL_DMA_IRQHandler+0x984>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <HAL_DMA_IRQHandler+0xa5c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_DMA_IRQHandler+0x984>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3a      	ldr	r2, [pc, #232]	; (8001cc8 <HAL_DMA_IRQHandler+0xa60>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_IRQHandler+0x984>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <HAL_DMA_IRQHandler+0xa64>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x988>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x98a>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 823f 	beq.w	8002076 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2204      	movs	r2, #4
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80cd 	beq.w	8001db0 <HAL_DMA_IRQHandler+0xb48>
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80c7 	beq.w	8001db0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d049      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8210 	beq.w	8002070 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001c58:	e20a      	b.n	8002070 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8206 	beq.w	8002070 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001c6c:	e200      	b.n	8002070 <HAL_DMA_IRQHandler+0xe08>
 8001c6e:	bf00      	nop
 8001c70:	40020010 	.word	0x40020010
 8001c74:	40020028 	.word	0x40020028
 8001c78:	40020040 	.word	0x40020040
 8001c7c:	40020058 	.word	0x40020058
 8001c80:	40020070 	.word	0x40020070
 8001c84:	40020088 	.word	0x40020088
 8001c88:	400200a0 	.word	0x400200a0
 8001c8c:	400200b8 	.word	0x400200b8
 8001c90:	40020410 	.word	0x40020410
 8001c94:	40020428 	.word	0x40020428
 8001c98:	40020440 	.word	0x40020440
 8001c9c:	40020458 	.word	0x40020458
 8001ca0:	40020470 	.word	0x40020470
 8001ca4:	40020488 	.word	0x40020488
 8001ca8:	400204a0 	.word	0x400204a0
 8001cac:	400204b8 	.word	0x400204b8
 8001cb0:	58025408 	.word	0x58025408
 8001cb4:	5802541c 	.word	0x5802541c
 8001cb8:	58025430 	.word	0x58025430
 8001cbc:	58025444 	.word	0x58025444
 8001cc0:	58025458 	.word	0x58025458
 8001cc4:	5802546c 	.word	0x5802546c
 8001cc8:	58025480 	.word	0x58025480
 8001ccc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d160      	bne.n	8001d9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7f      	ldr	r2, [pc, #508]	; (8001edc <HAL_DMA_IRQHandler+0xc74>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04a      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a7d      	ldr	r2, [pc, #500]	; (8001ee0 <HAL_DMA_IRQHandler+0xc78>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d045      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7c      	ldr	r2, [pc, #496]	; (8001ee4 <HAL_DMA_IRQHandler+0xc7c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d040      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a7a      	ldr	r2, [pc, #488]	; (8001ee8 <HAL_DMA_IRQHandler+0xc80>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d03b      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a79      	ldr	r2, [pc, #484]	; (8001eec <HAL_DMA_IRQHandler+0xc84>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d036      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a77      	ldr	r2, [pc, #476]	; (8001ef0 <HAL_DMA_IRQHandler+0xc88>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a76      	ldr	r2, [pc, #472]	; (8001ef4 <HAL_DMA_IRQHandler+0xc8c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d02c      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a74      	ldr	r2, [pc, #464]	; (8001ef8 <HAL_DMA_IRQHandler+0xc90>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d027      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a73      	ldr	r2, [pc, #460]	; (8001efc <HAL_DMA_IRQHandler+0xc94>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a71      	ldr	r2, [pc, #452]	; (8001f00 <HAL_DMA_IRQHandler+0xc98>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a70      	ldr	r2, [pc, #448]	; (8001f04 <HAL_DMA_IRQHandler+0xc9c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_DMA_IRQHandler+0xca0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6d      	ldr	r2, [pc, #436]	; (8001f0c <HAL_DMA_IRQHandler+0xca4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <HAL_DMA_IRQHandler+0xca8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <HAL_DMA_IRQHandler+0xcac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xb12>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a68      	ldr	r2, [pc, #416]	; (8001f18 <HAL_DMA_IRQHandler+0xcb0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d108      	bne.n	8001d8c <HAL_DMA_IRQHandler+0xb24>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0208 	bic.w	r2, r2, #8
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e007      	b.n	8001d9c <HAL_DMA_IRQHandler+0xb34>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0204 	bic.w	r2, r2, #4
 8001d9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8165 	beq.w	8002070 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001dae:	e15f      	b.n	8002070 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2202      	movs	r2, #2
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80c5 	beq.w	8001f50 <HAL_DMA_IRQHandler+0xce8>
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80bf 	beq.w	8001f50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2202      	movs	r2, #2
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 813a 	beq.w	8002074 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e08:	e134      	b.n	8002074 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8130 	beq.w	8002074 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e1c:	e12a      	b.n	8002074 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 8089 	bne.w	8001f3c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <HAL_DMA_IRQHandler+0xc74>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04a      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a29      	ldr	r2, [pc, #164]	; (8001ee0 <HAL_DMA_IRQHandler+0xc78>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d045      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <HAL_DMA_IRQHandler+0xc7c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d040      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <HAL_DMA_IRQHandler+0xc80>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d03b      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_DMA_IRQHandler+0xc84>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d036      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_DMA_IRQHandler+0xc88>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d031      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_DMA_IRQHandler+0xc8c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d02c      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a20      	ldr	r2, [pc, #128]	; (8001ef8 <HAL_DMA_IRQHandler+0xc90>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d027      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_DMA_IRQHandler+0xc94>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_DMA_IRQHandler+0xc98>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01d      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_DMA_IRQHandler+0xc9c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d018      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <HAL_DMA_IRQHandler+0xca0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_DMA_IRQHandler+0xca4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00e      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_DMA_IRQHandler+0xca8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <HAL_DMA_IRQHandler+0xcac>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d004      	beq.n	8001eca <HAL_DMA_IRQHandler+0xc62>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <HAL_DMA_IRQHandler+0xcb0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d128      	bne.n	8001f1c <HAL_DMA_IRQHandler+0xcb4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0214 	bic.w	r2, r2, #20
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e027      	b.n	8001f2c <HAL_DMA_IRQHandler+0xcc4>
 8001edc:	40020010 	.word	0x40020010
 8001ee0:	40020028 	.word	0x40020028
 8001ee4:	40020040 	.word	0x40020040
 8001ee8:	40020058 	.word	0x40020058
 8001eec:	40020070 	.word	0x40020070
 8001ef0:	40020088 	.word	0x40020088
 8001ef4:	400200a0 	.word	0x400200a0
 8001ef8:	400200b8 	.word	0x400200b8
 8001efc:	40020410 	.word	0x40020410
 8001f00:	40020428 	.word	0x40020428
 8001f04:	40020440 	.word	0x40020440
 8001f08:	40020458 	.word	0x40020458
 8001f0c:	40020470 	.word	0x40020470
 8001f10:	40020488 	.word	0x40020488
 8001f14:	400204a0 	.word	0x400204a0
 8001f18:	400204b8 	.word	0x400204b8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020a 	bic.w	r2, r2, #10
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8097 	beq.w	8002074 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f4e:	e091      	b.n	8002074 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2208      	movs	r2, #8
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8088 	beq.w	8002076 <HAL_DMA_IRQHandler+0xe0e>
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8082 	beq.w	8002076 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a41      	ldr	r2, [pc, #260]	; (800207c <HAL_DMA_IRQHandler+0xe14>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04a      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_DMA_IRQHandler+0xe18>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d045      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_DMA_IRQHandler+0xe1c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d040      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <HAL_DMA_IRQHandler+0xe20>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d03b      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <HAL_DMA_IRQHandler+0xe24>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d036      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a39      	ldr	r2, [pc, #228]	; (8002090 <HAL_DMA_IRQHandler+0xe28>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a38      	ldr	r2, [pc, #224]	; (8002094 <HAL_DMA_IRQHandler+0xe2c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d02c      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a36      	ldr	r2, [pc, #216]	; (8002098 <HAL_DMA_IRQHandler+0xe30>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d027      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a35      	ldr	r2, [pc, #212]	; (800209c <HAL_DMA_IRQHandler+0xe34>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a33      	ldr	r2, [pc, #204]	; (80020a0 <HAL_DMA_IRQHandler+0xe38>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a32      	ldr	r2, [pc, #200]	; (80020a4 <HAL_DMA_IRQHandler+0xe3c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <HAL_DMA_IRQHandler+0xe40>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <HAL_DMA_IRQHandler+0xe44>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2d      	ldr	r2, [pc, #180]	; (80020b0 <HAL_DMA_IRQHandler+0xe48>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <HAL_DMA_IRQHandler+0xe4c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_DMA_IRQHandler+0xdaa>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <HAL_DMA_IRQHandler+0xe50>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d108      	bne.n	8002024 <HAL_DMA_IRQHandler+0xdbc>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 021c 	bic.w	r2, r2, #28
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e007      	b.n	8002034 <HAL_DMA_IRQHandler+0xdcc>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 020e 	bic.w	r2, r2, #14
 8002032:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2201      	movs	r2, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
 800206a:	e004      	b.n	8002076 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800206c:	bf00      	nop
 800206e:	e002      	b.n	8002076 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002070:	bf00      	nop
 8002072:	e000      	b.n	8002076 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002074:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020010 	.word	0x40020010
 8002080:	40020028 	.word	0x40020028
 8002084:	40020040 	.word	0x40020040
 8002088:	40020058 	.word	0x40020058
 800208c:	40020070 	.word	0x40020070
 8002090:	40020088 	.word	0x40020088
 8002094:	400200a0 	.word	0x400200a0
 8002098:	400200b8 	.word	0x400200b8
 800209c:	40020410 	.word	0x40020410
 80020a0:	40020428 	.word	0x40020428
 80020a4:	40020440 	.word	0x40020440
 80020a8:	40020458 	.word	0x40020458
 80020ac:	40020470 	.word	0x40020470
 80020b0:	40020488 	.word	0x40020488
 80020b4:	400204a0 	.word	0x400204a0
 80020b8:	400204b8 	.word	0x400204b8

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ca:	4b86      	ldr	r3, [pc, #536]	; (80022e4 <HAL_GPIO_Init+0x228>)
 80020cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ce:	e18c      	b.n	80023ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 817e 	beq.w	80023e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d005      	beq.n	8002100 <HAL_GPIO_Init+0x44>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d130      	bne.n	8002162 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002136:	2201      	movs	r2, #1
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 0201 	and.w	r2, r3, #1
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b03      	cmp	r3, #3
 800216c:	d017      	beq.n	800219e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d123      	bne.n	80021f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0203 	and.w	r2, r3, #3
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80d8 	beq.w	80023e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_GPIO_Init+0x22c>)
 8002236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800223a:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <HAL_GPIO_Init+0x22c>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_GPIO_Init+0x22c>)
 8002246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a26      	ldr	r2, [pc, #152]	; (80022ec <HAL_GPIO_Init+0x230>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_GPIO_Init+0x234>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d04a      	beq.n	8002314 <HAL_GPIO_Init+0x258>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_GPIO_Init+0x238>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02b      	beq.n	80022de <HAL_GPIO_Init+0x222>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_GPIO_Init+0x23c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d025      	beq.n	80022da <HAL_GPIO_Init+0x21e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_GPIO_Init+0x240>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01f      	beq.n	80022d6 <HAL_GPIO_Init+0x21a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_GPIO_Init+0x244>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x216>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_GPIO_Init+0x248>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x212>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_GPIO_Init+0x24c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_GPIO_Init+0x250>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x20a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <HAL_GPIO_Init+0x254>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x206>
 80022be:	2309      	movs	r3, #9
 80022c0:	e029      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022c2:	230a      	movs	r3, #10
 80022c4:	e027      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022c6:	2307      	movs	r3, #7
 80022c8:	e025      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022ca:	2306      	movs	r3, #6
 80022cc:	e023      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022ce:	2305      	movs	r3, #5
 80022d0:	e021      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e01f      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e01d      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e01b      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022de:	2301      	movs	r3, #1
 80022e0:	e019      	b.n	8002316 <HAL_GPIO_Init+0x25a>
 80022e2:	bf00      	nop
 80022e4:	58000080 	.word	0x58000080
 80022e8:	58024400 	.word	0x58024400
 80022ec:	58000400 	.word	0x58000400
 80022f0:	58020000 	.word	0x58020000
 80022f4:	58020400 	.word	0x58020400
 80022f8:	58020800 	.word	0x58020800
 80022fc:	58020c00 	.word	0x58020c00
 8002300:	58021000 	.word	0x58021000
 8002304:	58021400 	.word	0x58021400
 8002308:	58021800 	.word	0x58021800
 800230c:	58021c00 	.word	0x58021c00
 8002310:	58022400 	.word	0x58022400
 8002314:	2300      	movs	r3, #0
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002326:	4938      	ldr	r1, [pc, #224]	; (8002408 <HAL_GPIO_Init+0x34c>)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800235a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	3301      	adds	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f47f ae6b 	bne.w	80020d0 <HAL_GPIO_Init+0x14>
  }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3724      	adds	r7, #36	; 0x24
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	58000400 	.word	0x58000400

0800240c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241c:	787b      	ldrb	r3, [r7, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002428:	e003      	b.n	8002432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	041a      	lsls	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f00e f8ff 	bl	8010668 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10d      	bne.n	80024a4 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d106      	bne.n	80024a4 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f882 	bl	80025a8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d10d      	bne.n	80024ce <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d106      	bne.n	80024ce <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2202      	movs	r2, #2
 80024c6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f877 	bl	80025bc <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d10d      	bne.n	80024f8 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d106      	bne.n	80024f8 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f86c 	bl	80025d0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b08      	cmp	r3, #8
 8002504:	d10d      	bne.n	8002522 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b08      	cmp	r3, #8
 8002512:	d106      	bne.n	8002522 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2208      	movs	r2, #8
 800251a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f861 	bl	80025e4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b10      	cmp	r3, #16
 800252e:	d10d      	bne.n	800254c <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b10      	cmp	r3, #16
 800253c:	d106      	bne.n	800254c <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2210      	movs	r2, #16
 8002544:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f856 	bl	80025f8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b20      	cmp	r3, #32
 8002558:	d10d      	bne.n	8002576 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d106      	bne.n	8002576 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f84b 	bl	800260c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d10d      	bne.n	80025a0 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d106      	bne.n	80025a0 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f840 	bl	8002620 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_PWREx_ConfigSupply+0x70>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00a      	beq.n	800265e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_PWREx_ConfigSupply+0x70>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e01f      	b.n	800269a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e01d      	b.n	800269a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_PWREx_ConfigSupply+0x70>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	490f      	ldr	r1, [pc, #60]	; (80026a4 <HAL_PWREx_ConfigSupply+0x70>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800266e:	f7fe f9f5 	bl	8000a5c <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002674:	e009      	b.n	800268a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002676:	f7fe f9f1 	bl	8000a5c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002684:	d901      	bls.n	800268a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e007      	b.n	800269a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_PWREx_ConfigSupply+0x70>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002696:	d1ee      	bne.n	8002676 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	58024800 	.word	0x58024800

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e39d      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8087 	beq.w	80027d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c8:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d2:	4b86      	ldr	r3, [pc, #536]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d007      	beq.n	80026ee <HAL_RCC_OscConfig+0x46>
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	2b18      	cmp	r3, #24
 80026e2:	d110      	bne.n	8002706 <HAL_RCC_OscConfig+0x5e>
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d10b      	bne.n	8002706 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ee:	4b7f      	ldr	r3, [pc, #508]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d06c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x12c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d168      	bne.n	80027d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e377      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x76>
 8002710:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a75      	ldr	r2, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e02e      	b.n	800277c <HAL_RCC_OscConfig+0xd4>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x98>
 8002726:	4b71      	ldr	r3, [pc, #452]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a70      	ldr	r2, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800272c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b6e      	ldr	r3, [pc, #440]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6d      	ldr	r2, [pc, #436]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e01d      	b.n	800277c <HAL_RCC_OscConfig+0xd4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0xbc>
 800274a:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a67      	ldr	r2, [pc, #412]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a64      	ldr	r2, [pc, #400]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0xd4>
 8002764:	4b61      	ldr	r3, [pc, #388]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a60      	ldr	r2, [pc, #384]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b5e      	ldr	r3, [pc, #376]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5d      	ldr	r2, [pc, #372]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe f96a 	bl	8000a5c <HAL_GetTick>
 8002788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe f966 	bl	8000a5c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e32b      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279e:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0xe4>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe f956 	bl	8000a5c <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe f952 	bl	8000a5c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e317      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c6:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x10c>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 808c 	beq.w	80028fc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e4:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ee:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_RCC_OscConfig+0x162>
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	2b18      	cmp	r3, #24
 80027fe:	d137      	bne.n	8002870 <HAL_RCC_OscConfig+0x1c8>
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d132      	bne.n	8002870 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x17a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e2e9      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0219 	bic.w	r2, r3, #25
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	492f      	ldr	r1, [pc, #188]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002834:	f7fe f912 	bl	8000a5c <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283c:	f7fe f90e 	bl	8000a5c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e2d3      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284e:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	4920      	ldr	r1, [pc, #128]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286e:	e045      	b.n	80028fc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d026      	beq.n	80028c6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 0219 	bic.w	r2, r3, #25
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4919      	ldr	r1, [pc, #100]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe f8e7 	bl	8000a5c <HAL_GetTick>
 800288e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe f8e3 	bl	8000a5c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e2a8      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	490b      	ldr	r1, [pc, #44]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
 80028c4:	e01a      	b.n	80028fc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe f8c3 	bl	8000a5c <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe f8bf 	bl	8000a5c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d903      	bls.n	80028f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e284      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
 80028ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f0:	4b96      	ldr	r3, [pc, #600]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ee      	bne.n	80028da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d06a      	beq.n	80029de <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002908:	4b90      	ldr	r3, [pc, #576]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002910:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002912:	4b8e      	ldr	r3, [pc, #568]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d007      	beq.n	800292e <HAL_RCC_OscConfig+0x286>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b18      	cmp	r3, #24
 8002922:	d11b      	bne.n	800295c <HAL_RCC_OscConfig+0x2b4>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d116      	bne.n	800295c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800292e:	4b87      	ldr	r3, [pc, #540]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x29e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e257      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002946:	4b81      	ldr	r3, [pc, #516]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	061b      	lsls	r3, r3, #24
 8002954:	497d      	ldr	r1, [pc, #500]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800295a:	e040      	b.n	80029de <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d023      	beq.n	80029ac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002964:	4b79      	ldr	r3, [pc, #484]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a78      	ldr	r2, [pc, #480]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 800296a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe f874 	bl	8000a5c <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002978:	f7fe f870 	bl	8000a5c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e235      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800298a:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002996:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	4969      	ldr	r1, [pc, #420]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
 80029aa:	e018      	b.n	80029de <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029ac:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a66      	ldr	r2, [pc, #408]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 80029b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe f850 	bl	8000a5c <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029c0:	f7fe f84c 	bl	8000a5c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e211      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d019      	beq.n	8002a26 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b56      	ldr	r3, [pc, #344]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 80029f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f6:	4a55      	ldr	r2, [pc, #340]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe f82d 	bl	8000a5c <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe f829 	bl	8000a5c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1ee      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a18:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x35e>
 8002a24:	e018      	b.n	8002a58 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe f813 	bl	8000a5c <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe f80f 	bl	8000a5c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1d4      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d036      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d019      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a6c:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a36      	ldr	r2, [pc, #216]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a78:	f7fd fff0 	bl	8000a5c <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a80:	f7fd ffec 	bl	8000a5c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1b1      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x3d8>
 8002a9e:	e018      	b.n	8002ad2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aac:	f7fd ffd6 	bl	8000a5c <HAL_GetTick>
 8002ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ab4:	f7fd ffd2 	bl	8000a5c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e197      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac6:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8086 	beq.w	8002bec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x4a8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <HAL_RCC_OscConfig+0x4a8>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aec:	f7fd ffb6 	bl	8000a5c <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002af4:	f7fd ffb2 	bl	8000a5c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e177      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_OscConfig+0x4a8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x480>
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4ac>
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a02      	ldr	r2, [pc, #8]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
 8002b48:	e021      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e6>
 8002b4a:	bf00      	nop
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	58024800 	.word	0x58024800
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4ce>
 8002b5c:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a82      	ldr	r2, [pc, #520]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
 8002b68:	4b80      	ldr	r3, [pc, #512]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a7f      	ldr	r2, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	e00b      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e6>
 8002b76:	4b7d      	ldr	r3, [pc, #500]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a7c      	ldr	r2, [pc, #496]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	4b7a      	ldr	r3, [pc, #488]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a79      	ldr	r2, [pc, #484]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d015      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fd ff61 	bl	8000a5c <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7fd ff5d 	bl	8000a5c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e120      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bb4:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ee      	beq.n	8002b9e <HAL_RCC_OscConfig+0x4f6>
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fd ff4b 	bl	8000a5c <HAL_GetTick>
 8002bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fd ff47 	bl	8000a5c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e10a      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002be0:	4b62      	ldr	r3, [pc, #392]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80ff 	beq.w	8002df4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bfe:	2b18      	cmp	r3, #24
 8002c00:	f000 80ba 	beq.w	8002d78 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	f040 8095 	bne.w	8002d38 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fd ff1f 	bl	8000a5c <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fd ff1b 	bl	8000a5c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0e0      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c34:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c40:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c44:	4b4a      	ldr	r3, [pc, #296]	; (8002d70 <HAL_RCC_OscConfig+0x6c8>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	430a      	orrs	r2, r1
 8002c54:	4945      	ldr	r1, [pc, #276]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	628b      	str	r3, [r1, #40]	; 0x28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	025b      	lsls	r3, r3, #9
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	3b01      	subs	r3, #1
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c8a:	4938      	ldr	r1, [pc, #224]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	4a35      	ldr	r2, [pc, #212]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c9c:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCC_OscConfig+0x6cc>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ca8:	00d2      	lsls	r2, r2, #3
 8002caa:	4930      	ldr	r1, [pc, #192]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f023 020c 	bic.w	r2, r3, #12
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	492b      	ldr	r1, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f023 0202 	bic.w	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	4927      	ldr	r1, [pc, #156]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cd4:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fd fea4 	bl	8000a5c <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fd fea0 	bl	8000a5c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e065      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x670>
 8002d36:	e05d      	b.n	8002df4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fd fe8a 	bl	8000a5c <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fd fe86 	bl	8000a5c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04b      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5e:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_OscConfig+0x6c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x6a4>
 8002d6a:	e043      	b.n	8002df4 <HAL_RCC_OscConfig+0x74c>
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	fffffc0c 	.word	0xfffffc0c
 8002d74:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_OscConfig+0x758>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCC_OscConfig+0x758>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d031      	beq.n	8002df0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d12a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d122      	bne.n	8002df0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d11a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0a5b      	lsrs	r3, r3, #9
 8002dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d111      	bne.n	8002df0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	0c1b      	lsrs	r3, r3, #16
 8002dd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	0e1b      	lsrs	r3, r3, #24
 8002de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3730      	adds	r7, #48	; 0x30
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400

08002e04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e19c      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b8a      	ldr	r3, [pc, #552]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b87      	ldr	r3, [pc, #540]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	4985      	ldr	r1, [pc, #532]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b83      	ldr	r3, [pc, #524]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e184      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d908      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e64:	4b78      	ldr	r3, [pc, #480]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	4975      	ldr	r1, [pc, #468]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	4b70      	ldr	r3, [pc, #448]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d908      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e92:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	496a      	ldr	r1, [pc, #424]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	4b64      	ldr	r3, [pc, #400]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d908      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	495e      	ldr	r1, [pc, #376]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d908      	bls.n	8002f00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4953      	ldr	r1, [pc, #332]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d908      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f023 020f 	bic.w	r2, r3, #15
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4947      	ldr	r1, [pc, #284]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d055      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f3a:	4b43      	ldr	r3, [pc, #268]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4940      	ldr	r1, [pc, #256]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f54:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d121      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0f6      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f6c:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0ea      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0de      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f94:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0d6      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa4:	4b28      	ldr	r3, [pc, #160]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f023 0207 	bic.w	r2, r3, #7
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4925      	ldr	r1, [pc, #148]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fd fd51 	bl	8000a5c <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbe:	f7fd fd4d 	bl	8000a5c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0be      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d1eb      	bne.n	8002fbe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d208      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f023 020f 	bic.w	r2, r3, #15
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	490e      	ldr	r1, [pc, #56]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8003010:	4313      	orrs	r3, r2
 8003012:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d214      	bcs.n	800304c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	4906      	ldr	r1, [pc, #24]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e086      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
 8003044:	52002000 	.word	0x52002000
 8003048:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003064:	429a      	cmp	r2, r3
 8003066:	d208      	bcs.n	800307a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	4939      	ldr	r1, [pc, #228]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003076:	4313      	orrs	r3, r2
 8003078:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003092:	429a      	cmp	r2, r3
 8003094:	d208      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	492e      	ldr	r1, [pc, #184]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d208      	bcs.n	80030d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4922      	ldr	r1, [pc, #136]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d208      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4917      	ldr	r1, [pc, #92]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003100:	4313      	orrs	r3, r2
 8003102:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003104:	f000 f834 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	4912      	ldr	r1, [pc, #72]	; (8003160 <HAL_RCC_ClockConfig+0x35c>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_RCC_ClockConfig+0x35c>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x360>)
 800313a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x364>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x368>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fc3e 	bl	80009c8 <HAL_InitTick>
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	58024400 	.word	0x58024400
 8003160:	08013e70 	.word	0x08013e70
 8003164:	24000004 	.word	0x24000004
 8003168:	24000000 	.word	0x24000000
 800316c:	24000008 	.word	0x24000008

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003176:	4bb3      	ldr	r3, [pc, #716]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800317e:	2b18      	cmp	r3, #24
 8003180:	f200 8155 	bhi.w	800342e <HAL_RCC_GetSysClockFreq+0x2be>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031f1 	.word	0x080031f1
 8003190:	0800342f 	.word	0x0800342f
 8003194:	0800342f 	.word	0x0800342f
 8003198:	0800342f 	.word	0x0800342f
 800319c:	0800342f 	.word	0x0800342f
 80031a0:	0800342f 	.word	0x0800342f
 80031a4:	0800342f 	.word	0x0800342f
 80031a8:	0800342f 	.word	0x0800342f
 80031ac:	08003217 	.word	0x08003217
 80031b0:	0800342f 	.word	0x0800342f
 80031b4:	0800342f 	.word	0x0800342f
 80031b8:	0800342f 	.word	0x0800342f
 80031bc:	0800342f 	.word	0x0800342f
 80031c0:	0800342f 	.word	0x0800342f
 80031c4:	0800342f 	.word	0x0800342f
 80031c8:	0800342f 	.word	0x0800342f
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800342f 	.word	0x0800342f
 80031d4:	0800342f 	.word	0x0800342f
 80031d8:	0800342f 	.word	0x0800342f
 80031dc:	0800342f 	.word	0x0800342f
 80031e0:	0800342f 	.word	0x0800342f
 80031e4:	0800342f 	.word	0x0800342f
 80031e8:	0800342f 	.word	0x0800342f
 80031ec:	08003223 	.word	0x08003223
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031f0:	4b94      	ldr	r3, [pc, #592]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031fc:	4b91      	ldr	r3, [pc, #580]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	08db      	lsrs	r3, r3, #3
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	4a90      	ldr	r2, [pc, #576]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
 800320c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800320e:	e111      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003210:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003212:	61bb      	str	r3, [r7, #24]
    break;
 8003214:	e10e      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003216:	4b8d      	ldr	r3, [pc, #564]	; (800344c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003218:	61bb      	str	r3, [r7, #24]
    break;
 800321a:	e10b      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800321c:	4b8c      	ldr	r3, [pc, #560]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800321e:	61bb      	str	r3, [r7, #24]
    break;
 8003220:	e108      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800322c:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003236:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003238:	4b82      	ldr	r3, [pc, #520]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003242:	4b80      	ldr	r3, [pc, #512]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	08db      	lsrs	r3, r3, #3
 8003248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80e1 	beq.w	8003428 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b02      	cmp	r3, #2
 800326a:	f000 8083 	beq.w	8003374 <HAL_RCC_GetSysClockFreq+0x204>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b02      	cmp	r3, #2
 8003272:	f200 80a1 	bhi.w	80033b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x114>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d056      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003282:	e099      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003284:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d02d      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003290:	4b6c      	ldr	r3, [pc, #432]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ba:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032ea:	e087      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003458 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003312:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800331a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800332e:	e065      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800345c <HAL_RCC_GetSysClockFreq+0x2ec>
 800333e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003342:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003352:	ed97 6a02 	vldr	s12, [r7, #8]
 8003356:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800335a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003372:	e043      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003460 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003396:	ed97 6a02 	vldr	s12, [r7, #8]
 800339a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800339e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033b6:	e021      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800345c <HAL_RCC_GetSysClockFreq+0x2ec>
 80033c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033da:	ed97 6a02 	vldr	s12, [r7, #8]
 80033de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	0a5b      	lsrs	r3, r3, #9
 8003402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003406:	3301      	adds	r3, #1
 8003408:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003414:	edd7 6a07 	vldr	s13, [r7, #28]
 8003418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003420:	ee17 3a90 	vmov	r3, s15
 8003424:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003426:	e005      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    break;
 800342c:	e002      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003430:	61bb      	str	r3, [r7, #24]
    break;
 8003432:	bf00      	nop
  }

  return sysclockfreq;
 8003434:	69bb      	ldr	r3, [r7, #24]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	58024400 	.word	0x58024400
 8003448:	03d09000 	.word	0x03d09000
 800344c:	003d0900 	.word	0x003d0900
 8003450:	007a1200 	.word	0x007a1200
 8003454:	46000000 	.word	0x46000000
 8003458:	4c742400 	.word	0x4c742400
 800345c:	4a742400 	.word	0x4a742400
 8003460:	4af42400 	.word	0x4af42400

08003464 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800346c:	2300      	movs	r3, #0
 800346e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003470:	2300      	movs	r3, #0
 8003472:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d03f      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003488:	d02a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800348a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800348e:	d824      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003494:	d018      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349a:	d81e      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a4:	d007      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034a6:	e018      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a8:	4ba4      	ldr	r3, [pc, #656]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	4aa3      	ldr	r2, [pc, #652]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80034ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034b4:	e015      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fecb 	bl	8004258 <RCCEx_PLL2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034c6:	e00c      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 ff74 	bl	80043bc <RCCEx_PLL3_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
      break;
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034e8:	4b94      	ldr	r3, [pc, #592]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	4991      	ldr	r1, [pc, #580]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	650b      	str	r3, [r1, #80]	; 0x50
 80034fa:	e001      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d03d      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	2b04      	cmp	r3, #4
 8003512:	d826      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003531 	.word	0x08003531
 8003520:	0800353f 	.word	0x0800353f
 8003524:	08003551 	.word	0x08003551
 8003528:	08003569 	.word	0x08003569
 800352c:	08003569 	.word	0x08003569
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b82      	ldr	r3, [pc, #520]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a81      	ldr	r2, [pc, #516]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800353c:	e015      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fe87 	bl	8004258 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800354e:	e00c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ff30 	bl	80043bc <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b72      	ldr	r3, [pc, #456]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	f023 0207 	bic.w	r2, r3, #7
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	496f      	ldr	r1, [pc, #444]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	650b      	str	r3, [r1, #80]	; 0x50
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d051      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800359a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800359e:	d036      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035a0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80035a4:	d830      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80035a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035aa:	d032      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80035ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b0:	d82a      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80035b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035b6:	d02e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80035b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035bc:	d824      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d018      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c8:	d81e      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80035ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d2:	d007      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80035d4:	e018      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035e2:	e019      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fe34 	bl	8004258 <RCCEx_PLL2_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035f4:	e010      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3324      	adds	r3, #36	; 0x24
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fedd 	bl	80043bc <RCCEx_PLL3_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003606:	e007      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]
      break;
 800360c:	e004      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800362c:	4943      	ldr	r1, [pc, #268]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	658b      	str	r3, [r1, #88]	; 0x58
 8003632:	e001      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003640:	2b00      	cmp	r3, #0
 8003642:	d051      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800364a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800364e:	d036      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003650:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003654:	d830      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365a:	d032      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800365c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003660:	d82a      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003666:	d02e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003668:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800366c:	d824      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800366e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003672:	d018      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003678:	d81e      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800367e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003682:	d007      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003684:	e018      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4a2c      	ldr	r2, [pc, #176]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800368c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003692:	e019      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fddc 	bl	8004258 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036a4:	e010      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3324      	adds	r3, #36	; 0x24
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fe85 	bl	80043bc <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036b6:	e007      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
      break;
 80036bc:	e004      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80036c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036dc:	4917      	ldr	r1, [pc, #92]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	658b      	str	r3, [r1, #88]	; 0x58
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d035      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	2b30      	cmp	r3, #48	; 0x30
 80036fa:	d01c      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036fc:	2b30      	cmp	r3, #48	; 0x30
 80036fe:	d817      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d00c      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003704:	2b20      	cmp	r3, #32
 8003706:	d813      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d019      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800370c:	2b10      	cmp	r3, #16
 800370e:	d10f      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800371c:	e011      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2102      	movs	r1, #2
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fd97 	bl	8004258 <RCCEx_PLL2_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800372e:	e008      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
      break;
 8003734:	e005      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8003736:	bf00      	nop
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800373a:	bf00      	nop
 800373c:	58024400 	.word	0x58024400
      break;
 8003740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003748:	4ba3      	ldr	r3, [pc, #652]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003754:	49a0      	ldr	r1, [pc, #640]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003756:	4313      	orrs	r3, r2
 8003758:	64cb      	str	r3, [r1, #76]	; 0x4c
 800375a:	e001      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d047      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003774:	d030      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377a:	d82a      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800377c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003780:	d02c      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003782:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003786:	d824      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378c:	d018      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003792:	d81e      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d007      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800379e:	e018      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a0:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	4a8c      	ldr	r2, [pc, #560]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037ac:	e017      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fd4f 	bl	8004258 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037be:	e00e      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3324      	adds	r3, #36	; 0x24
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fdf8 	bl	80043bc <RCCEx_PLL3_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037d0:	e005      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80037dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037e4:	4b7c      	ldr	r3, [pc, #496]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	4979      	ldr	r1, [pc, #484]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	650b      	str	r3, [r1, #80]	; 0x50
 80037f6:	e001      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d049      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d02e      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003816:	d828      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003818:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800381c:	d02a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800381e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003822:	d822      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003824:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003828:	d026      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800382a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800382e:	d81c      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003834:	d010      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800383a:	d816      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01d      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003844:	d111      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2101      	movs	r1, #1
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fd03 	bl	8004258 <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003856:	e012      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fdac 	bl	80043bc <RCCEx_PLL3_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003868:	e009      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
      break;
 800386e:	e006      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003870:	bf00      	nop
 8003872:	e004      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800387c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003884:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	4951      	ldr	r1, [pc, #324]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003892:	4313      	orrs	r3, r2
 8003894:	650b      	str	r3, [r1, #80]	; 0x50
 8003896:	e001      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d04b      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b2:	d02e      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80038b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b8:	d828      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d02a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d822      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80038c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ca:	d026      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80038cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038d0:	d81c      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d6:	d010      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x496>
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038dc:	d816      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01d      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e6:	d111      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fcb2 	bl	8004258 <RCCEx_PLL2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038f8:	e012      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3324      	adds	r3, #36	; 0x24
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fd5b 	bl	80043bc <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800390a:	e009      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	75fb      	strb	r3, [r7, #23]
      break;
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003912:	bf00      	nop
 8003914:	e004      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003916:	bf00      	nop
 8003918:	e002      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800391e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003934:	4928      	ldr	r1, [pc, #160]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003936:	4313      	orrs	r3, r2
 8003938:	658b      	str	r3, [r1, #88]	; 0x58
 800393a:	e001      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003954:	d00e      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395a:	d814      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003964:	d10f      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003972:	e00c      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fc6c 	bl	8004258 <RCCEx_PLL2_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      break;
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	490d      	ldr	r1, [pc, #52]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	650b      	str	r3, [r1, #80]	; 0x50
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d034      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d81d      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	08003a03 	.word	0x08003a03
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039eb 	.word	0x080039eb
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039dc:	4bb1      	ldr	r3, [pc, #708]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4ab0      	ldr	r2, [pc, #704]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fc31 	bl	8004258 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8003a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a0a:	4ba6      	ldr	r3, [pc, #664]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	49a3      	ldr	r1, [pc, #652]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a1c:	e001      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8086 	beq.w	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4b9d      	ldr	r3, [pc, #628]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a9c      	ldr	r2, [pc, #624]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd f80e 	bl	8000a5c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a42:	e009      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd f80a 	bl	8000a5c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d902      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	75fb      	strb	r3, [r7, #23]
        break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a58:	4b93      	ldr	r3, [pc, #588]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d166      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a6a:	4b8e      	ldr	r3, [pc, #568]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a74:	4053      	eors	r3, r2
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d013      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7e:	4b89      	ldr	r3, [pc, #548]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a88:	4b86      	ldr	r3, [pc, #536]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a85      	ldr	r2, [pc, #532]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4b83      	ldr	r3, [pc, #524]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a82      	ldr	r2, [pc, #520]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa0:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab0:	d115      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fc ffd3 	bl	8000a5c <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fc ffcf 	bl	8000a5c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d902      	bls.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	75fb      	strb	r3, [r7, #23]
            break;
 8003ad0:	e005      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad2:	4b74      	ldr	r3, [pc, #464]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ed      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d126      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003af4:	4b6b      	ldr	r3, [pc, #428]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b02:	0919      	lsrs	r1, r3, #4
 8003b04:	4b69      	ldr	r3, [pc, #420]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b06:	400b      	ands	r3, r1
 8003b08:	4966      	ldr	r1, [pc, #408]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
 8003b0e:	e005      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003b10:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	4a63      	ldr	r2, [pc, #396]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b1a:	6113      	str	r3, [r2, #16]
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	495e      	ldr	r1, [pc, #376]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	670b      	str	r3, [r1, #112]	; 0x70
 8003b30:	e004      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	75bb      	strb	r3, [r7, #22]
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d07e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	2b28      	cmp	r3, #40	; 0x28
 8003b4e:	d867      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003c27 	.word	0x08003c27
 8003b5c:	08003c21 	.word	0x08003c21
 8003b60:	08003c21 	.word	0x08003c21
 8003b64:	08003c21 	.word	0x08003c21
 8003b68:	08003c21 	.word	0x08003c21
 8003b6c:	08003c21 	.word	0x08003c21
 8003b70:	08003c21 	.word	0x08003c21
 8003b74:	08003c21 	.word	0x08003c21
 8003b78:	08003bfd 	.word	0x08003bfd
 8003b7c:	08003c21 	.word	0x08003c21
 8003b80:	08003c21 	.word	0x08003c21
 8003b84:	08003c21 	.word	0x08003c21
 8003b88:	08003c21 	.word	0x08003c21
 8003b8c:	08003c21 	.word	0x08003c21
 8003b90:	08003c21 	.word	0x08003c21
 8003b94:	08003c21 	.word	0x08003c21
 8003b98:	08003c0f 	.word	0x08003c0f
 8003b9c:	08003c21 	.word	0x08003c21
 8003ba0:	08003c21 	.word	0x08003c21
 8003ba4:	08003c21 	.word	0x08003c21
 8003ba8:	08003c21 	.word	0x08003c21
 8003bac:	08003c21 	.word	0x08003c21
 8003bb0:	08003c21 	.word	0x08003c21
 8003bb4:	08003c21 	.word	0x08003c21
 8003bb8:	08003c27 	.word	0x08003c27
 8003bbc:	08003c21 	.word	0x08003c21
 8003bc0:	08003c21 	.word	0x08003c21
 8003bc4:	08003c21 	.word	0x08003c21
 8003bc8:	08003c21 	.word	0x08003c21
 8003bcc:	08003c21 	.word	0x08003c21
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003c27 	.word	0x08003c27
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c21 	.word	0x08003c21
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c27 	.word	0x08003c27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fb28 	bl	8004258 <RCCEx_PLL2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3324      	adds	r3, #36	; 0x24
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fbd1 	bl	80043bc <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3a:	491a      	ldr	r1, [pc, #104]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	654b      	str	r3, [r1, #84]	; 0x54
 8003c40:	e001      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d03e      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d820      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003c79 	.word	0x08003c79
 8003c68:	08003c8b 	.word	0x08003c8b
 8003c6c:	08003cb1 	.word	0x08003cb1
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb1 	.word	0x08003cb1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 faea 	bl	8004258 <RCCEx_PLL2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c88:	e013      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3324      	adds	r3, #36	; 0x24
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fb93 	bl	80043bc <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca0:	e007      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003ca2:	bf00      	nop
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	58024800 	.word	0x58024800
 8003cac:	00ffffcf 	.word	0x00ffffcf
      break;
 8003cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cb8:	4b9f      	ldr	r3, [pc, #636]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f023 0207 	bic.w	r2, r3, #7
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	499c      	ldr	r1, [pc, #624]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	654b      	str	r3, [r1, #84]	; 0x54
 8003cca:	e001      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d039      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d820      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d2f 	.word	0x08003d2f
 8003cf0:	08003d05 	.word	0x08003d05
 8003cf4:	08003d17 	.word	0x08003d17
 8003cf8:	08003d2f 	.word	0x08003d2f
 8003cfc:	08003d2f 	.word	0x08003d2f
 8003d00:	08003d2f 	.word	0x08003d2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 faa4 	bl	8004258 <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d14:	e00c      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3324      	adds	r3, #36	; 0x24
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fb4d 	bl	80043bc <RCCEx_PLL3_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2c:	e000      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d36:	4b80      	ldr	r3, [pc, #512]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d44:	497c      	ldr	r1, [pc, #496]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	658b      	str	r3, [r1, #88]	; 0x58
 8003d4a:	e001      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d04b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d66:	d02e      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6c:	d828      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d72:	d02a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d822      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d7e:	d026      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003d80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d84:	d81c      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8a:	d010      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d90:	d816      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01d      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9a:	d111      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fa58 	bl	8004258 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dac:	e012      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3324      	adds	r3, #36	; 0x24
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fb01 	bl	80043bc <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dda:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	4953      	ldr	r1, [pc, #332]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	654b      	str	r3, [r1, #84]	; 0x54
 8003dee:	e001      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e0a:	d02e      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003e0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e10:	d828      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d02a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d822      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e22:	d026      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e28:	d81c      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2e:	d010      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e34:	d816      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01d      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d111      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fa06 	bl	8004258 <RCCEx_PLL2_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e50:	e012      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3324      	adds	r3, #36	; 0x24
 8003e56:	2102      	movs	r1, #2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 faaf 	bl	80043bc <RCCEx_PLL3_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e62:	e009      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
      break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e004      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e002      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e72:	bf00      	nop
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	492a      	ldr	r1, [pc, #168]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	658b      	str	r3, [r1, #88]	; 0x58
 8003e92:	e001      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d04d      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eae:	d02e      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003eb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eb4:	d828      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eba:	d02a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec0:	d822      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003ec2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ec6:	d026      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003ec8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ecc:	d81c      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed8:	d816      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01d      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f9b4 	bl	8004258 <RCCEx_PLL2_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ef4:	e012      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3324      	adds	r3, #36	; 0x24
 8003efa:	2102      	movs	r1, #2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fa5d 	bl	80043bc <RCCEx_PLL3_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f06:	e009      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0c:	e006      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003f0e:	bf00      	nop
 8003f10:	e004      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f30:	4901      	ldr	r1, [pc, #4]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	658b      	str	r3, [r1, #88]	; 0x58
 8003f36:	e003      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d018      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3324      	adds	r3, #36	; 0x24
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fa2d 	bl	80043bc <RCCEx_PLL3_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003f6c:	4b8a      	ldr	r3, [pc, #552]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f78:	4987      	ldr	r1, [pc, #540]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f94:	d10a      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3324      	adds	r3, #36	; 0x24
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fa0d 	bl	80043bc <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fac:	4b7a      	ldr	r3, [pc, #488]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	4977      	ldr	r1, [pc, #476]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d034      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fd6:	d01d      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fdc:	d817      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fe8:	e011      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f931 	bl	8004258 <RCCEx_PLL2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ffa:	e00c      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3324      	adds	r3, #36	; 0x24
 8004000:	2102      	movs	r1, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f9da 	bl	80043bc <RCCEx_PLL3_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
      break;
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800402a:	495b      	ldr	r1, [pc, #364]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800402c:	4313      	orrs	r3, r2
 800402e:	658b      	str	r3, [r1, #88]	; 0x58
 8004030:	e001      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d033      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004048:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800404c:	d01c      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800404e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004052:	d816      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004058:	d003      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800405a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800405e:	d007      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004060:	e00f      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4a4c      	ldr	r2, [pc, #304]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800406e:	e00c      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3324      	adds	r3, #36	; 0x24
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f9a0 	bl	80043bc <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
      break;
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004090:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409e:	493e      	ldr	r1, [pc, #248]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	654b      	str	r3, [r1, #84]	; 0x54
 80040a4:	e001      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d029      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d007      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80040c4:	e00f      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	4a33      	ldr	r2, [pc, #204]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80040cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040d2:	e00b      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	2102      	movs	r1, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f8bc 	bl	8004258 <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040e4:	e002      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	4926      	ldr	r1, [pc, #152]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004100:	4313      	orrs	r3, r2
 8004102:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004104:	e001      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3324      	adds	r3, #36	; 0x24
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f94d 	bl	80043bc <RCCEx_PLL3_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d033      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004140:	d017      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004146:	d811      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d013      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800414e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004152:	d80b      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8004158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415c:	d106      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004168:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800416a:	e007      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	75fb      	strb	r3, [r7, #23]
      break;
 8004170:	e004      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800417a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418e:	4902      	ldr	r1, [pc, #8]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004190:	4313      	orrs	r3, r2
 8004192:	654b      	str	r3, [r1, #84]	; 0x54
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004196:	bf00      	nop
 8004198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041ac:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b8:	4926      	ldr	r1, [pc, #152]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d6:	491f      	ldr	r1, [pc, #124]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041f2:	6113      	str	r3, [r2, #16]
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041fe:	4915      	ldr	r1, [pc, #84]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	da08      	bge.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	490e      	ldr	r1, [pc, #56]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004238:	4906      	ldr	r1, [pc, #24]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800423a:	4313      	orrs	r3, r2
 800423c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800423e:	7dbb      	ldrb	r3, [r7, #22]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	58024400 	.word	0x58024400

08004258 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004266:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b03      	cmp	r3, #3
 8004270:	d101      	bne.n	8004276 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e099      	b.n	80043aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004276:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a4e      	ldr	r2, [pc, #312]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800427c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004282:	f7fc fbeb 	bl	8000a5c <HAL_GetTick>
 8004286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004288:	e008      	b.n	800429c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800428a:	f7fc fbe7 	bl	8000a5c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e086      	b.n	80043aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800429c:	4b45      	ldr	r3, [pc, #276]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	031b      	lsls	r3, r3, #12
 80042b6:	493f      	ldr	r1, [pc, #252]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	628b      	str	r3, [r1, #40]	; 0x28
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	025b      	lsls	r3, r3, #9
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042ec:	4931      	ldr	r1, [pc, #196]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042f2:	4b30      	ldr	r3, [pc, #192]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	492d      	ldr	r1, [pc, #180]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004304:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	f023 0220 	bic.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	4928      	ldr	r1, [pc, #160]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004316:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <RCCEx_PLL2_Config+0x160>)
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	69d2      	ldr	r2, [r2, #28]
 800432e:	00d2      	lsls	r2, r2, #3
 8004330:	4920      	ldr	r1, [pc, #128]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004336:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800433c:	f043 0310 	orr.w	r3, r3, #16
 8004340:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004348:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800434e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004352:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004354:	e00f      	b.n	8004376 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800435c:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004368:	e005      	b.n	8004376 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004374:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004376:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a0e      	ldr	r2, [pc, #56]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800437c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004382:	f7fc fb6b 	bl	8000a5c <HAL_GetTick>
 8004386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004388:	e008      	b.n	800439c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800438a:	f7fc fb67 	bl	8000a5c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e006      	b.n	80043aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <RCCEx_PLL2_Config+0x15c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
 80043b8:	ffff0007 	.word	0xffff0007

080043bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ca:	4b53      	ldr	r3, [pc, #332]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d101      	bne.n	80043da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e099      	b.n	800450e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043da:	4b4f      	ldr	r3, [pc, #316]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4e      	ldr	r2, [pc, #312]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80043e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e6:	f7fc fb39 	bl	8000a5c <HAL_GetTick>
 80043ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043ec:	e008      	b.n	8004400 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043ee:	f7fc fb35 	bl	8000a5c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e086      	b.n	800450e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004400:	4b45      	ldr	r3, [pc, #276]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800440c:	4b42      	ldr	r3, [pc, #264]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	051b      	lsls	r3, r3, #20
 800441a:	493f      	ldr	r1, [pc, #252]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	628b      	str	r3, [r1, #40]	; 0x28
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	3b01      	subs	r3, #1
 8004426:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	3b01      	subs	r3, #1
 8004430:	025b      	lsls	r3, r3, #9
 8004432:	b29b      	uxth	r3, r3
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	3b01      	subs	r3, #1
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	3b01      	subs	r3, #1
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004450:	4931      	ldr	r1, [pc, #196]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004456:	4b30      	ldr	r3, [pc, #192]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	492d      	ldr	r1, [pc, #180]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004468:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	4928      	ldr	r1, [pc, #160]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800447a:	4b27      	ldr	r3, [pc, #156]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	4a26      	ldr	r2, [pc, #152]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004486:	4b24      	ldr	r3, [pc, #144]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <RCCEx_PLL3_Config+0x160>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	69d2      	ldr	r2, [r2, #28]
 8004492:	00d2      	lsls	r2, r2, #3
 8004494:	4920      	ldr	r1, [pc, #128]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800449a:	4b1f      	ldr	r3, [pc, #124]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044b8:	e00f      	b.n	80044da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044c0:	4b15      	ldr	r3, [pc, #84]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044cc:	e005      	b.n	80044da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	4a11      	ldr	r2, [pc, #68]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e6:	f7fc fab9 	bl	8000a5c <HAL_GetTick>
 80044ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044ec:	e008      	b.n	8004500 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044ee:	f7fc fab5 	bl	8000a5c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e006      	b.n	800450e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <RCCEx_PLL3_Config+0x15c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	58024400 	.word	0x58024400
 800451c:	ffff0007 	.word	0xffff0007

08004520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e049      	b.n	80045c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc f944 	bl	80007d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f000 fa66 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <HAL_TIM_PWM_Start+0x24>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e03c      	b.n	800466e <HAL_TIM_PWM_Start+0x9e>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d109      	bne.n	800460e <HAL_TIM_PWM_Start+0x3e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	bf14      	ite	ne
 8004606:	2301      	movne	r3, #1
 8004608:	2300      	moveq	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	e02f      	b.n	800466e <HAL_TIM_PWM_Start+0x9e>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d109      	bne.n	8004628 <HAL_TIM_PWM_Start+0x58>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e022      	b.n	800466e <HAL_TIM_PWM_Start+0x9e>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b0c      	cmp	r3, #12
 800462c:	d109      	bne.n	8004642 <HAL_TIM_PWM_Start+0x72>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	bf14      	ite	ne
 800463a:	2301      	movne	r3, #1
 800463c:	2300      	moveq	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	e015      	b.n	800466e <HAL_TIM_PWM_Start+0x9e>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b10      	cmp	r3, #16
 8004646:	d109      	bne.n	800465c <HAL_TIM_PWM_Start+0x8c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e008      	b.n	800466e <HAL_TIM_PWM_Start+0x9e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0ab      	b.n	80047ce <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <HAL_TIM_PWM_Start+0xb6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004684:	e023      	b.n	80046ce <HAL_TIM_PWM_Start+0xfe>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xc6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004694:	e01b      	b.n	80046ce <HAL_TIM_PWM_Start+0xfe>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xd6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a4:	e013      	b.n	80046ce <HAL_TIM_PWM_Start+0xfe>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0xe6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046b4:	e00b      	b.n	80046ce <HAL_TIM_PWM_Start+0xfe>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0xf6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c4:	e003      	b.n	80046ce <HAL_TIM_PWM_Start+0xfe>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fd26 	bl	8005128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3d      	ldr	r2, [pc, #244]	; (80047d8 <HAL_TIM_PWM_Start+0x208>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_TIM_PWM_Start+0x13e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <HAL_TIM_PWM_Start+0x20c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_TIM_PWM_Start+0x13e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <HAL_TIM_PWM_Start+0x210>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_TIM_PWM_Start+0x13e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a39      	ldr	r2, [pc, #228]	; (80047e4 <HAL_TIM_PWM_Start+0x214>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_TIM_PWM_Start+0x13e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a37      	ldr	r2, [pc, #220]	; (80047e8 <HAL_TIM_PWM_Start+0x218>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_Start+0x142>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_TIM_PWM_Start+0x144>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004726:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <HAL_TIM_PWM_Start+0x208>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d02c      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d027      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <HAL_TIM_PWM_Start+0x21c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <HAL_TIM_PWM_Start+0x220>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01d      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <HAL_TIM_PWM_Start+0x224>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <HAL_TIM_PWM_Start+0x20c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <HAL_TIM_PWM_Start+0x228>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_TIM_PWM_Start+0x210>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <HAL_TIM_PWM_Start+0x22c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIM_PWM_Start+0x1bc>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_TIM_PWM_Start+0x230>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d115      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <HAL_TIM_PWM_Start+0x234>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b06      	cmp	r3, #6
 800479c:	d015      	beq.n	80047ca <HAL_TIM_PWM_Start+0x1fa>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d011      	beq.n	80047ca <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e008      	b.n	80047ca <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e000      	b.n	80047cc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40010400 	.word	0x40010400
 80047e0:	40014000 	.word	0x40014000
 80047e4:	40014400 	.word	0x40014400
 80047e8:	40014800 	.word	0x40014800
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40001800 	.word	0x40001800
 80047fc:	4000e000 	.word	0x4000e000
 8004800:	4000e400 	.word	0x4000e400
 8004804:	00010007 	.word	0x00010007

08004808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004822:	2302      	movs	r3, #2
 8004824:	e0ff      	b.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b14      	cmp	r3, #20
 8004832:	f200 80f0 	bhi.w	8004a16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004891 	.word	0x08004891
 8004840:	08004a17 	.word	0x08004a17
 8004844:	08004a17 	.word	0x08004a17
 8004848:	08004a17 	.word	0x08004a17
 800484c:	080048d1 	.word	0x080048d1
 8004850:	08004a17 	.word	0x08004a17
 8004854:	08004a17 	.word	0x08004a17
 8004858:	08004a17 	.word	0x08004a17
 800485c:	08004913 	.word	0x08004913
 8004860:	08004a17 	.word	0x08004a17
 8004864:	08004a17 	.word	0x08004a17
 8004868:	08004a17 	.word	0x08004a17
 800486c:	08004953 	.word	0x08004953
 8004870:	08004a17 	.word	0x08004a17
 8004874:	08004a17 	.word	0x08004a17
 8004878:	08004a17 	.word	0x08004a17
 800487c:	08004995 	.word	0x08004995
 8004880:	08004a17 	.word	0x08004a17
 8004884:	08004a17 	.word	0x08004a17
 8004888:	08004a17 	.word	0x08004a17
 800488c:	080049d5 	.word	0x080049d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f970 	bl	8004b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0208 	orr.w	r2, r2, #8
 80048aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0204 	bic.w	r2, r2, #4
 80048ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6999      	ldr	r1, [r3, #24]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	619a      	str	r2, [r3, #24]
      break;
 80048ce:	e0a5      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f9e0 	bl	8004c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6999      	ldr	r1, [r3, #24]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	021a      	lsls	r2, r3, #8
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	619a      	str	r2, [r3, #24]
      break;
 8004910:	e084      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fa49 	bl	8004db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0208 	orr.w	r2, r2, #8
 800492c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0204 	bic.w	r2, r2, #4
 800493c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69d9      	ldr	r1, [r3, #28]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	61da      	str	r2, [r3, #28]
      break;
 8004950:	e064      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fab1 	bl	8004ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800496c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69d9      	ldr	r1, [r3, #28]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	021a      	lsls	r2, r3, #8
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	61da      	str	r2, [r3, #28]
      break;
 8004992:	e043      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fafa 	bl	8004f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0208 	orr.w	r2, r2, #8
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0204 	bic.w	r2, r2, #4
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049d2:	e023      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fb3e 	bl	800505c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	021a      	lsls	r2, r3, #8
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a14:	e002      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a44      	ldr	r2, [pc, #272]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d00f      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a41      	ldr	r2, [pc, #260]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a40      	ldr	r2, [pc, #256]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3f      	ldr	r2, [pc, #252]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3e      	ldr	r2, [pc, #248]	; (8004b64 <TIM_Base_SetConfig+0x134>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a33      	ldr	r2, [pc, #204]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d027      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d023      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a30      	ldr	r2, [pc, #192]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2e      	ldr	r2, [pc, #184]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2d      	ldr	r2, [pc, #180]	; (8004b64 <TIM_Base_SetConfig+0x134>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2c      	ldr	r2, [pc, #176]	; (8004b68 <TIM_Base_SetConfig+0x138>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2b      	ldr	r2, [pc, #172]	; (8004b6c <TIM_Base_SetConfig+0x13c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <TIM_Base_SetConfig+0x140>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <TIM_Base_SetConfig+0x144>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a28      	ldr	r2, [pc, #160]	; (8004b78 <TIM_Base_SetConfig+0x148>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <TIM_Base_SetConfig+0x108>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <TIM_Base_SetConfig+0x134>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_Base_SetConfig+0x108>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <TIM_Base_SetConfig+0x138>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0x108>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <TIM_Base_SetConfig+0x13c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0x108>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0f      	ldr	r2, [pc, #60]	; (8004b70 <TIM_Base_SetConfig+0x140>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d103      	bne.n	8004b40 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	615a      	str	r2, [r3, #20]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800
 8004b74:	4000e000 	.word	0x4000e000
 8004b78:	4000e400 	.word	0x4000e400

08004b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <TIM_OC1_SetConfig+0x108>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f023 0302 	bic.w	r3, r3, #2
 8004bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a2d      	ldr	r2, [pc, #180]	; (8004c88 <TIM_OC1_SetConfig+0x10c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00f      	beq.n	8004bf8 <TIM_OC1_SetConfig+0x7c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <TIM_OC1_SetConfig+0x110>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <TIM_OC1_SetConfig+0x7c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <TIM_OC1_SetConfig+0x114>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <TIM_OC1_SetConfig+0x7c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <TIM_OC1_SetConfig+0x118>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_OC1_SetConfig+0x7c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <TIM_OC1_SetConfig+0x11c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10c      	bne.n	8004c12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0308 	bic.w	r3, r3, #8
 8004bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <TIM_OC1_SetConfig+0x10c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00f      	beq.n	8004c3a <TIM_OC1_SetConfig+0xbe>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <TIM_OC1_SetConfig+0x110>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00b      	beq.n	8004c3a <TIM_OC1_SetConfig+0xbe>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1a      	ldr	r2, [pc, #104]	; (8004c90 <TIM_OC1_SetConfig+0x114>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d007      	beq.n	8004c3a <TIM_OC1_SetConfig+0xbe>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <TIM_OC1_SetConfig+0x118>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <TIM_OC1_SetConfig+0xbe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <TIM_OC1_SetConfig+0x11c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d111      	bne.n	8004c5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	621a      	str	r2, [r3, #32]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	fffeff8f 	.word	0xfffeff8f
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f023 0210 	bic.w	r2, r3, #16
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4b34      	ldr	r3, [pc, #208]	; (8004d98 <TIM_OC2_SetConfig+0xfc>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0320 	bic.w	r3, r3, #32
 8004ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <TIM_OC2_SetConfig+0x100>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC2_SetConfig+0x68>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a28      	ldr	r2, [pc, #160]	; (8004da0 <TIM_OC2_SetConfig+0x104>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10d      	bne.n	8004d20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <TIM_OC2_SetConfig+0x100>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00f      	beq.n	8004d48 <TIM_OC2_SetConfig+0xac>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <TIM_OC2_SetConfig+0x104>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_OC2_SetConfig+0xac>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <TIM_OC2_SetConfig+0x108>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_OC2_SetConfig+0xac>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <TIM_OC2_SetConfig+0x10c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC2_SetConfig+0xac>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <TIM_OC2_SetConfig+0x110>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d113      	bne.n	8004d70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	feff8fff 	.word	0xfeff8fff
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800

08004db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <TIM_OC3_SetConfig+0xf8>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a28      	ldr	r2, [pc, #160]	; (8004eac <TIM_OC3_SetConfig+0xfc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_OC3_SetConfig+0x66>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <TIM_OC3_SetConfig+0x100>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d10d      	bne.n	8004e32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <TIM_OC3_SetConfig+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <TIM_OC3_SetConfig+0xaa>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <TIM_OC3_SetConfig+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_OC3_SetConfig+0xaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <TIM_OC3_SetConfig+0x104>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_OC3_SetConfig+0xaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	; (8004eb8 <TIM_OC3_SetConfig+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC3_SetConfig+0xaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <TIM_OC3_SetConfig+0x10c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d113      	bne.n	8004e82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	621a      	str	r2, [r3, #32]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	fffeff8f 	.word	0xfffeff8f
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40010400 	.word	0x40010400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800

08004ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <TIM_OC4_SetConfig+0xbc>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	031b      	lsls	r3, r3, #12
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <TIM_OC4_SetConfig+0xc0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_OC4_SetConfig+0x80>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <TIM_OC4_SetConfig+0xc4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_OC4_SetConfig+0x80>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <TIM_OC4_SetConfig+0xc8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC4_SetConfig+0x80>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <TIM_OC4_SetConfig+0xcc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC4_SetConfig+0x80>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <TIM_OC4_SetConfig+0xd0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d109      	bne.n	8004f54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	019b      	lsls	r3, r3, #6
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	feff8fff 	.word	0xfeff8fff
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40010400 	.word	0x40010400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4b21      	ldr	r3, [pc, #132]	; (8005044 <TIM_OC5_SetConfig+0xb0>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <TIM_OC5_SetConfig+0xb4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_OC5_SetConfig+0x76>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a17      	ldr	r2, [pc, #92]	; (800504c <TIM_OC5_SetConfig+0xb8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_OC5_SetConfig+0x76>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	; (8005050 <TIM_OC5_SetConfig+0xbc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_OC5_SetConfig+0x76>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a15      	ldr	r2, [pc, #84]	; (8005054 <TIM_OC5_SetConfig+0xc0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_OC5_SetConfig+0x76>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a14      	ldr	r2, [pc, #80]	; (8005058 <TIM_OC5_SetConfig+0xc4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d109      	bne.n	800501e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	fffeff8f 	.word	0xfffeff8f
 8005048:	40010000 	.word	0x40010000
 800504c:	40010400 	.word	0x40010400
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4b22      	ldr	r3, [pc, #136]	; (8005110 <TIM_OC6_SetConfig+0xb4>)
 8005088:	4013      	ands	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800509e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	051b      	lsls	r3, r3, #20
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a19      	ldr	r2, [pc, #100]	; (8005114 <TIM_OC6_SetConfig+0xb8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00f      	beq.n	80050d4 <TIM_OC6_SetConfig+0x78>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <TIM_OC6_SetConfig+0xbc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <TIM_OC6_SetConfig+0x78>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a17      	ldr	r2, [pc, #92]	; (800511c <TIM_OC6_SetConfig+0xc0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_OC6_SetConfig+0x78>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a16      	ldr	r2, [pc, #88]	; (8005120 <TIM_OC6_SetConfig+0xc4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_OC6_SetConfig+0x78>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a15      	ldr	r2, [pc, #84]	; (8005124 <TIM_OC6_SetConfig+0xc8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d109      	bne.n	80050e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	029b      	lsls	r3, r3, #10
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	feff8fff 	.word	0xfeff8fff
 8005114:	40010000 	.word	0x40010000
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800

08005128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2201      	movs	r2, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	43db      	mvns	r3, r3
 800514a:	401a      	ands	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_TIMEx_PWMN_Start+0x24>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e022      	b.n	80051de <HAL_TIMEx_PWMN_Start+0x6a>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d109      	bne.n	80051b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	bf14      	ite	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	2300      	moveq	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	e015      	b.n	80051de <HAL_TIMEx_PWMN_Start+0x6a>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d109      	bne.n	80051cc <HAL_TIMEx_PWMN_Start+0x58>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	bf14      	ite	ne
 80051c4:	2301      	movne	r3, #1
 80051c6:	2300      	moveq	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e008      	b.n	80051de <HAL_TIMEx_PWMN_Start+0x6a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	bf14      	ite	ne
 80051d8:	2301      	movne	r3, #1
 80051da:	2300      	moveq	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e07d      	b.n	80052e2 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <HAL_TIMEx_PWMN_Start+0x82>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f4:	e013      	b.n	800521e <HAL_TIMEx_PWMN_Start+0xaa>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d104      	bne.n	8005206 <HAL_TIMEx_PWMN_Start+0x92>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005204:	e00b      	b.n	800521e <HAL_TIMEx_PWMN_Start+0xaa>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d104      	bne.n	8005216 <HAL_TIMEx_PWMN_Start+0xa2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005214:	e003      	b.n	800521e <HAL_TIMEx_PWMN_Start+0xaa>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2204      	movs	r2, #4
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f9b0 	bl	800558c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800523a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <HAL_TIMEx_PWMN_Start+0x178>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02c      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d027      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <HAL_TIMEx_PWMN_Start+0x180>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d01d      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a23      	ldr	r2, [pc, #140]	; (80052f8 <HAL_TIMEx_PWMN_Start+0x184>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <HAL_TIMEx_PWMN_Start+0x188>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_TIMEx_PWMN_Start+0x18c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <HAL_TIMEx_PWMN_Start+0x190>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_TIMEx_PWMN_Start+0x194>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_TIMEx_PWMN_Start+0x12c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1c      	ldr	r2, [pc, #112]	; (800530c <HAL_TIMEx_PWMN_Start+0x198>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d115      	bne.n	80052cc <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <HAL_TIMEx_PWMN_Start+0x19c>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d015      	beq.n	80052de <HAL_TIMEx_PWMN_Start+0x16a>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b8:	d011      	beq.n	80052de <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	e008      	b.n	80052de <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e000      	b.n	80052e0 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40010400 	.word	0x40010400
 8005300:	40001800 	.word	0x40001800
 8005304:	40014000 	.word	0x40014000
 8005308:	4000e000 	.word	0x4000e000
 800530c:	4000e400 	.word	0x4000e400
 8005310:	00010007 	.word	0x00010007

08005314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005328:	2302      	movs	r3, #2
 800532a:	e077      	b.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a35      	ldr	r2, [pc, #212]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a34      	ldr	r2, [pc, #208]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005366:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a25      	ldr	r2, [pc, #148]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02c      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539e:	d027      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a22      	ldr	r2, [pc, #136]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10c      	bne.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40010000 	.word	0x40010000
 800542c:	40010400 	.word	0x40010400
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00
 800543c:	40001800 	.word	0x40001800
 8005440:	40014000 	.word	0x40014000
 8005444:	4000e000 	.word	0x4000e000
 8005448:	4000e400 	.word	0x4000e400

0800544c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005464:	2302      	movs	r3, #2
 8005466:	e087      	b.n	8005578 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a27      	ldr	r2, [pc, #156]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a25      	ldr	r2, [pc, #148]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d106      	bne.n	8005504 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d126      	bne.n	8005566 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	051b      	lsls	r3, r3, #20
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d106      	bne.n	8005566 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40010000 	.word	0x40010000
 8005588:	40010400 	.word	0x40010400

0800558c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	2204      	movs	r2, #4
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1a      	ldr	r2, [r3, #32]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	401a      	ands	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
 80055da:	2300      	movs	r3, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d201      	bcs.n	8005618 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	e000      	b.n	800561a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8005618:	687b      	ldr	r3, [r7, #4]
    }
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <_ZN3PinC1Ev>:
 *      Author: stefan
 */

#include "PinModel/Pin.hpp"

Pin::Pin(){}
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	719a      	strb	r2, [r3, #6]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>:

Pin::Pin(GPIO_TypeDef* port, GPIO_Pin gpio_pin) : port(port), gpio_pin(gpio_pin){}
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	4613      	mov	r3, r2
 800564e:	80fb      	strh	r3, [r7, #6]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	809a      	strh	r2, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	719a      	strb	r2, [r3, #6]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_ZN3Pin8inscribeERS_14Operation_Mode>:
PD14,PD15,PD2,PD3,PD4,PD5,PD6,PD7,PD8,PD9,PE0,PE1,PE10,PE11,PE12,PE13,PE14,PE15,PE2,PE3,
PE4,PE5,PE6,PE7,PE8,PE9,PF0,PF1,PF10,PF11,PF12,PF13,PF14,PF15,PF2,PF3,PF4,PF5,PF6,PF7,
PF8,PF9,PG0,PG1,PG10,PG11,PG12,PG13,PG14,PG15,PG2,PG3,PG4,PG5,PG6,PG7,PG8,PG9,PH0,PH1,
PA2,PA3,PA4,PA5,PA6,PA7,PA8};

void Pin::inscribe(Pin& pin, Operation_Mode mode){
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
	if(pin.mode != Operation_Mode::NOT_USED){
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	799b      	ldrb	r3, [r3, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <_ZN3Pin8inscribeERS_14Operation_Mode+0x1c>
		return;
	}
	pin.mode = mode;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	719a      	strb	r2, [r3, #6]
 800568a:	e000      	b.n	800568e <_ZN3Pin8inscribeERS_14Operation_Mode+0x1e>
		return;
 800568c:	bf00      	nop
}
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80056ae:	b590      	push	{r4, r7, lr}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ffed 	bl	8005698 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 80056be:	4603      	mov	r3, r0
 80056c0:	681c      	ldr	r4, [r3, #0]
 80056c2:	6838      	ldr	r0, [r7, #0]
 80056c4:	f7ff ffe8 	bl	8005698 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 80056c8:	4603      	mov	r3, r0
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	429c      	cmp	r4, r3
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd90      	pop	{r4, r7, pc}

080056de <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	1d1a      	adds	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	601a      	str	r2, [r3, #0]
	return *this;
 80056f0:	687b      	ldr	r3, [r7, #4]
      }
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>:

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

      _GLIBCXX20_CONSTEXPR
      operator _Tp&() const noexcept
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
      { return this->get(); }
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f996 	bl	8005a38 <_ZNKSt17reference_wrapperI3PinE3getEv>
 800570c:	4603      	mov	r3, r0
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <_ZN3Pin5startEv>:

void Pin::start(){
 8005730:	b580      	push	{r7, lr}
 8005732:	b090      	sub	sp, #64	; 0x40
 8005734:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005736:	4b84      	ldr	r3, [pc, #528]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800573c:	4a82      	ldr	r2, [pc, #520]	; (8005948 <_ZN3Pin5startEv+0x218>)
 800573e:	f043 0302 	orr.w	r3, r3, #2
 8005742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005746:	4b80      	ldr	r3, [pc, #512]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005754:	4b7c      	ldr	r3, [pc, #496]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800575a:	4a7b      	ldr	r2, [pc, #492]	; (8005948 <_ZN3Pin5startEv+0x218>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005764:	4b78      	ldr	r3, [pc, #480]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005772:	4b75      	ldr	r3, [pc, #468]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005778:	4a73      	ldr	r2, [pc, #460]	; (8005948 <_ZN3Pin5startEv+0x218>)
 800577a:	f043 0304 	orr.w	r3, r3, #4
 800577e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005782:	4b71      	ldr	r3, [pc, #452]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005790:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005796:	4a6c      	ldr	r2, [pc, #432]	; (8005948 <_ZN3Pin5startEv+0x218>)
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057a0:	4b69      	ldr	r3, [pc, #420]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80057ae:	4b66      	ldr	r3, [pc, #408]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057b4:	4a64      	ldr	r2, [pc, #400]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057b6:	f043 0310 	orr.w	r3, r3, #16
 80057ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057be:	4b62      	ldr	r3, [pc, #392]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80057cc:	4b5e      	ldr	r3, [pc, #376]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057d2:	4a5d      	ldr	r2, [pc, #372]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057dc:	4b5a      	ldr	r3, [pc, #360]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80057ea:	4b57      	ldr	r3, [pc, #348]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057f0:	4a55      	ldr	r2, [pc, #340]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057fa:	4b53      	ldr	r3, [pc, #332]	; (8005948 <_ZN3Pin5startEv+0x218>)
 80057fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]

	for(Pin& pin : Pin::pinVector){
 8005808:	4b50      	ldr	r3, [pc, #320]	; (800594c <_ZN3Pin5startEv+0x21c>)
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800580e:	f000 f8f2 	bl	80059f6 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>
 8005812:	4603      	mov	r3, r0
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005818:	f000 f8fd 	bl	8005a16 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>
 800581c:	4603      	mov	r3, r0
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	463a      	mov	r2, r7
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ff41 	bl	80056ae <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 800582c:	4603      	mov	r3, r0
 800582e:	f083 0301 	eor.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8082 	beq.w	800593e <_ZN3Pin5startEv+0x20e>
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff6a 	bl	8005716 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>
 8005842:	4603      	mov	r3, r0
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff ff5a 	bl	80056fe <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>
 800584a:	63b8      	str	r0, [r7, #56]	; 0x38
		GPIO_InitStruct = {0};
 800584c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	609a      	str	r2, [r3, #8]
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = pin.gpio_pin;
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	889b      	ldrh	r3, [r3, #4]
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
		switch(pin.mode){
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	799b      	ldrb	r3, [r3, #6]
 8005866:	2b05      	cmp	r3, #5
 8005868:	d863      	bhi.n	8005932 <_ZN3Pin5startEv+0x202>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <_ZN3Pin5startEv+0x140>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005889 	.word	0x08005889
 8005874:	080058c1 	.word	0x080058c1
 8005878:	080058a3 	.word	0x080058a3
 800587c:	080058db 	.word	0x080058db
 8005880:	080058f5 	.word	0x080058f5
 8005884:	08005911 	.word	0x08005911

		case Operation_Mode::NOT_USED:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800588c:	2302      	movs	r3, #2
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc fc0e 	bl	80020bc <HAL_GPIO_Init>
			break;
 80058a0:	e048      	b.n	8005934 <_ZN3Pin5startEv+0x204>

		case Operation_Mode::OUTPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 80058a2:	2301      	movs	r3, #1
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058aa:	2300      	movs	r3, #0
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fc fbff 	bl	80020bc <HAL_GPIO_Init>
			break;
 80058be:	e039      	b.n	8005934 <_ZN3Pin5startEv+0x204>

		case Operation_Mode::INPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058d0:	4611      	mov	r1, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fc fbf2 	bl	80020bc <HAL_GPIO_Init>
			break;
 80058d8:	e02c      	b.n	8005934 <_ZN3Pin5startEv+0x204>

		case Operation_Mode::ANALOG:
			GPIO_InitStruct.Mode =  GPIO_MODE_ANALOG;
 80058da:	2303      	movs	r3, #3
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058ea:	4611      	mov	r1, r2
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fc fbe5 	bl	80020bc <HAL_GPIO_Init>
			break;
 80058f2:	e01f      	b.n	8005934 <_ZN3Pin5startEv+0x204>
		case Operation_Mode::EXTERNAL_INTERRUPT:
			GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058fa:	2302      	movs	r3, #2
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fc fbd7 	bl	80020bc <HAL_GPIO_Init>
			break;
 800590e:	e011      	b.n	8005934 <_ZN3Pin5startEv+0x204>
		case Operation_Mode::PWM_MODE:
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005910:	2302      	movs	r3, #2
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005918:	2300      	movs	r3, #0
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800591c:	2301      	movs	r3, #1
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f7fc fbc6 	bl	80020bc <HAL_GPIO_Init>
			break;
 8005930:	e000      	b.n	8005934 <_ZN3Pin5startEv+0x204>

		default:
			break;
 8005932:	bf00      	nop
	for(Pin& pin : Pin::pinVector){
 8005934:	1d3b      	adds	r3, r7, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fed1 	bl	80056de <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>
 800593c:	e770      	b.n	8005820 <_ZN3Pin5startEv+0xf0>
		}
	}
}
 800593e:	bf00      	nop
 8005940:	3740      	adds	r7, #64	; 0x40
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	58024400 	.word	0x58024400
 800594c:	24000898 	.word	0x24000898

08005950 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f879 	bl	8005a50 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <_ZNSaISt17reference_wrapperI3PinEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 800597e:	b5b0      	push	{r4, r5, r7, lr}
 8005980:	b086      	sub	sp, #24
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	1d38      	adds	r0, r7, #4
 8005988:	e880 0006 	stmia.w	r0, {r1, r2}
 800598c:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f873 	bl	8005a7e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f897 	bl	8005ace <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 80059a0:	4604      	mov	r4, r0
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 f89e 	bl	8005ae6 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>
 80059aa:	4602      	mov	r2, r0
 80059ac:	462b      	mov	r3, r5
 80059ae:	4621      	mov	r1, r4
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f8be 	bl	8005b32 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bdb0      	pop	{r4, r5, r7, pc}

080059c0 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80059c0:	b5b0      	push	{r4, r5, r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681c      	ldr	r4, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f8e6 	bl	8005ba4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 80059d8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80059da:	461a      	mov	r2, r3
 80059dc:	4629      	mov	r1, r5
 80059de:	4620      	mov	r0, r4
 80059e0:	f000 f8eb 	bl	8005bba <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f858 	bl	8005a9c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}

080059f6 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	f107 030c 	add.w	r3, r7, #12
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f8e5 	bl	8005bd6 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	1d1a      	adds	r2, r3, #4
 8005a22:	f107 030c 	add.w	r3, r7, #12
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 f8d4 	bl	8005bd6 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <_ZNKSt17reference_wrapperI3PinE3getEv>:

      _GLIBCXX20_CONSTEXPR
      _Tp&
      get() const noexcept
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
      { return *_M_data; }
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff ff7a 	bl	8005968 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 f8b2 	bl	8005bf6 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8af 	bl	8005c1a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>
      }
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff ffd1 	bl	8005a66 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8005ae6:	b590      	push	{r4, r7, lr}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ffed 	bl	8005ace <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 8005af4:	4604      	mov	r4, r0
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8a2 	bl	8005c40 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>
 8005afc:	4603      	mov	r3, r0
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4423      	add	r3, r4
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd90      	pop	{r4, r7, pc}

08005b0a <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8005b0a:	b5b0      	push	{r4, r5, r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8005b14:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f89d 	bl	8005c58 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 8005b1e:	462a      	mov	r2, r5
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f8a2 	bl	8005c6c <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 8005b28:	4603      	mov	r3, r0
    }
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bdb0      	pop	{r4, r5, r7, pc}

08005b32 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005b32:	b590      	push	{r4, r7, lr}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	68b8      	ldr	r0, [r7, #8]
 8005b44:	f7ff ffe1 	bl	8005b0a <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8005b4c:	68fc      	ldr	r4, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f827 	bl	8005ba4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6978      	ldr	r0, [r7, #20]
 8005b5c:	f000 f896 	bl	8005c8c <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>
 8005b60:	4603      	mov	r3, r0
 8005b62:	4619      	mov	r1, r3
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 f8b9 	bl	8005cdc <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f80d 	bl	8005ba4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 8005b8a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	68b8      	ldr	r0, [r7, #8]
 8005b92:	f000 f8b7 	bl	8005d04 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 8005b96:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	605a      	str	r2, [r3, #4]
	}
 8005b9c:	bf00      	nop
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd90      	pop	{r4, r7, pc}

08005ba4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f8ac 	bl	8005d26 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>
    }
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8a5 	bl	8005d52 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f8af 	bl	8005d6e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
	if (__p)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f8af 	bl	8005d96 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>
      }
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	109b      	asrs	r3, r3, #2
    }
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005c96:	f107 030c 	add.w	r3, r7, #12
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 f858 	bl	8005d52 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 8005ca2:	f107 030c 	add.w	r3, r7, #12
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f8a0 	bl	8005dec <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>
 8005cac:	4602      	mov	r2, r0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	bf8c      	ite	hi
 8005cb4:	2301      	movhi	r3, #1
 8005cb6:	2300      	movls	r3, #0
 8005cb8:	b2dc      	uxtb	r4, r3
 8005cba:	f107 030c 	add.w	r3, r7, #12
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fe52 	bl	8005968 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	d002      	beq.n	8005cce <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x42>
	  __throw_length_error(
 8005cc8:	4803      	ldr	r0, [pc, #12]	; (8005cd8 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x4c>)
 8005cca:	f00d fb10 	bl	80132ee <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8005cce:	687b      	ldr	r3, [r7, #4]
      }
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd90      	pop	{r4, r7, pc}
 8005cd8:	08013718 	.word	0x08013718

08005cdc <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x1e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f895 	bl	8005e20 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	e000      	b.n	8005cfc <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x20>
 8005cfa:	2300      	movs	r3, #0
      }
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f8a2 	bl	8005e60 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8005d30:	f7ff fc51 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f8a1 	bl	8005e84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
 8005d42:	e003      	b.n	8005d4c <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f8b4 	bl	8005eb4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
    }
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f8b3 	bl	8005eca <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	609a      	str	r2, [r3, #8]
	{ }
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b088      	sub	sp, #32
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8005dae:	f7ff fc12 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 8005db8:	69b8      	ldr	r0, [r7, #24]
 8005dba:	f00d f9cd 	bl	8013158 <_ZdlPv>
	    return;
 8005dbe:	e005      	b.n	8005dcc <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	69f8      	ldr	r0, [r7, #28]
 8005dc6:	f000 f8c2 	bl	8005f4e <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	3720      	adds	r7, #32
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005ddc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8005df4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005df8:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff ffea 	bl	8005dd4 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>
 8005e00:	4603      	mov	r3, r0
 8005e02:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005e04:	f107 0208 	add.w	r2, r7, #8
 8005e08:	f107 030c 	add.w	r3, r7, #12
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fbf5 	bl	80055fe <_ZSt3minIjERKT_S2_S2_>
 8005e14:	4603      	mov	r3, r0
 8005e16:	681b      	ldr	r3, [r3, #0]
      }
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005e32:	f7ff fbd0 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f00d f98d 	bl	8013160 <_Znwj>
 8005e46:	4603      	mov	r3, r0
 8005e48:	e006      	b.n	8005e58 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 f88c 	bl	8005f6c <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>
 8005e54:	4603      	mov	r3, r0
 8005e56:	bf00      	nop
      { return __a.allocate(__n); }
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f834 	bl	8005ee2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>
 8005e7a:	4603      	mov	r3, r0
    }
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d00a      	beq.n	8005eac <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f843 	bl	8005f22 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f84a 	bl	8005f38 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>
	  for (; __first != __last; ++__first)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	e7f0      	b.n	8005e8e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0xa>
	}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>:

      _GLIBCXX20_CONSTEXPR
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d00e      	beq.n	8005f18 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f000 f811 	bl	8005f22 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 8005f00:	4603      	mov	r3, r0
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 f850 	bl	8005faa <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3304      	adds	r3, #4
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e7ec      	b.n	8005ef2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 8005f18:	697b      	ldr	r3, [r7, #20]
	}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>:
    _Destroy(_Tp* __pointer)
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f847 	bl	8005fd4 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>
    }
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	68b8      	ldr	r0, [r7, #8]
 8005f62:	f00d f8fb 	bl	801315c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f835 	bl	8005fe8 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4293      	cmp	r3, r2
 8005f84:	bf8c      	ite	hi
 8005f86:	2301      	movhi	r3, #1
 8005f88:	2300      	movls	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005f90:	f00d f9aa 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f00d f8e1 	bl	8013160 <_Znwj>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	bf00      	nop
      }
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8005faa:	b590      	push	{r4, r7, lr}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8005fb4:	6838      	ldr	r0, [r7, #0]
 8005fb6:	f000 f823 	bl	8006000 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005fba:	4604      	mov	r4, r0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	2004      	movs	r0, #4
 8005fc2:	f7ff fb10 	bl	80055e6 <_ZnwjPv>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd90      	pop	{r4, r7, pc}

08005fd4 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>:
    destroy_at(_Tp* __location)
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    }
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005ff0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <_Z41__static_initialization_and_destruction_0ii>:
 8006018:	b580      	push	{r7, lr}
 800601a:	b0f4      	sub	sp, #464	; 0x1d0
 800601c:	af00      	add	r7, sp, #0
 800601e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8006022:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8006026:	6018      	str	r0, [r3, #0]
 8006028:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800602c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006030:	6019      	str	r1, [r3, #0]
 8006032:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8006036:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	f040 832c 	bne.w	800669a <_Z41__static_initialization_and_destruction_0ii+0x682>
 8006042:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8006046:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006050:	4293      	cmp	r3, r2
 8006052:	f040 8322 	bne.w	800669a <_Z41__static_initialization_and_destruction_0ii+0x682>
Pin PE2(GPIOE,GPIO_Pin::PIN_2);
 8006056:	2204      	movs	r2, #4
 8006058:	49ba      	ldr	r1, [pc, #744]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800605a:	48bb      	ldr	r0, [pc, #748]	; (8006348 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800605c:	f7ff faf1 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE3(GPIOE,GPIO_Pin::PIN_3);
 8006060:	2208      	movs	r2, #8
 8006062:	49b8      	ldr	r1, [pc, #736]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006064:	48b9      	ldr	r0, [pc, #740]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006066:	f7ff faec 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE4(GPIOE,GPIO_Pin::PIN_4);
 800606a:	2210      	movs	r2, #16
 800606c:	49b5      	ldr	r1, [pc, #724]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800606e:	48b8      	ldr	r0, [pc, #736]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006070:	f7ff fae7 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE5(GPIOE,GPIO_Pin::PIN_5);
 8006074:	2220      	movs	r2, #32
 8006076:	49b3      	ldr	r1, [pc, #716]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006078:	48b6      	ldr	r0, [pc, #728]	; (8006354 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800607a:	f7ff fae2 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE6(GPIOE,GPIO_Pin::PIN_6);
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	49b0      	ldr	r1, [pc, #704]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006082:	48b5      	ldr	r0, [pc, #724]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006084:	f7ff fadd 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC13(GPIOC,GPIO_Pin::PIN_13);
 8006088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800608c:	49b3      	ldr	r1, [pc, #716]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800608e:	48b4      	ldr	r0, [pc, #720]	; (8006360 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006090:	f7ff fad7 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC14(GPIOC,GPIO_Pin::PIN_14);
 8006094:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006098:	49b0      	ldr	r1, [pc, #704]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800609a:	48b2      	ldr	r0, [pc, #712]	; (8006364 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800609c:	f7ff fad1 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC15(GPIOC,GPIO_Pin::PIN_15);
 80060a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060a4:	49ad      	ldr	r1, [pc, #692]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80060a6:	48b0      	ldr	r0, [pc, #704]	; (8006368 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80060a8:	f7ff facb 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF0(GPIOF,GPIO_Pin::PIN_0);
 80060ac:	2201      	movs	r2, #1
 80060ae:	49af      	ldr	r1, [pc, #700]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060b0:	48af      	ldr	r0, [pc, #700]	; (8006370 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80060b2:	f7ff fac6 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF1(GPIOF,GPIO_Pin::PIN_1);
 80060b6:	2202      	movs	r2, #2
 80060b8:	49ac      	ldr	r1, [pc, #688]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060ba:	48ae      	ldr	r0, [pc, #696]	; (8006374 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80060bc:	f7ff fac1 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF2(GPIOF,GPIO_Pin::PIN_2);
 80060c0:	2204      	movs	r2, #4
 80060c2:	49aa      	ldr	r1, [pc, #680]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060c4:	48ac      	ldr	r0, [pc, #688]	; (8006378 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80060c6:	f7ff fabc 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF3(GPIOF,GPIO_Pin::PIN_3);
 80060ca:	2208      	movs	r2, #8
 80060cc:	49a7      	ldr	r1, [pc, #668]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060ce:	48ab      	ldr	r0, [pc, #684]	; (800637c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80060d0:	f7ff fab7 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF4(GPIOF,GPIO_Pin::PIN_4);
 80060d4:	2210      	movs	r2, #16
 80060d6:	49a5      	ldr	r1, [pc, #660]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060d8:	48a9      	ldr	r0, [pc, #676]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80060da:	f7ff fab2 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF5(GPIOF,GPIO_Pin::PIN_5);
 80060de:	2220      	movs	r2, #32
 80060e0:	49a2      	ldr	r1, [pc, #648]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060e2:	48a8      	ldr	r0, [pc, #672]	; (8006384 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80060e4:	f7ff faad 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF6(GPIOF,GPIO_Pin::PIN_6);
 80060e8:	2240      	movs	r2, #64	; 0x40
 80060ea:	49a0      	ldr	r1, [pc, #640]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060ec:	48a6      	ldr	r0, [pc, #664]	; (8006388 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80060ee:	f7ff faa8 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF7(GPIOF,GPIO_Pin::PIN_7);
 80060f2:	2280      	movs	r2, #128	; 0x80
 80060f4:	499d      	ldr	r1, [pc, #628]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80060f6:	48a5      	ldr	r0, [pc, #660]	; (800638c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80060f8:	f7ff faa3 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF8(GPIOF,GPIO_Pin::PIN_8);
 80060fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006100:	499a      	ldr	r1, [pc, #616]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006102:	48a3      	ldr	r0, [pc, #652]	; (8006390 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006104:	f7ff fa9d 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF9(GPIOF,GPIO_Pin::PIN_9);
 8006108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800610c:	4997      	ldr	r1, [pc, #604]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800610e:	48a1      	ldr	r0, [pc, #644]	; (8006394 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8006110:	f7ff fa97 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF10(GPIOF,GPIO_Pin::PIN_10);
 8006114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006118:	4994      	ldr	r1, [pc, #592]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800611a:	489f      	ldr	r0, [pc, #636]	; (8006398 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800611c:	f7ff fa91 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH0(GPIOH,GPIO_Pin::PIN_0);
 8006120:	2201      	movs	r2, #1
 8006122:	499e      	ldr	r1, [pc, #632]	; (800639c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006124:	489e      	ldr	r0, [pc, #632]	; (80063a0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006126:	f7ff fa8c 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH1(GPIOH,GPIO_Pin::PIN_1);
 800612a:	2202      	movs	r2, #2
 800612c:	499b      	ldr	r1, [pc, #620]	; (800639c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800612e:	489d      	ldr	r0, [pc, #628]	; (80063a4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006130:	f7ff fa87 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC0(GPIOC,GPIO_Pin::PIN_0);
 8006134:	2201      	movs	r2, #1
 8006136:	4989      	ldr	r1, [pc, #548]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006138:	489b      	ldr	r0, [pc, #620]	; (80063a8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800613a:	f7ff fa82 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC1(GPIOC,GPIO_Pin::PIN_1);
 800613e:	2202      	movs	r2, #2
 8006140:	4986      	ldr	r1, [pc, #536]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006142:	489a      	ldr	r0, [pc, #616]	; (80063ac <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006144:	f7ff fa7d 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC2(GPIOC,GPIO_Pin::PIN_2);
 8006148:	2204      	movs	r2, #4
 800614a:	4984      	ldr	r1, [pc, #528]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800614c:	4898      	ldr	r0, [pc, #608]	; (80063b0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800614e:	f7ff fa78 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC3(GPIOC,GPIO_Pin::PIN_3);
 8006152:	2208      	movs	r2, #8
 8006154:	4981      	ldr	r1, [pc, #516]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006156:	4897      	ldr	r0, [pc, #604]	; (80063b4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8006158:	f7ff fa73 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA0(GPIOA,GPIO_Pin::PIN_0);
 800615c:	2201      	movs	r2, #1
 800615e:	4996      	ldr	r1, [pc, #600]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006160:	4896      	ldr	r0, [pc, #600]	; (80063bc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8006162:	f7ff fa6e 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA1(GPIOA,GPIO_Pin::PIN_1);
 8006166:	2202      	movs	r2, #2
 8006168:	4993      	ldr	r1, [pc, #588]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800616a:	4895      	ldr	r0, [pc, #596]	; (80063c0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800616c:	f7ff fa69 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA2(GPIOA,GPIO_Pin::PIN_2);
 8006170:	2204      	movs	r2, #4
 8006172:	4991      	ldr	r1, [pc, #580]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006174:	4893      	ldr	r0, [pc, #588]	; (80063c4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8006176:	f7ff fa64 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA3(GPIOA,GPIO_Pin::PIN_3);
 800617a:	2208      	movs	r2, #8
 800617c:	498e      	ldr	r1, [pc, #568]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800617e:	4892      	ldr	r0, [pc, #584]	; (80063c8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8006180:	f7ff fa5f 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA4(GPIOA,GPIO_Pin::PIN_4);
 8006184:	2210      	movs	r2, #16
 8006186:	498c      	ldr	r1, [pc, #560]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006188:	4890      	ldr	r0, [pc, #576]	; (80063cc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800618a:	f7ff fa5a 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA5(GPIOA,GPIO_Pin::PIN_5);
 800618e:	2220      	movs	r2, #32
 8006190:	4989      	ldr	r1, [pc, #548]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006192:	488f      	ldr	r0, [pc, #572]	; (80063d0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8006194:	f7ff fa55 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA6(GPIOA,GPIO_Pin::PIN_6);
 8006198:	2240      	movs	r2, #64	; 0x40
 800619a:	4987      	ldr	r1, [pc, #540]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800619c:	488d      	ldr	r0, [pc, #564]	; (80063d4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800619e:	f7ff fa50 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA7(GPIOA,GPIO_Pin::PIN_7);
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	4984      	ldr	r1, [pc, #528]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80061a6:	488c      	ldr	r0, [pc, #560]	; (80063d8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 80061a8:	f7ff fa4b 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC4(GPIOC,GPIO_Pin::PIN_4);
 80061ac:	2210      	movs	r2, #16
 80061ae:	496b      	ldr	r1, [pc, #428]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80061b0:	488a      	ldr	r0, [pc, #552]	; (80063dc <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 80061b2:	f7ff fa46 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC5(GPIOC,GPIO_Pin::PIN_5);
 80061b6:	2220      	movs	r2, #32
 80061b8:	4968      	ldr	r1, [pc, #416]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80061ba:	4889      	ldr	r0, [pc, #548]	; (80063e0 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 80061bc:	f7ff fa41 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB0(GPIOB,GPIO_Pin::PIN_0);
 80061c0:	2201      	movs	r2, #1
 80061c2:	4988      	ldr	r1, [pc, #544]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80061c4:	4888      	ldr	r0, [pc, #544]	; (80063e8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 80061c6:	f7ff fa3c 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB1(GPIOB,GPIO_Pin::PIN_1);
 80061ca:	2202      	movs	r2, #2
 80061cc:	4985      	ldr	r1, [pc, #532]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80061ce:	4887      	ldr	r0, [pc, #540]	; (80063ec <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 80061d0:	f7ff fa37 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB2(GPIOB,GPIO_Pin::PIN_2);
 80061d4:	2204      	movs	r2, #4
 80061d6:	4983      	ldr	r1, [pc, #524]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80061d8:	4885      	ldr	r0, [pc, #532]	; (80063f0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80061da:	f7ff fa32 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF11(GPIOF,GPIO_Pin::PIN_11);
 80061de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e2:	4962      	ldr	r1, [pc, #392]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80061e4:	4883      	ldr	r0, [pc, #524]	; (80063f4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80061e6:	f7ff fa2c 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF12(GPIOF,GPIO_Pin::PIN_12);
 80061ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061ee:	495f      	ldr	r1, [pc, #380]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80061f0:	4881      	ldr	r0, [pc, #516]	; (80063f8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80061f2:	f7ff fa26 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF13(GPIOF,GPIO_Pin::PIN_13);
 80061f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061fa:	495c      	ldr	r1, [pc, #368]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80061fc:	487f      	ldr	r0, [pc, #508]	; (80063fc <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80061fe:	f7ff fa20 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF14(GPIOF,GPIO_Pin::PIN_14);
 8006202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006206:	4959      	ldr	r1, [pc, #356]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006208:	487d      	ldr	r0, [pc, #500]	; (8006400 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800620a:	f7ff fa1a 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF15(GPIOF,GPIO_Pin::PIN_15);
 800620e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006212:	4956      	ldr	r1, [pc, #344]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006214:	487b      	ldr	r0, [pc, #492]	; (8006404 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8006216:	f7ff fa14 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG0(GPIOG,GPIO_Pin::PIN_0);
 800621a:	2201      	movs	r2, #1
 800621c:	497a      	ldr	r1, [pc, #488]	; (8006408 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800621e:	487b      	ldr	r0, [pc, #492]	; (800640c <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8006220:	f7ff fa0f 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG1(GPIOG,GPIO_Pin::PIN_1);
 8006224:	2202      	movs	r2, #2
 8006226:	4978      	ldr	r1, [pc, #480]	; (8006408 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8006228:	4879      	ldr	r0, [pc, #484]	; (8006410 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800622a:	f7ff fa0a 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE7(GPIOE,GPIO_Pin::PIN_7);
 800622e:	2280      	movs	r2, #128	; 0x80
 8006230:	4944      	ldr	r1, [pc, #272]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006232:	4878      	ldr	r0, [pc, #480]	; (8006414 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8006234:	f7ff fa05 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE8(GPIOE,GPIO_Pin::PIN_8);
 8006238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800623c:	4941      	ldr	r1, [pc, #260]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800623e:	4876      	ldr	r0, [pc, #472]	; (8006418 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8006240:	f7ff f9ff 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE9(GPIOE,GPIO_Pin::PIN_9);
 8006244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006248:	493e      	ldr	r1, [pc, #248]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800624a:	4874      	ldr	r0, [pc, #464]	; (800641c <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800624c:	f7ff f9f9 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE10(GPIOE,GPIO_Pin::PIN_10);
 8006250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006254:	493b      	ldr	r1, [pc, #236]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006256:	4872      	ldr	r0, [pc, #456]	; (8006420 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8006258:	f7ff f9f3 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE11(GPIOE,GPIO_Pin::PIN_11);
 800625c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006260:	4938      	ldr	r1, [pc, #224]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006262:	4870      	ldr	r0, [pc, #448]	; (8006424 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8006264:	f7ff f9ed 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE12(GPIOE,GPIO_Pin::PIN_12);
 8006268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800626c:	4935      	ldr	r1, [pc, #212]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800626e:	486e      	ldr	r0, [pc, #440]	; (8006428 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8006270:	f7ff f9e7 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE13(GPIOE,GPIO_Pin::PIN_13);
 8006274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006278:	4932      	ldr	r1, [pc, #200]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800627a:	486c      	ldr	r0, [pc, #432]	; (800642c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800627c:	f7ff f9e1 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE14(GPIOE,GPIO_Pin::PIN_14);
 8006280:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006284:	492f      	ldr	r1, [pc, #188]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006286:	486a      	ldr	r0, [pc, #424]	; (8006430 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8006288:	f7ff f9db 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE15(GPIOE,GPIO_Pin::PIN_15);
 800628c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006290:	492c      	ldr	r1, [pc, #176]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006292:	4868      	ldr	r0, [pc, #416]	; (8006434 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8006294:	f7ff f9d5 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB10(GPIOB,GPIO_Pin::PIN_10);
 8006298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800629c:	4951      	ldr	r1, [pc, #324]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800629e:	4866      	ldr	r0, [pc, #408]	; (8006438 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 80062a0:	f7ff f9cf 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB11(GPIOB,GPIO_Pin::PIN_11);
 80062a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062a8:	494e      	ldr	r1, [pc, #312]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80062aa:	4864      	ldr	r0, [pc, #400]	; (800643c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 80062ac:	f7ff f9c9 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB12(GPIOB,GPIO_Pin::PIN_12);
 80062b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062b4:	494b      	ldr	r1, [pc, #300]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80062b6:	4862      	ldr	r0, [pc, #392]	; (8006440 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 80062b8:	f7ff f9c3 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB13(GPIOB,GPIO_Pin::PIN_13);
 80062bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062c0:	4948      	ldr	r1, [pc, #288]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80062c2:	4860      	ldr	r0, [pc, #384]	; (8006444 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 80062c4:	f7ff f9bd 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB14(GPIOB,GPIO_Pin::PIN_14);
 80062c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062cc:	4945      	ldr	r1, [pc, #276]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80062ce:	485e      	ldr	r0, [pc, #376]	; (8006448 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 80062d0:	f7ff f9b7 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB15(GPIOB,GPIO_Pin::PIN_15);
 80062d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80062d8:	4942      	ldr	r1, [pc, #264]	; (80063e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80062da:	485c      	ldr	r0, [pc, #368]	; (800644c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 80062dc:	f7ff f9b1 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD8(GPIOD,GPIO_Pin::PIN_8);
 80062e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062e4:	495a      	ldr	r1, [pc, #360]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80062e6:	485b      	ldr	r0, [pc, #364]	; (8006454 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 80062e8:	f7ff f9ab 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD9(GPIOD,GPIO_Pin::PIN_9);
 80062ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f0:	4957      	ldr	r1, [pc, #348]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80062f2:	4859      	ldr	r0, [pc, #356]	; (8006458 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 80062f4:	f7ff f9a5 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD10(GPIOD,GPIO_Pin::PIN_10);
 80062f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062fc:	4954      	ldr	r1, [pc, #336]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80062fe:	4857      	ldr	r0, [pc, #348]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8006300:	f7ff f99f 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD11(GPIOD,GPIO_Pin::PIN_11);
 8006304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006308:	4951      	ldr	r1, [pc, #324]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800630a:	4855      	ldr	r0, [pc, #340]	; (8006460 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 800630c:	f7ff f999 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD12(GPIOD,GPIO_Pin::PIN_12);
 8006310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006314:	494e      	ldr	r1, [pc, #312]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8006316:	4853      	ldr	r0, [pc, #332]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8006318:	f7ff f993 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD13(GPIOD,GPIO_Pin::PIN_13);
 800631c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006320:	494b      	ldr	r1, [pc, #300]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8006322:	4851      	ldr	r0, [pc, #324]	; (8006468 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8006324:	f7ff f98d 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD14(GPIOD,GPIO_Pin::PIN_14);
 8006328:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800632c:	4948      	ldr	r1, [pc, #288]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800632e:	484f      	ldr	r0, [pc, #316]	; (800646c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8006330:	f7ff f987 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD15(GPIOD,GPIO_Pin::PIN_15);
 8006334:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006338:	4945      	ldr	r1, [pc, #276]	; (8006450 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800633a:	484d      	ldr	r0, [pc, #308]	; (8006470 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 800633c:	f7ff f981 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
 8006340:	e098      	b.n	8006474 <_Z41__static_initialization_and_destruction_0ii+0x45c>
 8006342:	bf00      	nop
 8006344:	58021000 	.word	0x58021000
 8006348:	24000528 	.word	0x24000528
 800634c:	24000530 	.word	0x24000530
 8006350:	24000538 	.word	0x24000538
 8006354:	24000540 	.word	0x24000540
 8006358:	24000548 	.word	0x24000548
 800635c:	58020800 	.word	0x58020800
 8006360:	24000550 	.word	0x24000550
 8006364:	24000558 	.word	0x24000558
 8006368:	24000560 	.word	0x24000560
 800636c:	58021400 	.word	0x58021400
 8006370:	24000568 	.word	0x24000568
 8006374:	24000570 	.word	0x24000570
 8006378:	24000578 	.word	0x24000578
 800637c:	24000580 	.word	0x24000580
 8006380:	24000588 	.word	0x24000588
 8006384:	24000590 	.word	0x24000590
 8006388:	24000598 	.word	0x24000598
 800638c:	240005a0 	.word	0x240005a0
 8006390:	240005a8 	.word	0x240005a8
 8006394:	240005b0 	.word	0x240005b0
 8006398:	240005b8 	.word	0x240005b8
 800639c:	58021c00 	.word	0x58021c00
 80063a0:	240005c0 	.word	0x240005c0
 80063a4:	240005c8 	.word	0x240005c8
 80063a8:	240005d0 	.word	0x240005d0
 80063ac:	240005d8 	.word	0x240005d8
 80063b0:	240005e0 	.word	0x240005e0
 80063b4:	240005e8 	.word	0x240005e8
 80063b8:	58020000 	.word	0x58020000
 80063bc:	240005f0 	.word	0x240005f0
 80063c0:	240005f8 	.word	0x240005f8
 80063c4:	24000600 	.word	0x24000600
 80063c8:	24000608 	.word	0x24000608
 80063cc:	24000610 	.word	0x24000610
 80063d0:	24000618 	.word	0x24000618
 80063d4:	24000620 	.word	0x24000620
 80063d8:	24000628 	.word	0x24000628
 80063dc:	24000630 	.word	0x24000630
 80063e0:	24000638 	.word	0x24000638
 80063e4:	58020400 	.word	0x58020400
 80063e8:	24000640 	.word	0x24000640
 80063ec:	24000648 	.word	0x24000648
 80063f0:	24000650 	.word	0x24000650
 80063f4:	24000658 	.word	0x24000658
 80063f8:	24000660 	.word	0x24000660
 80063fc:	24000668 	.word	0x24000668
 8006400:	24000670 	.word	0x24000670
 8006404:	24000678 	.word	0x24000678
 8006408:	58021800 	.word	0x58021800
 800640c:	24000680 	.word	0x24000680
 8006410:	24000688 	.word	0x24000688
 8006414:	24000690 	.word	0x24000690
 8006418:	24000698 	.word	0x24000698
 800641c:	240006a0 	.word	0x240006a0
 8006420:	240006a8 	.word	0x240006a8
 8006424:	240006b0 	.word	0x240006b0
 8006428:	240006b8 	.word	0x240006b8
 800642c:	240006c0 	.word	0x240006c0
 8006430:	240006c8 	.word	0x240006c8
 8006434:	240006d0 	.word	0x240006d0
 8006438:	240006d8 	.word	0x240006d8
 800643c:	240006e0 	.word	0x240006e0
 8006440:	240006e8 	.word	0x240006e8
 8006444:	240006f0 	.word	0x240006f0
 8006448:	240006f8 	.word	0x240006f8
 800644c:	24000700 	.word	0x24000700
 8006450:	58020c00 	.word	0x58020c00
 8006454:	24000708 	.word	0x24000708
 8006458:	24000710 	.word	0x24000710
 800645c:	24000718 	.word	0x24000718
 8006460:	24000720 	.word	0x24000720
 8006464:	24000728 	.word	0x24000728
 8006468:	24000730 	.word	0x24000730
 800646c:	24000738 	.word	0x24000738
 8006470:	24000740 	.word	0x24000740
Pin PG2(GPIOG,GPIO_Pin::PIN_2);
 8006474:	2204      	movs	r2, #4
 8006476:	4995      	ldr	r1, [pc, #596]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8006478:	4895      	ldr	r0, [pc, #596]	; (80066d0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800647a:	f7ff f8e2 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG3(GPIOG,GPIO_Pin::PIN_3);
 800647e:	2208      	movs	r2, #8
 8006480:	4992      	ldr	r1, [pc, #584]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8006482:	4894      	ldr	r0, [pc, #592]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8006484:	f7ff f8dd 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG4(GPIOG,GPIO_Pin::PIN_4);
 8006488:	2210      	movs	r2, #16
 800648a:	4990      	ldr	r1, [pc, #576]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800648c:	4892      	ldr	r0, [pc, #584]	; (80066d8 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800648e:	f7ff f8d8 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG5(GPIOG,GPIO_Pin::PIN_5);
 8006492:	2220      	movs	r2, #32
 8006494:	498d      	ldr	r1, [pc, #564]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8006496:	4891      	ldr	r0, [pc, #580]	; (80066dc <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8006498:	f7ff f8d3 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG6(GPIOG,GPIO_Pin::PIN_6);
 800649c:	2240      	movs	r2, #64	; 0x40
 800649e:	498b      	ldr	r1, [pc, #556]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80064a0:	488f      	ldr	r0, [pc, #572]	; (80066e0 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80064a2:	f7ff f8ce 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG7(GPIOG,GPIO_Pin::PIN_7);
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	4988      	ldr	r1, [pc, #544]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80064aa:	488e      	ldr	r0, [pc, #568]	; (80066e4 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80064ac:	f7ff f8c9 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG8(GPIOG,GPIO_Pin::PIN_8);
 80064b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064b4:	4985      	ldr	r1, [pc, #532]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80064b6:	488c      	ldr	r0, [pc, #560]	; (80066e8 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80064b8:	f7ff f8c3 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC6(GPIOC,GPIO_Pin::PIN_6);
 80064bc:	2240      	movs	r2, #64	; 0x40
 80064be:	498b      	ldr	r1, [pc, #556]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80064c0:	488b      	ldr	r0, [pc, #556]	; (80066f0 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 80064c2:	f7ff f8be 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC7(GPIOC,GPIO_Pin::PIN_7);
 80064c6:	2280      	movs	r2, #128	; 0x80
 80064c8:	4988      	ldr	r1, [pc, #544]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80064ca:	488a      	ldr	r0, [pc, #552]	; (80066f4 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 80064cc:	f7ff f8b9 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC8(GPIOC,GPIO_Pin::PIN_8);
 80064d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064d4:	4985      	ldr	r1, [pc, #532]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80064d6:	4888      	ldr	r0, [pc, #544]	; (80066f8 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 80064d8:	f7ff f8b3 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC9(GPIOC,GPIO_Pin::PIN_9);
 80064dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e0:	4982      	ldr	r1, [pc, #520]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80064e2:	4886      	ldr	r0, [pc, #536]	; (80066fc <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 80064e4:	f7ff f8ad 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA8(GPIOA,GPIO_Pin::PIN_8);
 80064e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ec:	4984      	ldr	r1, [pc, #528]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80064ee:	4885      	ldr	r0, [pc, #532]	; (8006704 <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 80064f0:	f7ff f8a7 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA9(GPIOA,GPIO_Pin::PIN_9);
 80064f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f8:	4981      	ldr	r1, [pc, #516]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80064fa:	4883      	ldr	r0, [pc, #524]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 80064fc:	f7ff f8a1 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA10(GPIOA,GPIO_Pin::PIN_10);
 8006500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006504:	497e      	ldr	r1, [pc, #504]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 8006506:	4881      	ldr	r0, [pc, #516]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 8006508:	f7ff f89b 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA11(GPIOA,GPIO_Pin::PIN_11);
 800650c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006510:	497b      	ldr	r1, [pc, #492]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 8006512:	487f      	ldr	r0, [pc, #508]	; (8006710 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 8006514:	f7ff f895 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA12(GPIOA,GPIO_Pin::PIN_12);
 8006518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800651c:	4978      	ldr	r1, [pc, #480]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800651e:	487d      	ldr	r0, [pc, #500]	; (8006714 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8006520:	f7ff f88f 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC10(GPIOC,GPIO_Pin::PIN_10);
 8006524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006528:	4970      	ldr	r1, [pc, #448]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800652a:	487b      	ldr	r0, [pc, #492]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 800652c:	f7ff f889 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC11(GPIOC,GPIO_Pin::PIN_11);
 8006530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006534:	496d      	ldr	r1, [pc, #436]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8006536:	4879      	ldr	r0, [pc, #484]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x704>)
 8006538:	f7ff f883 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC12(GPIOC,GPIO_Pin::PIN_12);
 800653c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006540:	496a      	ldr	r1, [pc, #424]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8006542:	4877      	ldr	r0, [pc, #476]	; (8006720 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 8006544:	f7ff f87d 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD0(GPIOD,GPIO_Pin::PIN_0);
 8006548:	2201      	movs	r2, #1
 800654a:	4976      	ldr	r1, [pc, #472]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800654c:	4876      	ldr	r0, [pc, #472]	; (8006728 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 800654e:	f7ff f878 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD1(GPIOD,GPIO_Pin::PIN_1);
 8006552:	2202      	movs	r2, #2
 8006554:	4973      	ldr	r1, [pc, #460]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8006556:	4875      	ldr	r0, [pc, #468]	; (800672c <_Z41__static_initialization_and_destruction_0ii+0x714>)
 8006558:	f7ff f873 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD2(GPIOD,GPIO_Pin::PIN_2);
 800655c:	2204      	movs	r2, #4
 800655e:	4971      	ldr	r1, [pc, #452]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8006560:	4873      	ldr	r0, [pc, #460]	; (8006730 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 8006562:	f7ff f86e 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD3(GPIOD,GPIO_Pin::PIN_3);
 8006566:	2208      	movs	r2, #8
 8006568:	496e      	ldr	r1, [pc, #440]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800656a:	4872      	ldr	r0, [pc, #456]	; (8006734 <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 800656c:	f7ff f869 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD4(GPIOD,GPIO_Pin::PIN_4);
 8006570:	2210      	movs	r2, #16
 8006572:	496c      	ldr	r1, [pc, #432]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8006574:	4870      	ldr	r0, [pc, #448]	; (8006738 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 8006576:	f7ff f864 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD5(GPIOD,GPIO_Pin::PIN_5);
 800657a:	2220      	movs	r2, #32
 800657c:	4969      	ldr	r1, [pc, #420]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800657e:	486f      	ldr	r0, [pc, #444]	; (800673c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8006580:	f7ff f85f 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD6(GPIOD,GPIO_Pin::PIN_6);
 8006584:	2240      	movs	r2, #64	; 0x40
 8006586:	4967      	ldr	r1, [pc, #412]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8006588:	486d      	ldr	r0, [pc, #436]	; (8006740 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 800658a:	f7ff f85a 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD7(GPIOD,GPIO_Pin::PIN_7);
 800658e:	2280      	movs	r2, #128	; 0x80
 8006590:	4964      	ldr	r1, [pc, #400]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8006592:	486c      	ldr	r0, [pc, #432]	; (8006744 <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 8006594:	f7ff f855 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG9(GPIOG,GPIO_Pin::PIN_9);
 8006598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659c:	494b      	ldr	r1, [pc, #300]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800659e:	486a      	ldr	r0, [pc, #424]	; (8006748 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 80065a0:	f7ff f84f 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG10(GPIOG,GPIO_Pin::PIN_10);
 80065a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a8:	4948      	ldr	r1, [pc, #288]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80065aa:	4868      	ldr	r0, [pc, #416]	; (800674c <_Z41__static_initialization_and_destruction_0ii+0x734>)
 80065ac:	f7ff f849 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG11(GPIOG,GPIO_Pin::PIN_11);
 80065b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b4:	4945      	ldr	r1, [pc, #276]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80065b6:	4866      	ldr	r0, [pc, #408]	; (8006750 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 80065b8:	f7ff f843 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG12(GPIOG,GPIO_Pin::PIN_12);
 80065bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065c0:	4942      	ldr	r1, [pc, #264]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80065c2:	4864      	ldr	r0, [pc, #400]	; (8006754 <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 80065c4:	f7ff f83d 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG13(GPIOG,GPIO_Pin::PIN_13);
 80065c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065cc:	493f      	ldr	r1, [pc, #252]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80065ce:	4862      	ldr	r0, [pc, #392]	; (8006758 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 80065d0:	f7ff f837 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG14(GPIOG,GPIO_Pin::PIN_14);
 80065d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065d8:	493c      	ldr	r1, [pc, #240]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80065da:	4860      	ldr	r0, [pc, #384]	; (800675c <_Z41__static_initialization_and_destruction_0ii+0x744>)
 80065dc:	f7ff f831 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG15(GPIOG,GPIO_Pin::PIN_15);
 80065e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065e4:	4939      	ldr	r1, [pc, #228]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80065e6:	485e      	ldr	r0, [pc, #376]	; (8006760 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 80065e8:	f7ff f82b 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB4(GPIOB,GPIO_Pin::PIN_4);
 80065ec:	2210      	movs	r2, #16
 80065ee:	495d      	ldr	r1, [pc, #372]	; (8006764 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 80065f0:	485d      	ldr	r0, [pc, #372]	; (8006768 <_Z41__static_initialization_and_destruction_0ii+0x750>)
 80065f2:	f7ff f826 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB5(GPIOB,GPIO_Pin::PIN_5);
 80065f6:	2220      	movs	r2, #32
 80065f8:	495a      	ldr	r1, [pc, #360]	; (8006764 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 80065fa:	485c      	ldr	r0, [pc, #368]	; (800676c <_Z41__static_initialization_and_destruction_0ii+0x754>)
 80065fc:	f7ff f821 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB6(GPIOB,GPIO_Pin::PIN_6);
 8006600:	2240      	movs	r2, #64	; 0x40
 8006602:	4958      	ldr	r1, [pc, #352]	; (8006764 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 8006604:	485a      	ldr	r0, [pc, #360]	; (8006770 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 8006606:	f7ff f81c 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB7(GPIOB,GPIO_Pin::PIN_7);
 800660a:	2280      	movs	r2, #128	; 0x80
 800660c:	4955      	ldr	r1, [pc, #340]	; (8006764 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800660e:	4859      	ldr	r0, [pc, #356]	; (8006774 <_Z41__static_initialization_and_destruction_0ii+0x75c>)
 8006610:	f7ff f817 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB8(GPIOB,GPIO_Pin::PIN_8);
 8006614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006618:	4952      	ldr	r1, [pc, #328]	; (8006764 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800661a:	4857      	ldr	r0, [pc, #348]	; (8006778 <_Z41__static_initialization_and_destruction_0ii+0x760>)
 800661c:	f7ff f811 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB9(GPIOB,GPIO_Pin::PIN_9);
 8006620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006624:	494f      	ldr	r1, [pc, #316]	; (8006764 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 8006626:	4855      	ldr	r0, [pc, #340]	; (800677c <_Z41__static_initialization_and_destruction_0ii+0x764>)
 8006628:	f7ff f80b 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE0(GPIOE,GPIO_Pin::PIN_0);
 800662c:	2201      	movs	r2, #1
 800662e:	4954      	ldr	r1, [pc, #336]	; (8006780 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 8006630:	4854      	ldr	r0, [pc, #336]	; (8006784 <_Z41__static_initialization_and_destruction_0ii+0x76c>)
 8006632:	f7ff f806 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE1(GPIOE,GPIO_Pin::PIN_1);
 8006636:	2202      	movs	r2, #2
 8006638:	4951      	ldr	r1, [pc, #324]	; (8006780 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 800663a:	4853      	ldr	r0, [pc, #332]	; (8006788 <_Z41__static_initialization_and_destruction_0ii+0x770>)
 800663c:	f7ff f801 	bl	8005642 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
vector<reference_wrapper<Pin>> Pin::pinVector = {PA0,PA1,PA10,PA11,PA12,
 8006640:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8006644:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006648:	4a50      	ldr	r2, [pc, #320]	; (800678c <_Z41__static_initialization_and_destruction_0ii+0x774>)
 800664a:	4618      	mov	r0, r3
 800664c:	4611      	mov	r1, r2
 800664e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8006652:	461a      	mov	r2, r3
 8006654:	f00c fee2 	bl	801341c <memcpy>
 8006658:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800665c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006660:	f107 0214 	add.w	r2, r7, #20
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800666a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800666e:	226e      	movs	r2, #110	; 0x6e
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff f96a 	bl	8005950 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>
 800667c:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006680:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8006684:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8006688:	ca06      	ldmia	r2, {r1, r2}
 800668a:	4841      	ldr	r0, [pc, #260]	; (8006790 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 800668c:	f7ff f977 	bl	800597e <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>
 8006690:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff f967 	bl	8005968 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800669a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800669e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10b      	bne.n	80066c0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 80066a8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80066ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d102      	bne.n	80066c0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 80066ba:	4835      	ldr	r0, [pc, #212]	; (8006790 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 80066bc:	f7ff f980 	bl	80059c0 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>
}
 80066c0:	bf00      	nop
 80066c2:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	58021800 	.word	0x58021800
 80066d0:	24000748 	.word	0x24000748
 80066d4:	24000750 	.word	0x24000750
 80066d8:	24000758 	.word	0x24000758
 80066dc:	24000760 	.word	0x24000760
 80066e0:	24000768 	.word	0x24000768
 80066e4:	24000770 	.word	0x24000770
 80066e8:	24000778 	.word	0x24000778
 80066ec:	58020800 	.word	0x58020800
 80066f0:	24000780 	.word	0x24000780
 80066f4:	24000788 	.word	0x24000788
 80066f8:	24000790 	.word	0x24000790
 80066fc:	24000798 	.word	0x24000798
 8006700:	58020000 	.word	0x58020000
 8006704:	240007a0 	.word	0x240007a0
 8006708:	240007a8 	.word	0x240007a8
 800670c:	240007b0 	.word	0x240007b0
 8006710:	240007b8 	.word	0x240007b8
 8006714:	240007c0 	.word	0x240007c0
 8006718:	240007c8 	.word	0x240007c8
 800671c:	240007d0 	.word	0x240007d0
 8006720:	240007d8 	.word	0x240007d8
 8006724:	58020c00 	.word	0x58020c00
 8006728:	240007e0 	.word	0x240007e0
 800672c:	240007e8 	.word	0x240007e8
 8006730:	240007f0 	.word	0x240007f0
 8006734:	240007f8 	.word	0x240007f8
 8006738:	24000800 	.word	0x24000800
 800673c:	24000808 	.word	0x24000808
 8006740:	24000810 	.word	0x24000810
 8006744:	24000818 	.word	0x24000818
 8006748:	24000820 	.word	0x24000820
 800674c:	24000828 	.word	0x24000828
 8006750:	24000830 	.word	0x24000830
 8006754:	24000838 	.word	0x24000838
 8006758:	24000840 	.word	0x24000840
 800675c:	24000848 	.word	0x24000848
 8006760:	24000850 	.word	0x24000850
 8006764:	58020400 	.word	0x58020400
 8006768:	24000858 	.word	0x24000858
 800676c:	24000860 	.word	0x24000860
 8006770:	24000868 	.word	0x24000868
 8006774:	24000870 	.word	0x24000870
 8006778:	24000878 	.word	0x24000878
 800677c:	24000880 	.word	0x24000880
 8006780:	58021000 	.word	0x58021000
 8006784:	24000888 	.word	0x24000888
 8006788:	24000890 	.word	0x24000890
 800678c:	0801374c 	.word	0x0801374c
 8006790:	24000898 	.word	0x24000898

08006794 <_GLOBAL__sub_I__ZN3PinC2Ev>:
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
 8006798:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800679c:	2001      	movs	r0, #1
 800679e:	f7ff fc3b 	bl	8006018 <_Z41__static_initialization_and_destruction_0ii>
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <_GLOBAL__sub_D__ZN3PinC2Ev>:
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067ac:	2000      	movs	r0, #0
 80067ae:	f7ff fc33 	bl	8006018 <_Z41__static_initialization_and_destruction_0ii>
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>:
    constexpr operator partial_ordering() const noexcept
    { return partial_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    friend constexpr bool
    operator==(weak_ordering __v, __cmp_cat::__unspec) noexcept
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	7138      	strb	r0, [r7, #4]
 80067d4:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 0; }
 80067d6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	bf0c      	ite	eq
 80067de:	2301      	moveq	r3, #1
 80067e0:	2300      	movne	r3, #0
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(weak_ordering, weak_ordering) noexcept = default;

    friend constexpr bool
    operator< (weak_ordering __v, __cmp_cat::__unspec) noexcept
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	7138      	strb	r0, [r7, #4]
 80067f8:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80067fa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	09db      	lsrs	r3, r3, #7
 8006802:	b2db      	uxtb	r3, r3
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f805 	bl	800682e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	611a      	str	r2, [r3, #16]
    }
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fbdc 	bl	8007020 <_ZNSaImED1Ev>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <_ZNK3PinltERKS_>:

	bool operator== (const Pin &other) const {
		return (gpio_pin == other.gpio_pin && port == other.port);
	}

	bool operator< (const Pin &other) const {
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
		if (port == other.port)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d109      	bne.n	800689c <_ZNK3PinltERKS_+0x2a>
			return gpio_pin < other.gpio_pin;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	889a      	ldrh	r2, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	889b      	ldrh	r3, [r3, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	bf34      	ite	cc
 8006894:	2301      	movcc	r3, #1
 8006896:	2300      	movcs	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e008      	b.n	80068ae <_ZNK3PinltERKS_+0x3c>
		return port < other.port;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	bf34      	ite	cc
 80068a8:	2301      	movcc	r3, #1
 80068aa:	2300      	movcs	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
	}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fc62 	bl	800718c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEED1Ev>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fc40 	bl	8007162 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff ffeb 	bl	80068d2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fc46 	bl	80071a2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <_ZN10PWMservice13TimerInitDataC1EP11TIM_TypeDefmmm>:


forward_list<uint8_t> PWMservice::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, PWMservice::Instance> PWMservice::active_instances = {};

PWMservice::TimerInitData::TimerInitData(TIM_TypeDef* timer, uint32_t prescaler, uint32_t period, uint32_t deadtime) :
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b089      	sub	sp, #36	; 0x24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
		timer(timer), prescaler(prescaler), period(period), deadtime(deadtime), channels({}) {}
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006944:	60da      	str	r2, [r3, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f103 0410 	add.w	r4, r3, #16
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	2300      	movs	r3, #0
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	f107 031c 	add.w	r3, r7, #28
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fc37 	bl	80071cc <_ZNSaImEC1Ev>
 800695e:	f107 031c 	add.w	r3, r7, #28
 8006962:	f107 0214 	add.w	r2, r7, #20
 8006966:	ca06      	ldmia	r2, {r1, r2}
 8006968:	4620      	mov	r0, r4
 800696a:	f000 fc3b 	bl	80071e4 <_ZNSt6vectorImSaImEEC1ESt16initializer_listImERKS0_>
 800696e:	f107 031c 	add.w	r3, r7, #28
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fb54 	bl	8007020 <_ZNSaImED1Ev>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4618      	mov	r0, r3
 800697c:	3724      	adds	r7, #36	; 0x24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd90      	pop	{r4, r7, pc}

08006982 <_ZN10PWMservice13TimerInitDataC1ERKS0_>:
	enum Mode {
		NORMAL = 0,
		NEGATED = 1,
		DUAL = 2
	};
	struct TimerInitData {
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	609a      	str	r2, [r3, #8]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f103 0210 	add.w	r2, r3, #16
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3310      	adds	r3, #16
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f000 fc34 	bl	8007226 <_ZNSt6vectorImSaImEEC1ERKS1_>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_ZN10PWMservice13TimerInitDataD1Ev>:
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3310      	adds	r3, #16
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fb47 	bl	8007068 <_ZNSt6vectorImSaImEED1Ev>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <_ZN10PWMservice15TimerPeripheralC1EP17TIM_HandleTypeDefNS_13TimerInitDataE>:

PWMservice::TimerPeripheral::TimerPeripheral(TIM_HandleTypeDef* handle, TimerInitData init_data) :
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
		handle(handle), init_data(init_data) {}
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3304      	adds	r3, #4
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff ffc0 	bl	8006982 <_ZN10PWMservice13TimerInitDataC1ERKS0_>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <_ZN10PWMservice15TimerPeripheral13is_registeredEv>:
bool PWMservice::TimerPeripheral::is_registered() {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	return init_data.channels.size();
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3314      	adds	r3, #20
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fb40 	bl	800709e <_ZNKSt6vectorImSaImEE4sizeEv>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <_ZN10PWMservice8InstanceC1EPNS_15TimerPeripheralEmNS_4ModeE>:

PWMservice::Instance::Instance(TimerPeripheral* peripheral, uint32_t channel, PWMservice::Mode mode) :
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	70fb      	strb	r3, [r7, #3]
		peripheral(peripheral), channel(channel), mode(mode) {}
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	721a      	strb	r2, [r3, #8]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <_ZN10PWMservice13inscribe_dualER3PinS1_>:
	TimerInitData& init_data = active_instances[id].peripheral->init_data;
	init_data.channels.push_back(active_instances[id].channel);
 	return id;
}

optional<uint8_t> PWMservice::inscribe_dual(Pin& pin, Pin& pin_negated){
 8006a60:	b590      	push	{r4, r7, lr}
 8006a62:	b091      	sub	sp, #68	; 0x44
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	if (not available_instances_dual.contains({pin, pin_negated})) {
 8006a6a:	f107 0310 	add.w	r3, r7, #16
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fd09 	bl	800748a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
 8006a78:	f107 0310 	add.w	r3, r7, #16
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4837      	ldr	r0, [pc, #220]	; (8006b5c <_ZN10PWMservice13inscribe_dualER3PinS1_+0xfc>)
 8006a80:	f000 fd21 	bl	80074c6 <_ZNKSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE8containsERS7_>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f083 0301 	eor.w	r3, r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <_ZN10PWMservice13inscribe_dualER3PinS1_+0x42>
		return nullopt; //TODO: error handlerr
 8006a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a94:	4621      	mov	r1, r4
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fc37 	bl	800730a <_ZNSt8optionalIhEC1ESt9nullopt_t>
 8006a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a9e:	843b      	strh	r3, [r7, #32]
 8006aa0:	e04f      	b.n	8006b42 <_ZN10PWMservice13inscribe_dualER3PinS1_+0xe2>
	} 	
	Pin::inscribe(pin, PWM_MODE);
 8006aa2:	2105      	movs	r1, #5
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fe fde3 	bl	8005670 <_ZN3Pin8inscribeERS_14Operation_Mode>
	Pin::inscribe(pin_negated, PWM_MODE);
 8006aaa:	2105      	movs	r1, #5
 8006aac:	6838      	ldr	r0, [r7, #0]
 8006aae:	f7fe fddf 	bl	8005670 <_ZN3Pin8inscribeERS_14Operation_Mode>
	uint8_t id = PWMservice::id_manager.front();
 8006ab2:	482b      	ldr	r0, [pc, #172]	; (8006b60 <_ZN10PWMservice13inscribe_dualER3PinS1_+0x100>)
 8006ab4:	f000 fc37 	bl	8007326 <_ZNSt12forward_listIhSaIhEE5frontEv>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	73fb      	strb	r3, [r7, #15]
	active_instances[id] = available_instances_dual[{pin, pin_negated}];
 8006abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fcdf 	bl	800748a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
 8006acc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4822      	ldr	r0, [pc, #136]	; (8006b5c <_ZN10PWMservice13inscribe_dualER3PinS1_+0xfc>)
 8006ad4:	f000 fd1a 	bl	800750c <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEixEOS2_>
 8006ad8:	4604      	mov	r4, r0
 8006ada:	f107 030f 	add.w	r3, r7, #15
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4820      	ldr	r0, [pc, #128]	; (8006b64 <_ZN10PWMservice13inscribe_dualER3PinS1_+0x104>)
 8006ae2:	f000 fc2f 	bl	8007344 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4622      	mov	r2, r4
 8006aea:	6810      	ldr	r0, [r2, #0]
 8006aec:	6851      	ldr	r1, [r2, #4]
 8006aee:	6018      	str	r0, [r3, #0]
 8006af0:	6059      	str	r1, [r3, #4]
 8006af2:	7a12      	ldrb	r2, [r2, #8]
 8006af4:	721a      	strb	r2, [r3, #8]
	id_manager.pop_front();
 8006af6:	481a      	ldr	r0, [pc, #104]	; (8006b60 <_ZN10PWMservice13inscribe_dualER3PinS1_+0x100>)
 8006af8:	f000 fc80 	bl	80073fc <_ZNSt12forward_listIhSaIhEE9pop_frontEv>

	TimerInitData& init_data = active_instances[id].peripheral->init_data;
 8006afc:	f107 030f 	add.w	r3, r7, #15
 8006b00:	4619      	mov	r1, r3
 8006b02:	4818      	ldr	r0, [pc, #96]	; (8006b64 <_ZN10PWMservice13inscribe_dualER3PinS1_+0x104>)
 8006b04:	f000 fc1e 	bl	8007344 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	init_data.channels.push_back(active_instances[id].channel);
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	f103 0410 	add.w	r4, r3, #16
 8006b16:	f107 030f 	add.w	r3, r7, #15
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4811      	ldr	r0, [pc, #68]	; (8006b64 <_ZN10PWMservice13inscribe_dualER3PinS1_+0x104>)
 8006b1e:	f000 fc11 	bl	8007344 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8006b22:	4603      	mov	r3, r0
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fc75 	bl	8007418 <_ZNSt6vectorImSaImEE9push_backERKm>
	return id;
 8006b2e:	f107 020f 	add.w	r2, r7, #15
 8006b32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fc92 	bl	8007462 <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 8006b3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b40:	843b      	strh	r3, [r7, #32]
}
 8006b42:	2300      	movs	r3, #0
 8006b44:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006b48:	f362 0307 	bfi	r3, r2, #0, #8
 8006b4c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006b50:	f362 230f 	bfi	r3, r2, #8, #8
 8006b54:	4618      	mov	r0, r3
 8006b56:	3744      	adds	r7, #68	; 0x44
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd90      	pop	{r4, r7, pc}
 8006b5c:	24000c40 	.word	0x24000c40
 8006b60:	240008a4 	.word	0x240008a4
 8006b64:	240008a8 	.word	0x240008a8

08006b68 <_ZN10PWMservice15TimerPeripheralC1ERKS0_>:
		vector<uint32_t> channels;
		TimerInitData() = default;
		TimerInitData(TIM_TypeDef* timer, uint32_t prescaler = 275, uint32_t period = 1000, uint32_t deadtime = 0);
	};

	class TimerPeripheral {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7ff fefc 	bl	8006982 <_ZN10PWMservice13TimerInitDataC1ERKS0_>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZN10PWMservice15TimerPeripheralD1Ev>:
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff ff11 	bl	80069c8 <_ZN10PWMservice13TimerInitDataD1Ev>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <_ZN10PWMservice5startEv>:

void PWMservice::start() {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08c      	sub	sp, #48	; 0x30
 8006bb4:	af00      	add	r7, sp, #0
	for(TimerPeripheral peripheral : timer_peripherals) {
 8006bb6:	4b13      	ldr	r3, [pc, #76]	; (8006c04 <_ZN10PWMservice5startEv+0x54>)
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <_ZN10PWMservice5startEv+0x54>)
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bbe:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <_ZN10PWMservice5startEv+0x58>)
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d017      	beq.n	8006bfa <_ZN10PWMservice5startEv+0x4a>
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff ffca 	bl	8006b68 <_ZN10PWMservice15TimerPeripheralC1ERKS0_>
		if (peripheral.is_registered()) {
 8006bd4:	1d3b      	adds	r3, r7, #4
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff ff18 	bl	8006a0c <_ZN10PWMservice15TimerPeripheral13is_registeredEv>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <_ZN10PWMservice5startEv+0x3a>
			PWMservice::init(peripheral);
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f912 	bl	8006e0e <_ZN10PWMservice4initERNS_15TimerPeripheralE>
	for(TimerPeripheral peripheral : timer_peripherals) {
 8006bea:	1d3b      	adds	r3, r7, #4
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff ffd1 	bl	8006b94 <_ZN10PWMservice15TimerPeripheralD1Ev>
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	3320      	adds	r3, #32
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf8:	e7e3      	b.n	8006bc2 <_ZN10PWMservice5startEv+0x12>
		}
	}
}
 8006bfa:	bf00      	nop
 8006bfc:	3730      	adds	r7, #48	; 0x30
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	24000910 	.word	0x24000910
 8006c08:	24000c10 	.word	0x24000c10

08006c0c <_ZN10PWMservice7turn_onEh>:
void PWMservice::turn_on(uint8_t id) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	71fb      	strb	r3, [r7, #7]
	if (not instance_exists(id)) {
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 f9c5 	bl	8006fa8 <_ZN10PWMservice15instance_existsEh>
		//TODO: error handlerr
	}

	Instance& instance = get_instance(id);
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 f9d7 	bl	8006fd4 <_ZN10PWMservice12get_instanceEh>
 8006c26:	60f8      	str	r0, [r7, #12]

	if (instance.mode == NORMAL) {
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	7a1b      	ldrb	r3, [r3, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <_ZN10PWMservice7turn_onEh+0x38>
		HAL_TIM_PWM_Start(instance.peripheral->handle, instance.channel);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	f7fd fcc7 	bl	80045d0 <HAL_TIM_PWM_Start>
	}

	else if(instance.mode == DUAL) {
		HAL_TIMEx_PWMN_Start(instance.peripheral->handle, instance.channel);
	}
}
 8006c42:	e01a      	b.n	8006c7a <_ZN10PWMservice7turn_onEh+0x6e>
	else if (instance.mode == NEGATED) {
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	7a1b      	ldrb	r3, [r3, #8]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d109      	bne.n	8006c60 <_ZN10PWMservice7turn_onEh+0x54>
		HAL_TIMEx_PWMN_Start(instance.peripheral->handle, instance.channel);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fe fa8b 	bl	8005174 <HAL_TIMEx_PWMN_Start>
}
 8006c5e:	e00c      	b.n	8006c7a <_ZN10PWMservice7turn_onEh+0x6e>
	else if(instance.mode == DUAL) {
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	7a1b      	ldrb	r3, [r3, #8]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d108      	bne.n	8006c7a <_ZN10PWMservice7turn_onEh+0x6e>
		HAL_TIMEx_PWMN_Start(instance.peripheral->handle, instance.channel);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fe fa7d 	bl	8005174 <HAL_TIMEx_PWMN_Start>
}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	0000      	movs	r0, r0
 8006c84:	0000      	movs	r0, r0
	...

08006c88 <_ZN10PWMservice14set_duty_cycleEhh>:
	else {
		//TODO: Error handler
	}
}

void PWMservice::set_duty_cycle(uint8_t id, uint8_t duty_cycle) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	460a      	mov	r2, r1
 8006c92:	71fb      	strb	r3, [r7, #7]
 8006c94:	4613      	mov	r3, r2
 8006c96:	71bb      	strb	r3, [r7, #6]
	if (not (duty_cycle >= 0 && duty_cycle <= 100)) {
 8006c98:	79bb      	ldrb	r3, [r7, #6]
 8006c9a:	2b64      	cmp	r3, #100	; 0x64
 8006c9c:	d86b      	bhi.n	8006d76 <_ZN10PWMservice14set_duty_cycleEhh+0xee>
		//TODO: error handlerr
		return;
	}
	if (not instance_exists(id)) {
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 f981 	bl	8006fa8 <_ZN10PWMservice15instance_existsEh>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f083 0301 	eor.w	r3, r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d163      	bne.n	8006d7a <_ZN10PWMservice14set_duty_cycleEhh+0xf2>
		//TODO: error handlerr
		return;
	}

	Instance& instance = get_instance(id);
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 f98d 	bl	8006fd4 <_ZN10PWMservice12get_instanceEh>
 8006cba:	60f8      	str	r0, [r7, #12]
	uint16_t raw_duty = round(__HAL_TIM_GET_AUTORELOAD(instance.peripheral->handle) / 100.0 * duty_cycle);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006cce:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8006d88 <_ZN10PWMservice14set_duty_cycleEhh+0x100>
 8006cd2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006cd6:	79bb      	ldrb	r3, [r7, #6]
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ce0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006ce4:	eeb0 0b47 	vmov.f64	d0, d7
 8006ce8:	f00c fb10 	bl	801330c <round>
 8006cec:	eeb0 7b40 	vmov.f64	d7, d0
 8006cf0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006cf4:	ee17 3a90 	vmov	r3, s15
 8006cf8:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_COMPARE(instance.peripheral->handle, instance.channel, raw_duty);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <_ZN10PWMservice14set_duty_cycleEhh+0x88>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	897a      	ldrh	r2, [r7, #10]
 8006d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8006d0e:	e035      	b.n	8006d7c <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d106      	bne.n	8006d26 <_ZN10PWMservice14set_duty_cycleEhh+0x9e>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	897a      	ldrh	r2, [r7, #10]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
 8006d24:	e02a      	b.n	8006d7c <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d106      	bne.n	8006d3c <_ZN10PWMservice14set_duty_cycleEhh+0xb4>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	897a      	ldrh	r2, [r7, #10]
 8006d38:	63da      	str	r2, [r3, #60]	; 0x3c
 8006d3a:	e01f      	b.n	8006d7c <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	d106      	bne.n	8006d52 <_ZN10PWMservice14set_duty_cycleEhh+0xca>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	897a      	ldrh	r2, [r7, #10]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8006d50:	e014      	b.n	8006d7c <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b10      	cmp	r3, #16
 8006d58:	d106      	bne.n	8006d68 <_ZN10PWMservice14set_duty_cycleEhh+0xe0>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	897a      	ldrh	r2, [r7, #10]
 8006d64:	659a      	str	r2, [r3, #88]	; 0x58
 8006d66:	e009      	b.n	8006d7c <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	897a      	ldrh	r2, [r7, #10]
 8006d72:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d74:	e002      	b.n	8006d7c <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
		return;
 8006d76:	bf00      	nop
 8006d78:	e000      	b.n	8006d7c <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
		return;
 8006d7a:	bf00      	nop
}
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	f3af 8000 	nop.w
 8006d88:	00000000 	.word	0x00000000
 8006d8c:	40590000 	.word	0x40590000

08006d90 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8006da6:	b590      	push	{r4, r7, lr}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff ffed 	bl	8006d90 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006db6:	4603      	mov	r3, r0
 8006db8:	681c      	ldr	r4, [r3, #0]
 8006dba:	6838      	ldr	r0, [r7, #0]
 8006dbc:	f7ff ffe8 	bl	8006d90 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	bf0c      	ite	eq
 8006dc8:	2301      	moveq	r3, #1
 8006dca:	2300      	movne	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd90      	pop	{r4, r7, pc}

08006dd6 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	1d1a      	adds	r2, r3, #4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	601a      	str	r2, [r3, #0]
	return *this;
 8006de8:	687b      	ldr	r3, [r7, #4]
      }
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <_ZN10PWMservice4initERNS_15TimerPeripheralE>:

void PWMservice::init(TimerPeripheral& peripheral) {
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b0a6      	sub	sp, #152	; 0x98
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	605a      	str	r2, [r3, #4]
 8006e20:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006e22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
 8006e2c:	609a      	str	r2, [r3, #8]
 8006e2e:	60da      	str	r2, [r3, #12]
 8006e30:	611a      	str	r2, [r3, #16]
 8006e32:	615a      	str	r2, [r3, #20]
 8006e34:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e3a:	2234      	movs	r2, #52	; 0x34
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f00c fb14 	bl	801346c <memset>

	TIM_HandleTypeDef& tim_handle = *peripheral.handle;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	TimerInitData init_data = peripheral.init_data;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	f107 0314 	add.w	r3, r7, #20
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff fd93 	bl	8006982 <_ZN10PWMservice13TimerInitDataC1ERKS0_>


	tim_handle.Instance = init_data.timer;
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e62:	601a      	str	r2, [r3, #0]
	tim_handle.Init.Prescaler = init_data.prescaler;
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e6a:	605a      	str	r2, [r3, #4]
	tim_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e70:	2200      	movs	r2, #0
 8006e72:	609a      	str	r2, [r3, #8]
	tim_handle.Init.Period = init_data.period;
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e7a:	60da      	str	r2, [r3, #12]
	tim_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e80:	2200      	movs	r2, #0
 8006e82:	611a      	str	r2, [r3, #16]
	tim_handle.Init.RepetitionCounter = 0;
 8006e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e88:	2200      	movs	r2, #0
 8006e8a:	615a      	str	r2, [r3, #20]
	tim_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e90:	2200      	movs	r2, #0
 8006e92:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&tim_handle) != HAL_OK) {
 8006e94:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006e98:	f7fd fb42 	bl	8004520 <HAL_TIM_PWM_Init>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
		//TODO: error handler
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006eac:	2300      	movs	r3, #0
 8006eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_TIMEx_MasterConfigSynchronization(&tim_handle, &sMasterConfig) != HAL_OK) {
 8006eb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006ebc:	f7fe fa2a 	bl	8005314 <HAL_TIMEx_MasterConfigSynchronization>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
		//TODO: error handler
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ec4:	2360      	movs	r3, #96	; 0x60
 8006ec6:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	673b      	str	r3, [r7, #112]	; 0x70
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006edc:	2300      	movs	r3, #0
 8006ede:	67fb      	str	r3, [r7, #124]	; 0x7c

	for (uint32_t channel : init_data.channels) {
 8006ee0:	f107 0314 	add.w	r3, r7, #20
 8006ee4:	3310      	adds	r3, #16
 8006ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eea:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006eee:	f000 fb6d 	bl	80075cc <_ZNSt6vectorImSaImEE5beginEv>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006efa:	f000 fb77 	bl	80075ec <_ZNSt6vectorImSaImEE3endEv>
 8006efe:	4603      	mov	r3, r0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	f107 020c 	add.w	r2, r7, #12
 8006f06:	f107 0310 	add.w	r3, r7, #16
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff ff4a 	bl	8006da6 <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f083 0301 	eor.w	r3, r3, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d019      	beq.n	8006f52 <_ZN10PWMservice4initERNS_15TimerPeripheralE+0x144>
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ff67 	bl	8006df6 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if (HAL_TIM_PWM_ConfigChannel(&tim_handle, &sConfigOC, channel) != HAL_OK) {
 8006f30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006f34:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006f3e:	f7fd fc63 	bl	8004808 <HAL_TIM_PWM_ConfigChannel>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
	for (uint32_t channel : init_data.channels) {
 8006f46:	f107 0310 	add.w	r3, r7, #16
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff ff43 	bl	8006dd6 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>
 8006f50:	e7d7      	b.n	8006f02 <_ZN10PWMservice4initERNS_15TimerPeripheralE+0xf4>
			//TODO: Error handler
		}
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	63bb      	str	r3, [r7, #56]	; 0x38
	sBreakDeadTimeConfig.DeadTime = init_data.deadtime;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	643b      	str	r3, [r7, #64]	; 0x40
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f6a:	647b      	str	r3, [r7, #68]	; 0x44
	sBreakDeadTimeConfig.BreakFilter = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	64bb      	str	r3, [r7, #72]	; 0x48
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	653b      	str	r3, [r7, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006f74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f78:	657b      	str	r3, [r7, #84]	; 0x54
	sBreakDeadTimeConfig.Break2Filter = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	65bb      	str	r3, [r7, #88]	; 0x58
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIMEx_ConfigBreakDeadTime(&tim_handle, &sBreakDeadTimeConfig) != HAL_OK) {
 8006f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f86:	4619      	mov	r1, r3
 8006f88:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006f8c:	f7fe fa5e 	bl	800544c <HAL_TIMEx_ConfigBreakDeadTime>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
	TimerInitData init_data = peripheral.init_data;
 8006f94:	f107 0314 	add.w	r3, r7, #20
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff fd15 	bl	80069c8 <_ZN10PWMservice13TimerInitDataD1Ev>
		//TODO: Error Handler
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	3798      	adds	r7, #152	; 0x98
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <_ZN10PWMservice15instance_existsEh>:

bool PWMservice::instance_exists(uint8_t id) {
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
	if (PWMservice::active_instances.contains(id)) {
 8006fb2:	1dfb      	adds	r3, r7, #7
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4806      	ldr	r0, [pc, #24]	; (8006fd0 <_ZN10PWMservice15instance_existsEh+0x28>)
 8006fb8:	f000 fb29 	bl	800760e <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <_ZN10PWMservice15instance_existsEh+0x1e>
		return true;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <_ZN10PWMservice15instance_existsEh+0x20>
	}

	return false;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	240008a8 	.word	0x240008a8

08006fd4 <_ZN10PWMservice12get_instanceEh>:

PWMservice::Instance& PWMservice::get_instance(uint8_t id) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	71fb      	strb	r3, [r7, #7]
	return PWMservice::active_instances[id];
 8006fde:	1dfb      	adds	r3, r7, #7
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4804      	ldr	r0, [pc, #16]	; (8006ff4 <_ZN10PWMservice12get_instanceEh+0x20>)
 8006fe4:	f000 f9ae 	bl	8007344 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8006fe8:	4603      	mov	r3, r0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	240008a8 	.word	0x240008a8

08006ff8 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d201      	bcs.n	8007012 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	e000      	b.n	8007014 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007012:	687b      	ldr	r3, [r7, #4]
    }
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800704e:	461a      	mov	r2, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fb12 	bl	800767a <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fbfe 	bl	800685a <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007068:	b5b0      	push	{r4, r5, r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681c      	ldr	r4, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fb10 	bl	80076a0 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8007080:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007082:	461a      	mov	r2, r3
 8007084:	4629      	mov	r1, r5
 8007086:	4620      	mov	r0, r4
 8007088:	f000 fb15 	bl	80076b6 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ffd1 	bl	8007036 <_ZNSt12_Vector_baseImSaImEED1Ev>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bdb0      	pop	{r4, r5, r7, pc}

0800709e <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	109b      	asrs	r3, r3, #2
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fb03 	bl	80076d2 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <_ZNSaIhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>:
       *  @param  __al  An allocator object.
       *
       *  Create a %forward_list consisting of copies of the elements
       *  in the initializer_list @a __il.  This is linear in __il.size().
       */
      forward_list(std::initializer_list<_Tp> __il,
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	1d38      	adds	r0, r7, #4
 80070f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80070fa:	603b      	str	r3, [r7, #0]
		   const _Alloc& __al = _Alloc())
      : _Base(_Node_alloc_type(__al))
 80070fc:	68fc      	ldr	r4, [r7, #12]
 80070fe:	f107 0314 	add.w	r3, r7, #20
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f000 faef 	bl	80076e8 <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>
 800710a:	f107 0314 	add.w	r3, r7, #20
 800710e:	4619      	mov	r1, r3
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fb0d 	bl	8007730 <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	4618      	mov	r0, r3
 800711c:	f000 faf1 	bl	8007702 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
      { _M_range_initialize(__il.begin(), __il.end()); }
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fb2a 	bl	800777c <_ZNKSt16initializer_listIhE5beginEv>
 8007128:	4604      	mov	r4, r0
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fb31 	bl	8007794 <_ZNKSt16initializer_listIhE3endEv>
 8007132:	4603      	mov	r3, r0
 8007134:	461a      	mov	r2, r3
 8007136:	4621      	mov	r1, r4
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fb3c 	bl	80077b6 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	bd90      	pop	{r4, r7, pc}

08007148 <_ZNSt12forward_listIhSaIhEED1Ev>:

      /**
       *  @brief  The forward_list dtor.
       */
      ~forward_list() noexcept
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
      { }
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 faff 	bl	8007756 <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fb42 	bl	80077f4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fb4a 	bl	800780c <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fb47 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEED1Ev>:
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb58 	bl	8007860 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb34 	bl	8007822 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fb7c 	bl	80068ba <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fb4f 	bl	8007878 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <_ZNSt6vectorImSaImEEC1ESt16initializer_listImERKS0_>:
      vector(initializer_list<value_type> __l,
 80071e4:	b5b0      	push	{r4, r5, r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	1d38      	adds	r0, r7, #4
 80071ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80071f2:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fb48 	bl	800788e <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 80071fe:	1d3b      	adds	r3, r7, #4
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fb53 	bl	80078ac <_ZNKSt16initializer_listImE5beginEv>
 8007206:	4604      	mov	r4, r0
 8007208:	1d3b      	adds	r3, r7, #4
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fb5a 	bl	80078c4 <_ZNKSt16initializer_listImE3endEv>
 8007210:	4602      	mov	r2, r0
 8007212:	462b      	mov	r3, r5
 8007214:	4621      	mov	r1, r4
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 fb7a 	bl	8007910 <_ZNSt6vectorImSaImEE19_M_range_initializeIPKmEEvT_S5_St20forward_iterator_tag>
      }
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bdb0      	pop	{r4, r5, r7, pc}

08007226 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8007226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8007230:	687c      	ldr	r4, [r7, #4]
 8007232:	6838      	ldr	r0, [r7, #0]
 8007234:	f7ff ff33 	bl	800709e <_ZNKSt6vectorImSaImEE4sizeEv>
 8007238:	4605      	mov	r5, r0
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fbae 	bl	800799e <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8007242:	4602      	mov	r2, r0
 8007244:	f107 030c 	add.w	r3, r7, #12
 8007248:	4611      	mov	r1, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fb99 	bl	8007982 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>
 8007250:	f107 030c 	add.w	r3, r7, #12
 8007254:	461a      	mov	r2, r3
 8007256:	4629      	mov	r1, r5
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fbab 	bl	80079b4 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fedc 	bl	8007020 <_ZNSaImED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8007268:	6838      	ldr	r0, [r7, #0]
 800726a:	f000 fbb7 	bl	80079dc <_ZNKSt6vectorImSaImEE5beginEv>
 800726e:	4605      	mov	r5, r0
 8007270:	6838      	ldr	r0, [r7, #0]
 8007272:	f000 fbc3 	bl	80079fc <_ZNKSt6vectorImSaImEE3endEv>
 8007276:	4606      	mov	r6, r0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fa0e 	bl	80076a0 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8007284:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8007286:	4622      	mov	r2, r4
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	f000 fbc7 	bl	8007a1e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>
 8007290:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	605a      	str	r2, [r3, #4]
      }
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072a0 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>:
      struct _Empty_byte { };

      template<typename _Up, bool = is_trivially_destructible_v<_Up>>
	union _Storage
	{
	  constexpr _Storage() noexcept : _M_empty() { }
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <_ZNSt22_Optional_payload_baseIhEC1Ev>:
      _Optional_payload_base() = default;
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ffed 	bl	80072a0 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	705a      	strb	r2, [r3, #1]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>:
    struct _Optional_payload<_Tp, true, true, true>
    : _Optional_payload_base<_Tp>
    {
      using _Optional_payload_base<_Tp>::_Optional_payload_base;

      _Optional_payload() = default;
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff ffe8 	bl	80072b6 <_ZNSt22_Optional_payload_baseIhEC1Ev>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>:
  template<typename _Tp>
    struct _Optional_base<_Tp, true, true>
      : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
    {
      // Constructors for disengaged optionals.
      constexpr _Optional_base() = default;
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff ffeb 	bl	80072d6 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <_ZNSt8optionalIhEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() = default;

      constexpr optional(nullopt_t) noexcept { }
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	7039      	strb	r1, [r7, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff ffea 	bl	80072f0 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <_ZNSt12forward_listIhSaIhEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %forward_list.
       */
      reference
      front()
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
      {
	_Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60fb      	str	r3, [r7, #12]
	return *__front->_M_valptr();
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fb83 	bl	8007a40 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 800733a:	4603      	mov	r3, r0
      }
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8007344:	b590      	push	{r4, r7, lr}
 8007346:	b08b      	sub	sp, #44	; 0x2c
 8007348:	af02      	add	r7, sp, #8
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fb83 	bl	8007a5c <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>
 8007356:	4603      	mov	r3, r0
 8007358:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fb8d 	bl	8007a7a <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>
 8007360:	4603      	mov	r3, r0
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	f107 020c 	add.w	r2, r7, #12
 8007368:	f107 0308 	add.w	r3, r7, #8
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fb90 	bl	8007a94 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d112      	bne.n	80073a0 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x5c>
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb9e 	bl	8007abc <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>
 8007380:	f107 0308 	add.w	r3, r7, #8
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fba6 	bl	8007ad6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEdeEv>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fbac 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x60>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x62>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01b      	beq.n	80073e2 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80073aa:	687c      	ldr	r4, [r7, #4]
 80073ac:	f107 0208 	add.w	r2, r7, #8
 80073b0:	f107 0314 	add.w	r3, r7, #20
 80073b4:	4611      	mov	r1, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fbbf 	bl	8007b3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 80073bc:	f107 0318 	add.w	r3, r7, #24
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fbaa 	bl	8007b1c <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80073c8:	f107 0218 	add.w	r2, r7, #24
 80073cc:	f107 031c 	add.w	r3, r7, #28
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4613      	mov	r3, r2
 80073d4:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0xb4>)
 80073d6:	6979      	ldr	r1, [r7, #20]
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fbbe 	bl	8007b5a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 80073de:	4603      	mov	r3, r0
 80073e0:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 80073e2:	f107 0308 	add.w	r3, r7, #8
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fb75 	bl	8007ad6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEdeEv>
 80073ec:	4603      	mov	r3, r0
 80073ee:	3304      	adds	r3, #4
      }
 80073f0:	4618      	mov	r0, r3
 80073f2:	3724      	adds	r7, #36	; 0x24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd90      	pop	{r4, r7, pc}
 80073f8:	08013e84 	.word	0x08013e84

080073fc <_ZNSt12forward_listIhSaIhEE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front()
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
      { this->_M_erase_after(&this->_M_impl._M_head); }
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fc16 	bl	8007c3c <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <_ZNSt6vectorImSaImEE9push_backERKm>:
      push_back(const value_type& __x)
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	d00c      	beq.n	8007448 <_ZNSt6vectorImSaImEE9push_backERKm+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	f000 fc37 	bl	8007caa <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	1d1a      	adds	r2, r3, #4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	605a      	str	r2, [r3, #4]
      }
 8007446:	e008      	b.n	800745a <_ZNSt6vectorImSaImEE9push_backERKm+0x42>
	  _M_realloc_insert(end(), __x);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f8cf 	bl	80075ec <_ZNSt6vectorImSaImEE3endEv>
 800744e:	4603      	mov	r3, r0
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc3b 	bl	8007cd0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <_ZNSt8optionalIhEC1IhLb1EEEOT_>:
      template<typename _Up = _Tp,
	       _Requires<__not_self<_Up>, __not_tag<_Up>,
			 is_constructible<_Tp, _Up&&>,
			 is_convertible<_Up&&, _Tp>> = true>
	constexpr
	optional(_Up&& __t)
 8007462:	b5b0      	push	{r4, r5, r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800746c:	687c      	ldr	r4, [r7, #4]
 800746e:	6838      	ldr	r0, [r7, #0]
 8007470:	f000 fcaa 	bl	8007dc8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	4629      	mov	r1, r5
 800747a:	4620      	mov	r0, r4
 800747c:	f000 fcc0 	bl	8007e00 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bdb0      	pop	{r4, r5, r7, pc}

0800748a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007496:	68b8      	ldr	r0, [r7, #8]
 8007498:	f000 fcc7 	bl	8007e2a <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800749c:	4602      	mov	r2, r0
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fcbe 	bl	8007e2a <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3308      	adds	r3, #8
 80074b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <_ZNKSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE8containsERS7_>:
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  True if there is an element with the specified key.
       */
      bool
      contains(const key_type& __x) const
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fcb3 	bl	8007e40 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4findERS3_>
 80074da:	4603      	mov	r3, r0
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fce9 	bl	8007eb8 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 80074e6:	4603      	mov	r3, r0
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	f107 020c 	add.w	r2, r7, #12
 80074ee:	f107 0308 	add.w	r3, r7, #8
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fcf0 	bl	8007eda <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f083 0301 	eor.w	r3, r3, #1
 8007500:	b2db      	uxtb	r3, r3
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEixEOS2_>:
      operator[](key_type&& __k)
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b08b      	sub	sp, #44	; 0x2c
 8007510:	af02      	add	r7, sp, #8
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fcf2 	bl	8007f02 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE11lower_boundERS7_>
 800751e:	4603      	mov	r3, r0
 8007520:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fcfc 	bl	8007f20 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE3endEv>
 8007528:	4603      	mov	r3, r0
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	f107 020c 	add.w	r2, r7, #12
 8007530:	f107 0308 	add.w	r3, r7, #8
 8007534:	4611      	mov	r1, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fcff 	bl	8007f3a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d112      	bne.n	8007568 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEixEOS2_+0x5c>
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fd0d 	bl	8007f62 <_ZNKSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE8key_compEv>
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fd15 	bl	8007f7c <_ZNKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEdeEv>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	f107 0310 	add.w	r3, r7, #16
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fd38 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEixEOS2_+0x60>
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEixEOS2_+0x62>
 800756c:	2300      	movs	r3, #0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01f      	beq.n	80075b2 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEixEOS2_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007572:	687c      	ldr	r4, [r7, #4]
 8007574:	f107 0208 	add.w	r2, r7, #8
 8007578:	f107 0314 	add.w	r3, r7, #20
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fd5d 	bl	800803e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8007584:	6838      	ldr	r0, [r7, #0]
 8007586:	f000 fd3e 	bl	8008006 <_ZSt4moveIRSt4pairI3PinS1_EEONSt16remove_referenceIT_E4typeEOS5_>
 800758a:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800758c:	f107 0318 	add.w	r3, r7, #24
 8007590:	4611      	mov	r1, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fd42 	bl	800801c <_ZSt16forward_as_tupleIJSt4pairI3PinS1_EEESt5tupleIJDpOT_EES6_>
 8007598:	f107 0218 	add.w	r2, r7, #24
 800759c:	f107 031c 	add.w	r3, r7, #28
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	4613      	mov	r3, r2
 80075a4:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEixEOS2_+0xbc>)
 80075a6:	6979      	ldr	r1, [r7, #20]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fd58 	bl	800805e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80075ae:	4603      	mov	r3, r0
 80075b0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80075b2:	f107 0308 	add.w	r3, r7, #8
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fce0 	bl	8007f7c <_ZNKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEdeEv>
 80075bc:	4603      	mov	r3, r0
 80075be:	3310      	adds	r3, #16
      }
 80075c0:	4618      	mov	r0, r3
 80075c2:	3724      	adds	r7, #36	; 0x24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd90      	pop	{r4, r7, pc}
 80075c8:	08013e84 	.word	0x08013e84

080075cc <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	f107 030c 	add.w	r3, r7, #12
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fd7c 	bl	80080da <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	f107 030c 	add.w	r3, r7, #12
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fd6b 	bl	80080da <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>:
      contains(const key_type& __x) const
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f000 fd6c 	bl	80080fa <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>
 8007622:	4603      	mov	r3, r0
 8007624:	60bb      	str	r3, [r7, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fda2 	bl	8008172 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 800762e:	4603      	mov	r3, r0
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	f107 020c 	add.w	r2, r7, #12
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fda9 	bl	8008194 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 8007642:	4603      	mov	r3, r0
 8007644:	f083 0301 	eor.w	r3, r3, #1
 8007648:	b2db      	uxtb	r3, r3
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	605a      	str	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	609a      	str	r2, [r3, #8]
	{ }
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
	if (__p)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fd92 	bl	80081bc <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fd98 	bl	80081fa <_ZSt8_DestroyIPmEvT_S1_>
    }
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fd97 	bl	8008226 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>:
      struct _Fwd_list_impl
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ffee 	bl	8007702 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>:
      _Fwd_list_base(_Node_alloc_type&& __a)
 8007730:	b590      	push	{r4, r7, lr}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__a)) { }
 800773a:	687c      	ldr	r4, [r7, #4]
 800773c:	6838      	ldr	r0, [r7, #0]
 800773e:	f000 fd7d 	bl	800823c <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8007742:	4603      	mov	r3, r0
 8007744:	4619      	mov	r1, r3
 8007746:	4620      	mov	r0, r4
 8007748:	f000 fd91 	bl	800826e <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bd90      	pop	{r4, r7, pc}

08007756 <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>:
      ~_Fwd_list_base()
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
      { _M_erase_after(&_M_impl._M_head, nullptr); }
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fd9b 	bl	80082a0 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff ffd3 	bl	8007718 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <_ZNKSt16initializer_listIhE5beginEv>:
      begin() const noexcept { return _M_array; }
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <_ZNKSt16initializer_listIhE3endEv>:
      end() const noexcept { return begin() + size(); }
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ffed 	bl	800777c <_ZNKSt16initializer_listIhE5beginEv>
 80077a2:	4604      	mov	r4, r0
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fda6 	bl	80082f6 <_ZNKSt16initializer_listIhE4sizeEv>
 80077aa:	4603      	mov	r3, r0
 80077ac:	4423      	add	r3, r4
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}

080077b6 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>:

  // Called by the range constructor to implement [23.3.4.2]/9
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      forward_list<_Tp, _Alloc>::
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
      _M_range_initialize(_InputIterator __first, _InputIterator __last)
      {
	_Node_base* __to = &this->_M_impl._M_head;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d00e      	beq.n	80077ec <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x36>
	  {
	    __to->_M_next = this->_M_create_node(*__first);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fda8 	bl	8008328 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>
 80077d8:	4602      	mov	r2, r0
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	601a      	str	r2, [r3, #0]
	    __to = __to->_M_next;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	3301      	adds	r3, #1
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	e7ec      	b.n	80077c6 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x10>
	  }
      }
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fdbb 	bl	8008378 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>:
      _Rb_tree_key_compare()
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
      { }
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d012      	beq.n	8007858 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8007832:	6838      	ldr	r0, [r7, #0]
 8007834:	f000 fdab 	bl	800838e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007838:	4603      	mov	r3, r0
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff fff0 	bl	8007822 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8007842:	6838      	ldr	r0, [r7, #0]
 8007844:	f000 fdaf 	bl	80083a6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007848:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fdb6 	bl	80083be <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007856:	e7e9      	b.n	800782c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
	}
    }
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fd9f 	bl	80083e0 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <_ZNKSt16initializer_listImE5beginEv>:
      begin() const noexcept { return _M_array; }
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <_ZNKSt16initializer_listImE3endEv>:
      end() const noexcept { return begin() + size(); }
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ffed 	bl	80078ac <_ZNKSt16initializer_listImE5beginEv>
 80078d2:	4604      	mov	r4, r0
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fd95 	bl	8008404 <_ZNKSt16initializer_listImE4sizeEv>
 80078da:	4603      	mov	r3, r0
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4423      	add	r3, r4
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd90      	pop	{r4, r7, pc}

080078e8 <_ZSt8distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 80078e8:	b5b0      	push	{r4, r5, r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80078f2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80078f4:	1d3b      	adds	r3, r7, #4
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fd90 	bl	800841c <_ZSt19__iterator_categoryIPKmENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80078fc:	462a      	mov	r2, r5
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fd95 	bl	8008430 <_ZSt10__distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8007906:	4603      	mov	r3, r0
    }
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bdb0      	pop	{r4, r5, r7, pc}

08007910 <_ZNSt6vectorImSaImEE19_M_range_initializeIPKmEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8007910:	b590      	push	{r4, r7, lr}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	f7ff ffe1 	bl	80078e8 <_ZSt8distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007926:	4603      	mov	r3, r0
 8007928:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800792a:	68fc      	ldr	r4, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff feb6 	bl	80076a0 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8007934:	4603      	mov	r3, r0
 8007936:	4619      	mov	r1, r3
 8007938:	6978      	ldr	r0, [r7, #20]
 800793a:	f000 fd89 	bl	8008450 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>
 800793e:	4603      	mov	r3, r0
 8007940:	4619      	mov	r1, r3
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fdac 	bl	80084a0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8007948:	4602      	mov	r2, r0
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	441a      	add	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fe9c 	bl	80076a0 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8007968:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800796a:	4622      	mov	r2, r4
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	68b8      	ldr	r0, [r7, #8]
 8007970:	f000 fdaa 	bl	80084c8 <_ZSt22__uninitialized_copy_aIPKmPmmET0_T_S4_S3_RSaIT1_E>
 8007974:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	605a      	str	r2, [r3, #4]
	}
 800797a:	bf00      	nop
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	bd90      	pop	{r4, r7, pc}

08007982 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fdaa 	bl	80084ea <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fd0b 	bl	80083e0 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fd99 	bl	8008504 <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <_ZNKSt6vectorImSaImEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	f107 030c 	add.w	r3, r7, #12
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fda4 	bl	800853a <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <_ZNKSt6vectorImSaImEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	1d1a      	adds	r2, r3, #4
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fd93 	bl	800853a <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fd92 	bl	800855a <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8007a36:	4603      	mov	r3, r0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>:
      _M_valptr() noexcept
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fda2 	bl	8008596 <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fd9f 	bl	80085ae <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fda9 	bl	80085dc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2301      	moveq	r3, #1
 8007aac:	2300      	movne	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>:
      key_comp() const
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fd99 	bl	80085fe <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>
 8007acc:	bf00      	nop
 8007ace:	4620      	mov	r0, r4
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd90      	pop	{r4, r7, pc}

08007ad6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fd96 	bl	8008614 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <_ZNKSt4lessIhEclERKhS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	bf34      	ite	cc
 8007b0a:	2301      	movcc	r3, #1
 8007b0c:	2300      	movcs	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fd80 	bl	8008630 <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007b5a:	b5b0      	push	{r4, r5, r7, lr}
 8007b5c:	b088      	sub	sp, #32
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fd70 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	6838      	ldr	r0, [r7, #0]
 8007b72:	f000 fd77 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007b76:	4605      	mov	r5, r0
 8007b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b7a:	f000 fd7e 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	462a      	mov	r2, r5
 8007b82:	4621      	mov	r1, r4
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fd83 	bl	8008690 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8007b8a:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8007b8c:	69f8      	ldr	r0, [r7, #28]
 8007b8e:	f000 fec5 	bl	800891c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f107 0010 	add.w	r0, r7, #16
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	f000 fd9b 	bl	80086d6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>

	    if (__res.second)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8007ba6:	6939      	ldr	r1, [r7, #16]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 fec8 	bl	8008942 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	e00b      	b.n	8007bce <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>

	    _M_drop_node(__z);
 8007bb6:	69f9      	ldr	r1, [r7, #28]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fc00 	bl	80083be <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	f107 0318 	add.w	r3, r7, #24
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fef8 	bl	80089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8007bcc:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bdb0      	pop	{r4, r5, r7, pc}

08007bd6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	bf0c      	ite	eq
 8007bec:	2301      	moveq	r3, #1
 8007bee:	2300      	movne	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	68b8      	ldr	r0, [r7, #8]
 8007c0e:	f7fe fe30 	bl	8006872 <_ZNK3PinltERKS_>
 8007c12:	4603      	mov	r3, r0
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>:
    _Fwd_list_base<_Tp, _Alloc>::
 8007c3c:	b590      	push	{r4, r7, lr}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]
      __pos->_M_next = __curr->_M_next;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	601a      	str	r2, [r3, #0]
      _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f835 	bl	8008cc4 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff feef 	bl	8007a40 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4619      	mov	r1, r3
 8007c66:	4620      	mov	r0, r4
 8007c68:	f001 f837 	bl	8008cda <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
      _M_put_node(__curr);
 8007c6c:	68f9      	ldr	r1, [r7, #12]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 f84b 	bl	8008d0a <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      return __pos->_M_next;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
    }
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd90      	pop	{r4, r7, pc}

08007c80 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8007c80:	b590      	push	{r4, r7, lr}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8007c8a:	6838      	ldr	r0, [r7, #0]
 8007c8c:	f001 f853 	bl	8008d36 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8007c90:	4603      	mov	r3, r0
 8007c92:	681c      	ldr	r4, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4619      	mov	r1, r3
 8007c98:	2004      	movs	r0, #4
 8007c9a:	f7fd fca4 	bl	80055e6 <_ZnwjPv>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	601c      	str	r4, [r3, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd90      	pop	{r4, r7, pc}

08007caa <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 f83d 	bl	8008d36 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68b8      	ldr	r0, [r7, #8]
 8007cc2:	f7ff ffdd 	bl	8007c80 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8007cd0:	b5b0      	push	{r4, r5, r7, lr}
 8007cd2:	b08c      	sub	sp, #48	; 0x30
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8007cdc:	4a39      	ldr	r2, [pc, #228]	; (8007dc4 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xf4>)
 8007cde:	2101      	movs	r1, #1
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f001 f833 	bl	8008d4c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8007ce6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fc69 	bl	80075cc <_ZNSt6vectorImSaImEE5beginEv>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	f107 0214 	add.w	r2, r7, #20
 8007d02:	f107 0308 	add.w	r3, r7, #8
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 f866 	bl	8008dda <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fbc2 	bl	80084a0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8007d1c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8007d22:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	18d5      	adds	r5, r2, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 f802 	bl	8008d36 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8007d32:	4603      	mov	r3, r0
 8007d34:	461a      	mov	r2, r3
 8007d36:	4629      	mov	r1, r5
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7ff ffb6 	bl	8007caa <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007d42:	f107 0308 	add.w	r3, r7, #8
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff f822 	bl	8006d90 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fca4 	bl	80076a0 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8007d58:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d60:	f001 f850 	bl	8008e04 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8007d64:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007d6c:	f107 0308 	add.w	r3, r7, #8
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff f80d 	bl	8006d90 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8007d76:	4603      	mov	r3, r0
 8007d78:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff fc8f 	bl	80076a0 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8007d82:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f001 f83b 	bl	8008e04 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8007d8e:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8007d90:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007da0:	f7ff fc6b 	bl	800767a <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	441a      	add	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	609a      	str	r2, [r3, #8]
    }
 8007dbc:	bf00      	nop
 8007dbe:	3730      	adds	r7, #48	; 0x30
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8007dc4:	08013904 	.word	0x08013904

08007dc8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8007dde:	b590      	push	{r4, r7, lr}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	7239      	strb	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4621      	mov	r1, r4
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f82d 	bl	8008e50 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd90      	pop	{r4, r7, pc}

08007e00 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8007e00:	b5b0      	push	{r4, r5, r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	7239      	strb	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8007e0c:	68fc      	ldr	r4, [r7, #12]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff ffda 	bl	8007dc8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	4629      	mov	r1, r5
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff ffdf 	bl	8007dde <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bdb0      	pop	{r4, r5, r7, pc}

08007e2a <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007e40:	b590      	push	{r4, r7, lr}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 f818 	bl	8008e80 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8007e50:	4604      	mov	r4, r0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 f820 	bl	8008e98 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 f826 	bl	8008eb0 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8007e64:	4603      	mov	r3, r0
 8007e66:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f825 	bl	8007eb8 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	f107 020c 	add.w	r2, r7, #12
 8007e76:	f107 0308 	add.w	r3, r7, #8
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f82c 	bl	8007eda <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>
 8007e82:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10d      	bne.n	8007ea4 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8007e88:	687c      	ldr	r4, [r7, #4]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f840 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007e92:	4603      	mov	r3, r0
 8007e94:	461a      	mov	r2, r3
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 f89a 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f807 	bl	8007eb8 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	e000      	b.n	8007eb0 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4findERS3_+0x70>
 8007eae:	68bb      	ldr	r3, [r7, #8]
    }
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd90      	pop	{r4, r7, pc}

08007eb8 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	f107 030c 	add.w	r3, r7, #12
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 f82d 	bl	8008f2a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	bf0c      	ite	eq
 8007ef0:	2301      	moveq	r3, #1
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f819 	bl	8008f48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11lower_boundERS3_>
 8007f16:	4603      	mov	r3, r0
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f823 	bl	8008f76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 8007f30:	4603      	mov	r3, r0
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	bf0c      	ite	eq
 8007f50:	2301      	moveq	r3, #1
 8007f52:	2300      	movne	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <_ZNKSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEE8key_compEv>:
      key_comp() const
 8007f62:	b590      	push	{r4, r7, lr}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 f813 	bl	8008f98 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8key_compEv>
 8007f72:	bf00      	nop
 8007f74:	4620      	mov	r0, r4
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd90      	pop	{r4, r7, pc}

08007f7c <_ZNKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 f810 	bl	8008fae <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
	  else
	    {
	      if (__t < __u)
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	68b8      	ldr	r0, [r7, #8]
 8007fa8:	f7fe fc63 	bl	8006872 <_ZNK3PinltERKS_>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x1e>
		return weak_ordering::less;
 8007fb2:	23ff      	movs	r3, #255	; 0xff
 8007fb4:	e009      	b.n	8007fca <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else if (__u < __t)
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7fe fc5a 	bl	8006872 <_ZNK3PinltERKS_>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x30>
		return weak_ordering::greater;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else
		return weak_ordering::equivalent;
 8007fc8:	2300      	movs	r3, #0
	    }
	}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8007fd2:	b590      	push	{r4, r7, lr}
 8007fd4:	b087      	sub	sp, #28
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	68b8      	ldr	r0, [r7, #8]
 8007fe2:	f000 fff3 	bl	8008fcc <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fbe0 	bl	80067b4 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8007ff4:	7d39      	ldrb	r1, [r7, #20]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f7fe fbfa 	bl	80067f0 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4618      	mov	r0, r3
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	bd90      	pop	{r4, r7, pc}

08008006 <_ZSt4moveIRSt4pairI3PinS1_EEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <_ZSt16forward_as_tupleIJSt4pairI3PinS1_EEESt5tupleIJDpOT_EES6_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8008026:	6838      	ldr	r0, [r7, #0]
 8008028:	f001 f800 	bl	800902c <_ZSt7forwardISt4pairI3PinS1_EEOT_RNSt16remove_referenceIS3_E4typeE>
 800802c:	4603      	mov	r3, r0
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f806 	bl	8009042 <_ZNSt5tupleIJOSt4pairI3PinS1_EEEC1IJS2_ELb1ELb1EEEDpOT_>
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800805e:	b5b0      	push	{r4, r5, r7, lr}
 8008060:	b088      	sub	sp, #32
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 faee 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008072:	4604      	mov	r4, r0
 8008074:	6838      	ldr	r0, [r7, #0]
 8008076:	f000 fff7 	bl	8009068 <_ZSt7forwardISt5tupleIJOSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800807a:	4605      	mov	r5, r0
 800807c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800807e:	f000 fafc 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008082:	4603      	mov	r3, r0
 8008084:	462a      	mov	r2, r5
 8008086:	4621      	mov	r1, r4
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 fff8 	bl	800907e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800808e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8008090:	69f8      	ldr	r0, [r7, #28]
 8008092:	f001 f93a 	bl	800930a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008096:	4603      	mov	r3, r0
 8008098:	f107 0010 	add.w	r0, r7, #16
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	f001 f810 	bl	80090c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80080aa:	6939      	ldr	r1, [r7, #16]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f001 f93d 	bl	8009330 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80080b6:	4603      	mov	r3, r0
 80080b8:	e00b      	b.n	80080d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80080ba:	69f9      	ldr	r1, [r7, #28]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f001 f974 	bl	80093aa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	f107 0318 	add.w	r3, r7, #24
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 f97e 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80080d0:	69bb      	ldr	r3, [r7, #24]
      }
 80080d2:	4618      	mov	r0, r3
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bdb0      	pop	{r4, r5, r7, pc}

080080da <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80080fa:	b590      	push	{r4, r7, lr}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f970 	bl	80093ea <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 800810a:	4604      	mov	r4, r0
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 f978 	bl	8009402 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8008112:	4602      	mov	r2, r0
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	4621      	mov	r1, r4
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f97e 	bl	800941a <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 800811e:	4603      	mov	r3, r0
 8008120:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f825 	bl	8008172 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8008128:	4603      	mov	r3, r0
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	f107 020c 	add.w	r2, r7, #12
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f82c 	bl	8008194 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 800813c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10d      	bne.n	800815e <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8008142:	687c      	ldr	r4, [r7, #4]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4618      	mov	r0, r3
 8008148:	f001 f998 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	4620      	mov	r0, r4
 8008154:	f7ff fccd 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d004      	beq.n	8008168 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f807 	bl	8008172 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8008164:	4603      	mov	r3, r0
 8008166:	e000      	b.n	800816a <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x70>
 8008168:	68bb      	ldr	r3, [r7, #8]
    }
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	bd90      	pop	{r4, r7, pc}

08008172 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	1d1a      	adds	r2, r3, #4
 800817e:	f107 030c 	add.w	r3, r7, #12
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f001 f985 	bl	8009494 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	bf0c      	ite	eq
 80081aa:	2301      	moveq	r3, #1
 80081ac:	2300      	movne	r3, #0
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80081d4:	f7fd f9ff 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	    ::operator delete(__p);
 80081de:	69b8      	ldr	r0, [r7, #24]
 80081e0:	f00a ffba 	bl	8013158 <_ZdlPv>
	    return;
 80081e4:	e005      	b.n	80081f2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	69b9      	ldr	r1, [r7, #24]
 80081ea:	69f8      	ldr	r0, [r7, #28]
 80081ec:	f002 f812 	bl	800a214 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	3720      	adds	r7, #32
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008204:	f7fd f9e7 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 f94e 	bl	80094b2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 8008216:	e003      	b.n	8008220 <_ZSt8_DestroyIPmEvT_S1_+0x26>
	__destroy(__first, __last);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 f961 	bl	80094e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>:
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <_ZNSt19_Fwd_list_node_baseC1Ev>:
    _Fwd_list_node_base() = default;
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>:
	_Fwd_list_impl(_Node_alloc_type&& __a)
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(std::move(__a)), _M_head()
 8008278:	6838      	ldr	r0, [r7, #0]
 800827a:	f7ff ffdf 	bl	800823c <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 800827e:	4603      	mov	r3, r0
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 f938 	bl	80094f8 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff ffde 	bl	8008252 <_ZNSt19_Fwd_list_node_baseC1Ev>
	{ }
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>:
    _Fwd_list_base<_Tp, _Alloc>::
 80082a0:	b590      	push	{r4, r7, lr}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	617b      	str	r3, [r7, #20]
      while (__curr != __last)
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d015      	beq.n	80082e6 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x46>
	  _Node* __temp = __curr;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	613b      	str	r3, [r7, #16]
	  __curr = static_cast<_Node*>(__curr->_M_next);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	617b      	str	r3, [r7, #20]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fcfd 	bl	8008cc4 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 80082ca:	4604      	mov	r4, r0
 80082cc:	6938      	ldr	r0, [r7, #16]
 80082ce:	f7ff fbb7 	bl	8007a40 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4619      	mov	r1, r3
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fcff 	bl	8008cda <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
	  _M_put_node(__temp);
 80082dc:	6939      	ldr	r1, [r7, #16]
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 fd13 	bl	8008d0a <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      while (__curr != __last)
 80082e4:	e7e5      	b.n	80082b2 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x12>
      __pos->_M_next = __last;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	601a      	str	r2, [r3, #0]
      return __last;
 80082ec:	687b      	ldr	r3, [r7, #4]
    }
 80082ee:	4618      	mov	r0, r3
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd90      	pop	{r4, r7, pc}

080082f6 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <_ZNSt14_Fwd_list_nodeIhEC1Ev>:
      _Fwd_list_node() = default;
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff ff9a 	bl	8008252 <_ZNSt19_Fwd_list_node_baseC1Ev>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>:
	_M_create_node(_Args&&... __args)
 8008328:	b5b0      	push	{r4, r5, r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	  _Node* __node = this->_M_get_node();
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f8ee 	bl	8009514 <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>
 8008338:	60f8      	str	r0, [r7, #12]
	      ::new ((void*)__node) _Node;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4619      	mov	r1, r3
 800833e:	2008      	movs	r0, #8
 8008340:	f7fd f951 	bl	80055e6 <_ZnwjPv>
 8008344:	4603      	mov	r3, r0
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff ffe1 	bl	800830e <_ZNSt14_Fwd_list_nodeIhEC1Ev>
	      _Node_alloc_traits::construct(_M_get_Node_allocator(),
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fcb9 	bl	8008cc4 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8008352:	4604      	mov	r4, r0
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f7ff fb73 	bl	8007a40 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 800835a:	4605      	mov	r5, r0
 800835c:	6838      	ldr	r0, [r7, #0]
 800835e:	f001 f8ee 	bl	800953e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8008362:	4603      	mov	r3, r0
 8008364:	461a      	mov	r2, r3
 8008366:	4629      	mov	r1, r5
 8008368:	4620      	mov	r0, r4
 800836a:	f001 f909 	bl	8009580 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>
	  return __node;
 800836e:	68fb      	ldr	r3, [r7, #12]
	}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bdb0      	pop	{r4, r5, r7, pc}

08008378 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>:
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4618      	mov	r0, r3
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 f8ea 	bl	80095a4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 f8fb 	bl	80095ce <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f900 	bl	80095f2 <_ZNSaImEC1ERKS_>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff f92c 	bl	8007652 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZNKSt16initializer_listImE4sizeEv>:
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <_ZSt19__iterator_categoryIPKmENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <_ZSt10__distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	109b      	asrs	r3, r3, #2
    }
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8008450:	b590      	push	{r4, r7, lr}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800845a:	f107 030c 	add.w	r3, r7, #12
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f8c6 	bl	80095f2 <_ZNSaImEC1ERKS_>
 8008466:	f107 030c 	add.w	r3, r7, #12
 800846a:	4618      	mov	r0, r3
 800846c:	f001 f8db 	bl	8009626 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8008470:	4602      	mov	r2, r0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4293      	cmp	r3, r2
 8008476:	bf8c      	ite	hi
 8008478:	2301      	movhi	r3, #1
 800847a:	2300      	movls	r3, #0
 800847c:	b2dc      	uxtb	r4, r3
 800847e:	f107 030c 	add.w	r3, r7, #12
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fdcc 	bl	8007020 <_ZNSaImED1Ev>
 8008488:	2c00      	cmp	r4, #0
 800848a:	d002      	beq.n	8008492 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800848c:	4803      	ldr	r0, [pc, #12]	; (800849c <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x4c>)
 800848e:	f00a ff2e 	bl	80132ee <_ZSt20__throw_length_errorPKc>
	return __n;
 8008492:	687b      	ldr	r3, [r7, #4]
      }
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	bd90      	pop	{r4, r7, pc}
 800849c:	08013920 	.word	0x08013920

080084a0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d006      	beq.n	80084be <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 f8d0 	bl	800965a <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 80084ba:	4603      	mov	r3, r0
 80084bc:	e000      	b.n	80084c0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 80084be:	2300      	movs	r3, #0
      }
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <_ZSt22__uninitialized_copy_aIPKmPmmET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f001 f8dd 	bl	800969a <_ZSt18uninitialized_copyIPKmPmET0_T_S4_S3_>
 80084e0:	4603      	mov	r3, r0
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 f87b 	bl	80095f2 <_ZNSaImEC1ERKS_>
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff ffc5 	bl	80084a0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8008516:	4602      	mov	r2, r0
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	609a      	str	r2, [r3, #8]
      }
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800855a:	b580      	push	{r7, lr}
 800855c:	b086      	sub	sp, #24
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008566:	2301      	movs	r3, #1
 8008568:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f001 f8a5 	bl	80096be <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>
 8008574:	4603      	mov	r3, r0
    }
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fb69 	bl	8008c5e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800858c:	4603      	mov	r3, r0
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f001 f89d 	bl	80096de <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 80085ae:	b590      	push	{r4, r7, lr}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff f951 	bl	8007860 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 80085be:	4604      	mov	r4, r0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f897 	bl	80096f4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 80085c6:	4602      	mov	r2, r0
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	4621      	mov	r1, r4
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 f89d 	bl	800970c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 80085d2:	4603      	mov	r3, r0
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd90      	pop	{r4, r7, pc}

080085dc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	1d1a      	adds	r2, r3, #4
 80085e8:	f107 030c 	add.w	r3, r7, #12
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f9e4 	bl	80089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>:
      key_comp() const
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8008606:	bf00      	nop
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3310      	adds	r3, #16
 8008620:	4618      	mov	r0, r3
 8008622:	f001 f8a4 	bl	800976e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>
 8008626:	4603      	mov	r3, r0
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f001 f8a1 	bl	8009786 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8008690:	b5b0      	push	{r4, r5, r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f001 f880 	bl	80097a4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>
 80086a4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80086a6:	68b8      	ldr	r0, [r7, #8]
 80086a8:	f7ff ffd1 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80086ac:	4604      	mov	r4, r0
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff ffd8 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80086b4:	4605      	mov	r5, r0
 80086b6:	6838      	ldr	r0, [r7, #0]
 80086b8:	f7ff ffdf 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80086bc:	4603      	mov	r3, r0
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	462b      	mov	r3, r5
 80086c2:	4622      	mov	r2, r4
 80086c4:	6979      	ldr	r1, [r7, #20]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f001 f87d 	bl	80097c6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 80086cc:	697b      	ldr	r3, [r7, #20]
	}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bdb0      	pop	{r4, r5, r7, pc}

080086d6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80086d6:	b590      	push	{r4, r7, lr}
 80086d8:	b08d      	sub	sp, #52	; 0x34
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80086e4:	1d3b      	adds	r3, r7, #4
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 f89a 	bl	8009820 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEE13_M_const_castEv>
 80086ec:	4603      	mov	r3, r0
 80086ee:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80086f0:	69bc      	ldr	r4, [r7, #24]
 80086f2:	68b8      	ldr	r0, [r7, #8]
 80086f4:	f000 fffe 	bl	80096f4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 80086f8:	4603      	mov	r3, r0
 80086fa:	429c      	cmp	r4, r3
 80086fc:	bf0c      	ite	eq
 80086fe:	2301      	moveq	r3, #1
 8008700:	2300      	movne	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d030      	beq.n	800876a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8008708:	68b8      	ldr	r0, [r7, #8]
 800870a:	f001 f89a 	bl	8009842 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>
 800870e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8008714:	68bc      	ldr	r4, [r7, #8]
 8008716:	68b8      	ldr	r0, [r7, #8]
 8008718:	f001 f89f 	bl	800985a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 800871c:	4603      	mov	r3, r0
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 feab 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008726:	4603      	mov	r3, r0
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	4619      	mov	r1, r3
 800872c:	4620      	mov	r0, r4
 800872e:	f7ff f9e0 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 800873c:	2300      	movs	r3, #0
	  if (size() > 0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00c      	beq.n	800875c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8008742:	2300      	movs	r3, #0
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	68b8      	ldr	r0, [r7, #8]
 8008748:	f001 f887 	bl	800985a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 800874c:	4602      	mov	r2, r0
 800874e:	f107 031c 	add.w	r3, r7, #28
 8008752:	4619      	mov	r1, r3
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f001 f88c 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800875a:	e0db      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	4618      	mov	r0, r3
 8008764:	f001 f89b 	bl	800989e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8008768:	e0d4      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800876a:	68bc      	ldr	r4, [r7, #8]
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fe84 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008774:	4603      	mov	r3, r0
 8008776:	461a      	mov	r2, r3
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff f9b9 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d057      	beq.n	8008836 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800878a:	69bc      	ldr	r4, [r7, #24]
 800878c:	68b8      	ldr	r0, [r7, #8]
 800878e:	f001 f90b 	bl	80099a8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 8008792:	4603      	mov	r3, r0
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429c      	cmp	r4, r3
 8008798:	bf0c      	ite	eq
 800879a:	2301      	moveq	r3, #1
 800879c:	2300      	movne	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00d      	beq.n	80087c0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80087a4:	68b8      	ldr	r0, [r7, #8]
 80087a6:	f001 f8ff 	bl	80099a8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 80087aa:	4604      	mov	r4, r0
 80087ac:	68b8      	ldr	r0, [r7, #8]
 80087ae:	f001 f8fb 	bl	80099a8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	4621      	mov	r1, r4
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f001 f901 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80087be:	e0a9      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80087c0:	68bc      	ldr	r4, [r7, #8]
 80087c2:	f107 0314 	add.w	r3, r7, #20
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 f913 	bl	80099f2 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEmmEv>
 80087cc:	4603      	mov	r3, r0
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fe53 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80087d6:	4603      	mov	r3, r0
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	4619      	mov	r1, r3
 80087dc:	4620      	mov	r0, r4
 80087de:	f7ff f988 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01f      	beq.n	8008828 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff fdcf 	bl	800838e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bf0c      	ite	eq
 80087f6:	2301      	moveq	r3, #1
 80087f8:	2300      	movne	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8008800:	2300      	movs	r3, #0
 8008802:	623b      	str	r3, [r7, #32]
 8008804:	f107 0214 	add.w	r2, r7, #20
 8008808:	f107 0320 	add.w	r3, r7, #32
 800880c:	4619      	mov	r1, r3
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f001 f82f 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008814:	e07e      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8008816:	f107 0218 	add.w	r2, r7, #24
 800881a:	f107 0318 	add.w	r3, r7, #24
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f001 f8cd 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008826:	e075      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f835 	bl	800989e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8008834:	e06e      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8008836:	68bc      	ldr	r4, [r7, #8]
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fe1e 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008840:	4603      	mov	r3, r0
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4619      	mov	r1, r3
 8008846:	4620      	mov	r0, r4
 8008848:	f7ff f953 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d056      	beq.n	8008900 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8008856:	69bc      	ldr	r4, [r7, #24]
 8008858:	68b8      	ldr	r0, [r7, #8]
 800885a:	f000 fffe 	bl	800985a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 800885e:	4603      	mov	r3, r0
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	429c      	cmp	r4, r3
 8008864:	bf0c      	ite	eq
 8008866:	2301      	moveq	r3, #1
 8008868:	2300      	movne	r3, #0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00c      	beq.n	800888a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8008870:	2300      	movs	r3, #0
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
 8008874:	68b8      	ldr	r0, [r7, #8]
 8008876:	f000 fff0 	bl	800985a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 800887a:	4602      	mov	r2, r0
 800887c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008880:	4619      	mov	r1, r3
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 fff5 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008888:	e044      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800888a:	68bc      	ldr	r4, [r7, #8]
 800888c:	f107 0310 	add.w	r3, r7, #16
 8008890:	4618      	mov	r0, r3
 8008892:	f001 f8bf 	bl	8009a14 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEppEv>
 8008896:	4603      	mov	r3, r0
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fdee 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7ff f923 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01f      	beq.n	80088f2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fd6a 	bl	800838e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	bf0c      	ite	eq
 80088c0:	2301      	moveq	r3, #1
 80088c2:	2300      	movne	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 80088ca:	2300      	movs	r3, #0
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ce:	f107 0218 	add.w	r2, r7, #24
 80088d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088d6:	4619      	mov	r1, r3
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 ffca 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80088de:	e019      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80088e0:	f107 0210 	add.w	r2, r7, #16
 80088e4:	f107 0310 	add.w	r3, r7, #16
 80088e8:	4619      	mov	r1, r3
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f001 f868 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80088f0:	e010      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 ffd0 	bl	800989e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 80088fe:	e009      	b.n	8008914 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8008900:	2300      	movs	r3, #0
 8008902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008904:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008908:	f107 0318 	add.w	r3, r7, #24
 800890c:	4619      	mov	r1, r3
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f001 f891 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	3734      	adds	r7, #52	; 0x34
 8008918:	46bd      	mov	sp, r7
 800891a:	bd90      	pop	{r4, r7, pc}

0800891c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f89c 	bl	8009a62 <_ZNKSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 800892a:	4602      	mov	r2, r0
 800892c:	f107 030c 	add.w	r3, r7, #12
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f001 f8a3 	bl	8009a7e <_ZNKSt10_Select1stISt4pairIKhN10PWMservice8InstanceEEEclERKS4_>
 8008938:	4603      	mov	r3, r0
      }
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008942:	b5b0      	push	{r4, r5, r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d117      	bne.n	8008986 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fecc 	bl	80096f4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 800895c:	4602      	mov	r2, r0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4293      	cmp	r3, r2
 8008962:	d010      	beq.n	8008986 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8008964:	68fc      	ldr	r4, [r7, #12]
 8008966:	6838      	ldr	r0, [r7, #0]
 8008968:	f7ff ffd8 	bl	800891c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 800896c:	4605      	mov	r5, r0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fd84 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	4629      	mov	r1, r5
 800897a:	4620      	mov	r0, r4
 800897c:	f7ff f8b9 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 800898a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800898c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8008992:	7df8      	ldrb	r0, [r7, #23]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	f00a fc4b 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80089a6:	f107 0310 	add.w	r3, r7, #16
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f805 	bl	80089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80089b2:	693b      	ldr	r3, [r7, #16]
    }
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bdb0      	pop	{r4, r5, r7, pc}

080089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	1d1a      	adds	r2, r3, #4
 80089e6:	f107 030c 	add.w	r3, r7, #12
 80089ea:	4611      	mov	r1, r2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f95a 	bl	8008ca6 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3310      	adds	r3, #16
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 f85c 	bl	8009ac6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b08d      	sub	sp, #52	; 0x34
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8008a26:	1d3b      	adds	r3, r7, #4
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 f869 	bl	8009b00 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEE13_M_const_castEv>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8008a32:	69bc      	ldr	r4, [r7, #24]
 8008a34:	68b8      	ldr	r0, [r7, #8]
 8008a36:	f001 f83a 	bl	8009aae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	bf0c      	ite	eq
 8008a40:	2301      	moveq	r3, #1
 8008a42:	2300      	movne	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d030      	beq.n	8008aac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8008a4a:	68b8      	ldr	r0, [r7, #8]
 8008a4c:	f001 f869 	bl	8009b22 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8008a50:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d013      	beq.n	8008a7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8008a56:	68bc      	ldr	r4, [r7, #8]
 8008a58:	68b8      	ldr	r0, [r7, #8]
 8008a5a:	f001 f86e 	bl	8009b3a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fd8b 	bl	800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7ff f8c5 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8008a7e:	2300      	movs	r3, #0
	  if (size() > 0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00c      	beq.n	8008a9e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
 8008a88:	68b8      	ldr	r0, [r7, #8]
 8008a8a:	f001 f856 	bl	8009b3a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	f107 031c 	add.w	r3, r7, #28
 8008a94:	4619      	mov	r1, r3
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 feeb 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008a9c:	e0db      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f001 f854 	bl	8009b52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8008aaa:	e0d4      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8008aac:	68bc      	ldr	r4, [r7, #8]
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff fd64 	bl	800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	4620      	mov	r0, r4
 8008abe:	f7ff f89e 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d057      	beq.n	8008b78 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8008acc:	69bc      	ldr	r4, [r7, #24]
 8008ace:	68b8      	ldr	r0, [r7, #8]
 8008ad0:	f001 f8c4 	bl	8009c5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	429c      	cmp	r4, r3
 8008ada:	bf0c      	ite	eq
 8008adc:	2301      	moveq	r3, #1
 8008ade:	2300      	movne	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00d      	beq.n	8008b02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8008ae6:	68b8      	ldr	r0, [r7, #8]
 8008ae8:	f001 f8b8 	bl	8009c5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8008aec:	4604      	mov	r4, r0
 8008aee:	68b8      	ldr	r0, [r7, #8]
 8008af0:	f001 f8b4 	bl	8009c5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	4621      	mov	r1, r4
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 ff60 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008b00:	e0a9      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8008b02:	68bc      	ldr	r4, [r7, #8]
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f8b3 	bl	8009c74 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEmmEv>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff fd33 	bl	800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7ff f86d 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01f      	beq.n	8008b6a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 f8b2 	bl	8009c96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bf0c      	ite	eq
 8008b38:	2301      	moveq	r3, #1
 8008b3a:	2300      	movne	r3, #0
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8008b42:	2300      	movs	r3, #0
 8008b44:	623b      	str	r3, [r7, #32]
 8008b46:	f107 0214 	add.w	r2, r7, #20
 8008b4a:	f107 0320 	add.w	r3, r7, #32
 8008b4e:	4619      	mov	r1, r3
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fe8e 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008b56:	e07e      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8008b58:	f107 0218 	add.w	r2, r7, #24
 8008b5c:	f107 0318 	add.w	r3, r7, #24
 8008b60:	4619      	mov	r1, r3
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 ff2c 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008b68:	e075      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 ffee 	bl	8009b52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8008b76:	e06e      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8008b78:	68bc      	ldr	r4, [r7, #8]
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fcfe 	bl	800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008b82:	4603      	mov	r3, r0
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	4619      	mov	r1, r3
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7ff f838 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d056      	beq.n	8008c42 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8008b98:	69bc      	ldr	r4, [r7, #24]
 8008b9a:	68b8      	ldr	r0, [r7, #8]
 8008b9c:	f000 ffcd 	bl	8009b3a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2301      	moveq	r3, #1
 8008baa:	2300      	movne	r3, #0
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00c      	beq.n	8008bcc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb6:	68b8      	ldr	r0, [r7, #8]
 8008bb8:	f000 ffbf 	bl	8009b3a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fe54 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008bca:	e044      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8008bcc:	68bc      	ldr	r4, [r7, #8]
 8008bce:	f107 0310 	add.w	r3, r7, #16
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 f86b 	bl	8009cae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEppEv>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff fcce 	bl	800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008be2:	4603      	mov	r3, r0
 8008be4:	461a      	mov	r2, r3
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7ff f808 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01f      	beq.n	8008c34 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 f84d 	bl	8009c96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bf0c      	ite	eq
 8008c02:	2301      	moveq	r3, #1
 8008c04:	2300      	movne	r3, #0
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c10:	f107 0218 	add.w	r2, r7, #24
 8008c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c18:	4619      	mov	r1, r3
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 fe29 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008c20:	e019      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8008c22:	f107 0210 	add.w	r2, r7, #16
 8008c26:	f107 0310 	add.w	r3, r7, #16
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 fec7 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008c32:	e010      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 ff89 	bl	8009b52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8008c40:	e009      	b.n	8008c56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8008c42:	2300      	movs	r3, #0
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008c4a:	f107 0318 	add.w	r3, r7, #24
 8008c4e:	4619      	mov	r1, r3
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fef0 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	3734      	adds	r7, #52	; 0x34
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd90      	pop	{r4, r7, pc}

08008c5e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 f832 	bl	8009cd0 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f839 	bl	8009cec <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>
 8008c7a:	4603      	mov	r3, r0
      }
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f837 	bl	8009d04 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f848 	bl	8009d2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() noexcept
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008ce4:	6838      	ldr	r0, [r7, #0]
 8008ce6:	f001 f834 	bl	8009d52 <_ZSt10destroy_atIhEvPT_>
	}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 f833 	bl	8009d66 <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 8008d00:	4603      	mov	r3, r0
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>:
      _M_put_node(_Node* __p)
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
	auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__p);
 8008d14:	6838      	ldr	r0, [r7, #0]
 8008d16:	f7ff ffec 	bl	8008cf2 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>
 8008d1a:	60f8      	str	r0, [r7, #12]
	_Node_alloc_traits::deallocate(_M_get_Node_allocator(), __ptr, 1);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff ffd1 	bl	8008cc4 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2201      	movs	r2, #1
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 f828 	bl	8009d7e <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>
      }
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8008d4c:	b590      	push	{r4, r7, lr}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f001 f82f 	bl	8009dbc <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8008d5e:	4604      	mov	r4, r0
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7fe f99c 	bl	800709e <_ZNKSt6vectorImSaImEE4sizeEv>
 8008d66:	4603      	mov	r3, r0
 8008d68:	1ae2      	subs	r2, r4, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	bf34      	ite	cc
 8008d70:	2301      	movcc	r3, #1
 8008d72:	2300      	movcs	r3, #0
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f00a fab7 	bl	80132ee <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f7fe f98c 	bl	800709e <_ZNKSt6vectorImSaImEE4sizeEv>
 8008d86:	4604      	mov	r4, r0
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7fe f988 	bl	800709e <_ZNKSt6vectorImSaImEE4sizeEv>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	f107 0208 	add.w	r2, r7, #8
 8008d96:	f107 0310 	add.w	r3, r7, #16
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe f92b 	bl	8006ff8 <_ZSt3maxIjERKT_S2_S2_>
 8008da2:	4603      	mov	r3, r0
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4423      	add	r3, r4
 8008da8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7fe f977 	bl	800709e <_ZNKSt6vectorImSaImEE4sizeEv>
 8008db0:	4602      	mov	r2, r0
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d306      	bcc.n	8008dc6 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 ffff 	bl	8009dbc <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d904      	bls.n	8008dd0 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fff8 	bl	8009dbc <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	e000      	b.n	8008dd2 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 8008dd0:	697b      	ldr	r3, [r7, #20]
      }
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd90      	pop	{r4, r7, pc}

08008dda <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008dda:	b590      	push	{r4, r7, lr}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7fd ffd3 	bl	8006d90 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8008dea:	4603      	mov	r3, r0
 8008dec:	681c      	ldr	r4, [r3, #0]
 8008dee:	6838      	ldr	r0, [r7, #0]
 8008df0:	f7fd ffce 	bl	8006d90 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8008df4:	4603      	mov	r3, r0
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	1ae3      	subs	r3, r4, r3
 8008dfa:	109b      	asrs	r3, r3, #2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd90      	pop	{r4, r7, pc}

08008e04 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8008e12:	f88d 4000 	strb.w	r4, [sp]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 ffde 	bl	8009dde <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 8008e22:	4603      	mov	r3, r0
      }
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd90      	pop	{r4, r7, pc}

08008e2c <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	7239      	strb	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7fe ffc5 	bl	8007dc8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	701a      	strb	r2, [r3, #0]
	    { }
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8008e50:	b5b0      	push	{r4, r5, r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	7239      	strb	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8008e5c:	68fc      	ldr	r4, [r7, #12]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7fe ffb2 	bl	8007dc8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7ff ffde 	bl	8008e2c <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	705a      	strb	r2, [r3, #1]
	{ }
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bdb0      	pop	{r4, r5, r7, pc}

08008e80 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
      }
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008eb0:	b590      	push	{r4, r7, lr}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01b      	beq.n	8008efc <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008ec4:	68fc      	ldr	r4, [r7, #12]
 8008ec6:	68b8      	ldr	r0, [r7, #8]
 8008ec8:	f000 fa1f 	bl	800930a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff f87d 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f083 0301 	eor.w	r3, r3, #1
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d006      	beq.n	8008ef2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	68b8      	ldr	r0, [r7, #8]
 8008eea:	f000 ff94 	bl	8009e16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8008eee:	60b8      	str	r0, [r7, #8]
 8008ef0:	e7e5      	b.n	8008ebe <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008ef2:	68b8      	ldr	r0, [r7, #8]
 8008ef4:	f000 ff9b 	bl	8009e2e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8008ef8:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008efa:	e7e0      	b.n	8008ebe <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f811 	bl	8008f2a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8008f08:	697b      	ldr	r3, [r7, #20]
    }
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	371c      	adds	r7, #28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd90      	pop	{r4, r7, pc}

08008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f9f5 	bl	800930a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008f20:	4603      	mov	r3, r0
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 ff77 	bl	8009e46 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8008f58:	4604      	mov	r4, r0
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 ff7f 	bl	8009e5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8008f60:	4602      	mov	r2, r0
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	4621      	mov	r1, r4
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 ff85 	bl	8009e76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd90      	pop	{r4, r7, pc}

08008f76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	1d1a      	adds	r2, r3, #4
 8008f82:	f107 030c 	add.w	r3, r7, #12
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fa1f 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8key_compEv>:
      key_comp() const
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8008fa0:	bf00      	nop
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3310      	adds	r3, #16
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 ff8c 	bl	8009ed8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>:

#if __cpp_lib_three_way_comparison && __cpp_lib_concepts
  template<typename _T1, typename _T2>
    constexpr common_comparison_category_t<__detail::__synth3way_t<_T1>,
					   __detail::__synth3way_t<_T2>>
    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
    {
      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4812      	ldr	r0, [pc, #72]	; (8009028 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 8008fde:	f7fe ffdb 	bl	8007f98 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	723b      	strb	r3, [r7, #8]
 8008fe6:	f107 030c 	add.w	r3, r7, #12
 8008fea:	2100      	movs	r1, #0
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fd fbe1 	bl	80067b4 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8008ff2:	7b39      	ldrb	r1, [r7, #12]
 8008ff4:	7a38      	ldrb	r0, [r7, #8]
 8008ff6:	f7fd fbe9 	bl	80067cc <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f083 0301 	eor.w	r3, r3, #1
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x3e>
	return __c;
 8009006:	7a3b      	ldrb	r3, [r7, #8]
 8009008:	e00a      	b.n	8009020 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x54>
      return __detail::__synth3way(__x.second, __y.second);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f103 0108 	add.w	r1, r3, #8
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	461a      	mov	r2, r3
 8009016:	4804      	ldr	r0, [pc, #16]	; (8009028 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 8009018:	f7fe ffbe 	bl	8007f98 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 800901c:	4603      	mov	r3, r0
 800901e:	bf00      	nop
    }
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	08013e80 	.word	0x08013e80

0800902c <_ZSt7forwardISt4pairI3PinS1_EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <_ZNSt5tupleIJOSt4pairI3PinS1_EEEC1IJS2_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8009042:	b590      	push	{r4, r7, lr}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 800904c:	687c      	ldr	r4, [r7, #4]
 800904e:	6838      	ldr	r0, [r7, #0]
 8009050:	f7ff ffec 	bl	800902c <_ZSt7forwardISt4pairI3PinS1_EEOT_RNSt16remove_referenceIS3_E4typeE>
 8009054:	4603      	mov	r3, r0
 8009056:	4619      	mov	r1, r3
 8009058:	4620      	mov	r0, r4
 800905a:	f000 ff49 	bl	8009ef0 <_ZNSt11_Tuple_implILj0EJOSt4pairI3PinS1_EEEC1IS2_EEOT_>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	bd90      	pop	{r4, r7, pc}

08009068 <_ZSt7forwardISt5tupleIJOSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800907e:	b5b0      	push	{r4, r5, r7, lr}
 8009080:	b088      	sub	sp, #32
 8009082:	af02      	add	r7, sp, #8
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 ff42 	bl	8009f16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 8009092:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8009094:	68b8      	ldr	r0, [r7, #8]
 8009096:	f7ff fada 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800909a:	4604      	mov	r4, r0
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff ffe3 	bl	8009068 <_ZSt7forwardISt5tupleIJOSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80090a2:	4605      	mov	r5, r0
 80090a4:	6838      	ldr	r0, [r7, #0]
 80090a6:	f7ff fae8 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80090aa:	4603      	mov	r3, r0
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	462b      	mov	r3, r5
 80090b0:	4622      	mov	r2, r4
 80090b2:	6979      	ldr	r1, [r7, #20]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 ff3f 	bl	8009f38 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80090ba:	697b      	ldr	r3, [r7, #20]
	}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bdb0      	pop	{r4, r5, r7, pc}

080090c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80090c4:	b590      	push	{r4, r7, lr}
 80090c6:	b08d      	sub	sp, #52	; 0x34
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80090d2:	1d3b      	adds	r3, r7, #4
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 ff5c 	bl	8009f92 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE13_M_const_castEv>
 80090da:	4603      	mov	r3, r0
 80090dc:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80090de:	69bc      	ldr	r4, [r7, #24]
 80090e0:	68b8      	ldr	r0, [r7, #8]
 80090e2:	f000 febc 	bl	8009e5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 80090e6:	4603      	mov	r3, r0
 80090e8:	429c      	cmp	r4, r3
 80090ea:	bf0c      	ite	eq
 80090ec:	2301      	moveq	r3, #1
 80090ee:	2300      	movne	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d030      	beq.n	8009158 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 80090f6:	68b8      	ldr	r0, [r7, #8]
 80090f8:	f000 ff5c 	bl	8009fb4 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 80090fc:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d013      	beq.n	800912a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8009102:	68bc      	ldr	r4, [r7, #8]
 8009104:	68b8      	ldr	r0, [r7, #8]
 8009106:	f000 ff61 	bl	8009fcc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800910a:	4603      	mov	r3, r0
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4618      	mov	r0, r3
 8009110:	f7ff feff 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009114:	4603      	mov	r3, r0
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4619      	mov	r1, r3
 800911a:	4620      	mov	r0, r4
 800911c:	f7fe ff59 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 800912a:	2300      	movs	r3, #0
	  if (size() > 0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00c      	beq.n	800914a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	68b8      	ldr	r0, [r7, #8]
 8009136:	f000 ff49 	bl	8009fcc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800913a:	4602      	mov	r2, r0
 800913c:	f107 031c 	add.w	r3, r7, #28
 8009140:	4619      	mov	r1, r3
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fb95 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8009148:	e0db      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 ff47 	bl	8009fe4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8009156:	e0d4      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8009158:	68bc      	ldr	r4, [r7, #8]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fed8 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009162:	4603      	mov	r3, r0
 8009164:	461a      	mov	r2, r3
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	4620      	mov	r0, r4
 800916a:	f7fe ff32 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d057      	beq.n	8009224 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8009178:	69bc      	ldr	r4, [r7, #24]
 800917a:	68b8      	ldr	r0, [r7, #8]
 800917c:	f000 ffb7 	bl	800a0ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8009180:	4603      	mov	r3, r0
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	429c      	cmp	r4, r3
 8009186:	bf0c      	ite	eq
 8009188:	2301      	moveq	r3, #1
 800918a:	2300      	movne	r3, #0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00d      	beq.n	80091ae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8009192:	68b8      	ldr	r0, [r7, #8]
 8009194:	f000 ffab 	bl	800a0ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8009198:	4604      	mov	r4, r0
 800919a:	68b8      	ldr	r0, [r7, #8]
 800919c:	f000 ffa7 	bl	800a0ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	4621      	mov	r1, r4
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 fc0a 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80091ac:	e0a9      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80091ae:	68bc      	ldr	r4, [r7, #8]
 80091b0:	f107 0314 	add.w	r3, r7, #20
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 ffa6 	bl	800a106 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEmmEv>
 80091ba:	4603      	mov	r3, r0
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fea7 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80091c4:	4603      	mov	r3, r0
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	4619      	mov	r1, r3
 80091ca:	4620      	mov	r0, r4
 80091cc:	f7fe ff01 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01f      	beq.n	8009216 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 ffa5 	bl	800a128 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	bf0c      	ite	eq
 80091e4:	2301      	moveq	r3, #1
 80091e6:	2300      	movne	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 80091ee:	2300      	movs	r3, #0
 80091f0:	623b      	str	r3, [r7, #32]
 80091f2:	f107 0214 	add.w	r2, r7, #20
 80091f6:	f107 0320 	add.w	r3, r7, #32
 80091fa:	4619      	mov	r1, r3
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 fb38 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8009202:	e07e      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8009204:	f107 0218 	add.w	r2, r7, #24
 8009208:	f107 0318 	add.w	r3, r7, #24
 800920c:	4619      	mov	r1, r3
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 fbd6 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8009214:	e075      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fee1 	bl	8009fe4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8009222:	e06e      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8009224:	68bc      	ldr	r4, [r7, #8]
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff fe72 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800922e:	4603      	mov	r3, r0
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	4619      	mov	r1, r3
 8009234:	4620      	mov	r0, r4
 8009236:	f7fe fecc 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d056      	beq.n	80092ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8009244:	69bc      	ldr	r4, [r7, #24]
 8009246:	68b8      	ldr	r0, [r7, #8]
 8009248:	f000 fec0 	bl	8009fcc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800924c:	4603      	mov	r3, r0
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	429c      	cmp	r4, r3
 8009252:	bf0c      	ite	eq
 8009254:	2301      	moveq	r3, #1
 8009256:	2300      	movne	r3, #0
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00c      	beq.n	8009278 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 800925e:	2300      	movs	r3, #0
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
 8009262:	68b8      	ldr	r0, [r7, #8]
 8009264:	f000 feb2 	bl	8009fcc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8009268:	4602      	mov	r2, r0
 800926a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800926e:	4619      	mov	r1, r3
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 fafe 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8009276:	e044      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8009278:	68bc      	ldr	r4, [r7, #8]
 800927a:	f107 0310 	add.w	r3, r7, #16
 800927e:	4618      	mov	r0, r3
 8009280:	f000 ff5e 	bl	800a140 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEppEv>
 8009284:	4603      	mov	r3, r0
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fe42 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800928e:	4603      	mov	r3, r0
 8009290:	461a      	mov	r2, r3
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	4620      	mov	r0, r4
 8009296:	f7fe fe9c 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01f      	beq.n	80092e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 ff40 	bl	800a128 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	bf0c      	ite	eq
 80092ae:	2301      	moveq	r3, #1
 80092b0:	2300      	movne	r3, #0
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 80092b8:	2300      	movs	r3, #0
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80092bc:	f107 0218 	add.w	r2, r7, #24
 80092c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092c4:	4619      	mov	r1, r3
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fad3 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80092cc:	e019      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80092ce:	f107 0210 	add.w	r2, r7, #16
 80092d2:	f107 0310 	add.w	r3, r7, #16
 80092d6:	4619      	mov	r1, r3
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 fb71 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80092de:	e010      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fe7c 	bl	8009fe4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80092ec:	e009      	b.n	8009302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 80092ee:	2300      	movs	r3, #0
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80092f6:	f107 0318 	add.w	r3, r7, #24
 80092fa:	4619      	mov	r1, r3
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 fb9a 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	3734      	adds	r7, #52	; 0x34
 8009306:	46bd      	mov	sp, r7
 8009308:	bd90      	pop	{r4, r7, pc}

0800930a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 ff25 	bl	800a162 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 8009318:	4602      	mov	r2, r0
 800931a:	f107 030c 	add.w	r3, r7, #12
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f000 ff2c 	bl	800a17e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>
 8009326:	4603      	mov	r3, r0
      }
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009330:	b5b0      	push	{r4, r5, r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d117      	bne.n	8009374 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fd8a 	bl	8009e5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 800934a:	4602      	mov	r2, r0
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4293      	cmp	r3, r2
 8009350:	d010      	beq.n	8009374 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8009352:	68fc      	ldr	r4, [r7, #12]
 8009354:	6838      	ldr	r0, [r7, #0]
 8009356:	f7ff ffd8 	bl	800930a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800935a:	4605      	mov	r5, r0
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff fdd8 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009362:	4603      	mov	r3, r0
 8009364:	461a      	mov	r2, r3
 8009366:	4629      	mov	r1, r5
 8009368:	4620      	mov	r0, r4
 800936a:	f7fe fe32 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8009374:	2301      	movs	r3, #1
 8009376:	e000      	b.n	800937a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 8009378:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800937a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8009380:	7df8      	ldrb	r0, [r7, #23]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	f009 ff54 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8009394:	f107 0310 	add.w	r3, r7, #16
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f816 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80093a0:	693b      	ldr	r3, [r7, #16]
    }
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bdb0      	pop	{r4, r5, r7, pc}

080093aa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 feed 	bl	800a196 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fefe 	bl	800a1c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4618      	mov	r0, r3
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
      }
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3304      	adds	r3, #4
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800941a:	b590      	push	{r4, r7, lr}
 800941c:	b087      	sub	sp, #28
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
 8009426:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01b      	beq.n	8009466 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800942e:	68fc      	ldr	r4, [r7, #12]
 8009430:	68b8      	ldr	r0, [r7, #8]
 8009432:	f7ff fa73 	bl	800891c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8009436:	4603      	mov	r3, r0
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	4619      	mov	r1, r3
 800943c:	4620      	mov	r0, r4
 800943e:	f7fe fb58 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8009442:	4603      	mov	r3, r0
 8009444:	f083 0301 	eor.w	r3, r3, #1
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d006      	beq.n	800945c <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	607b      	str	r3, [r7, #4]
 8009452:	68b8      	ldr	r0, [r7, #8]
 8009454:	f000 fec6 	bl	800a1e4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8009458:	60b8      	str	r0, [r7, #8]
 800945a:	e7e5      	b.n	8009428 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 800945c:	68b8      	ldr	r0, [r7, #8]
 800945e:	f000 fecd 	bl	800a1fc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8009462:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8009464:	e7e0      	b.n	8009428 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8009466:	f107 0314 	add.w	r3, r7, #20
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	4618      	mov	r0, r3
 800946e:	f000 f811 	bl	8009494 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8009472:	697b      	ldr	r3, [r7, #20]
    }
 8009474:	4618      	mov	r0, r3
 8009476:	371c      	adds	r7, #28
 8009478:	46bd      	mov	sp, r7
 800947a:	bd90      	pop	{r4, r7, pc}

0800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff fa49 	bl	800891c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 800948a:	4603      	mov	r3, r0
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d00a      	beq.n	80094da <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 feb4 	bl	800a232 <_ZSt11__addressofImEPT_RS0_>
 80094ca:	4603      	mov	r3, r0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 febb 	bl	800a248 <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3304      	adds	r3, #4
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	e7f0      	b.n	80094bc <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xa>
	}
 80094da:	bf00      	nop
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 feaa 	bl	800a25e <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>:
      _M_get_node()
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	auto __ptr = _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff fbd1 	bl	8008cc4 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8009522:	4603      	mov	r3, r0
 8009524:	2101      	movs	r1, #1
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fea5 	bl	800a276 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>
 800952c:	60f8      	str	r0, [r7, #12]
	return std::__to_address(__ptr);
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fec1 	bl	800a2b6 <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>
 8009534:	4603      	mov	r3, r0
      }
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009554:	b590      	push	{r4, r7, lr}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800955e:	6838      	ldr	r0, [r7, #0]
 8009560:	f7ff ffed 	bl	800953e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8009564:	4603      	mov	r3, r0
 8009566:	781c      	ldrb	r4, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4619      	mov	r1, r3
 800956c:	2001      	movs	r0, #1
 800956e:	f7fc f83a 	bl	80055e6 <_ZnwjPv>
 8009572:	4603      	mov	r3, r0
 8009574:	4622      	mov	r2, r4
 8009576:	701a      	strb	r2, [r3, #0]
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	bd90      	pop	{r4, r7, pc}

08009580 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff ffd6 	bl	800953e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8009592:	4603      	mov	r3, r0
 8009594:	4619      	mov	r1, r3
 8009596:	68b8      	ldr	r0, [r7, #8]
 8009598:	f7ff ffdc 	bl	8009554 <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80095a4:	b590      	push	{r4, r7, lr}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fe8c 	bl	800a2cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80095b4:	4604      	mov	r4, r0
 80095b6:	6838      	ldr	r0, [r7, #0]
 80095b8:	f7ff f82c 	bl	8008614 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 80095bc:	4603      	mov	r3, r0
 80095be:	4619      	mov	r1, r3
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 fe8e 	bl	800a2e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd90      	pop	{r4, r7, pc}

080095ce <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fe77 	bl	800a2cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80095de:	4603      	mov	r3, r0
 80095e0:	2201      	movs	r2, #1
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fe88 	bl	800a2fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j>
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fe9a 	bl	800a338 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009616:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800962e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009632:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ffea 	bl	800960e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 800963a:	4603      	mov	r3, r0
 800963c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800963e:	f107 0208 	add.w	r2, r7, #8
 8009642:	f107 030c 	add.w	r3, r7, #12
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f7fb ffd8 	bl	80055fe <_ZSt3minIjERKT_S2_S2_>
 800964e:	4603      	mov	r3, r0
 8009650:	681b      	ldr	r3, [r3, #0]
      }
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	6039      	str	r1, [r7, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800966c:	f7fb ffb3 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d006      	beq.n	8009684 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4618      	mov	r0, r3
 800967c:	f009 fd70 	bl	8013160 <_Znwj>
 8009680:	4603      	mov	r3, r0
 8009682:	e006      	b.n	8009692 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8009684:	2200      	movs	r2, #0
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f001 f92e 	bl	800a8ea <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 800968e:	4603      	mov	r3, r0
 8009690:	bf00      	nop
      { return __a.allocate(__n); }
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <_ZSt18uninitialized_copyIPKmPmET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 fe4e 	bl	800a350 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKmPmEET0_T_S6_S5_>
 80096b4:	4603      	mov	r3, r0
    }
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	68b9      	ldr	r1, [r7, #8]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fe4e 	bl	800a370 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 80096d4:	4603      	mov	r3, r0
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>:
      _M_addr() noexcept
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80096e6:	687b      	ldr	r3, [r7, #4]
      }
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800970c:	b590      	push	{r4, r7, lr}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01b      	beq.n	8009758 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8009720:	68fc      	ldr	r4, [r7, #12]
 8009722:	68b8      	ldr	r0, [r7, #8]
 8009724:	f7ff f8fa 	bl	800891c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8009728:	4603      	mov	r3, r0
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	4619      	mov	r1, r3
 800972e:	4620      	mov	r0, r4
 8009730:	f7fe f9df 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8009734:	4603      	mov	r3, r0
 8009736:	f083 0301 	eor.w	r3, r3, #1
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b00      	cmp	r3, #0
 800973e:	d006      	beq.n	800974e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	607b      	str	r3, [r7, #4]
 8009744:	68b8      	ldr	r0, [r7, #8]
 8009746:	f7fe fe2e 	bl	80083a6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800974a:	60b8      	str	r0, [r7, #8]
 800974c:	e7e5      	b.n	800971a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 800974e:	68b8      	ldr	r0, [r7, #8]
 8009750:	f7fe fe1d 	bl	800838e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009754:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8009756:	e7e0      	b.n	800971a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8009758:	f107 0314 	add.w	r3, r7, #20
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff f92c 	bl	80089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8009764:	697b      	ldr	r3, [r7, #20]
    }
 8009766:	4618      	mov	r0, r3
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	bd90      	pop	{r4, r7, pc}

0800976e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fe12 	bl	800a3a0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>
 800977c:	4603      	mov	r3, r0
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fd8d 	bl	800a2cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2101      	movs	r1, #1
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fdfd 	bl	800a3b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j>
 80097bc:	4603      	mov	r3, r0
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80097c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	4619      	mov	r1, r3
 80097da:	2020      	movs	r0, #32
 80097dc:	f7fb ff03 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 fd73 	bl	800a2cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80097e6:	4604      	mov	r4, r0
 80097e8:	68b8      	ldr	r0, [r7, #8]
 80097ea:	f7fe ff13 	bl	8008614 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 80097ee:	4605      	mov	r5, r0
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7fe ff2c 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80097f6:	4606      	mov	r6, r0
 80097f8:	6838      	ldr	r0, [r7, #0]
 80097fa:	f7fe ff33 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80097fe:	4680      	mov	r8, r0
 8009800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009802:	f7fe ff3a 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009806:	4603      	mov	r3, r0
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	4643      	mov	r3, r8
 800980c:	4632      	mov	r2, r6
 800980e:	4629      	mov	r1, r5
 8009810:	4620      	mov	r0, r4
 8009812:	f000 fe2a 	bl	800a46a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009820 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	f107 030c 	add.w	r3, r7, #12
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff f8c2 	bl	80089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009842:	b480      	push	{r7}
 8009844:	b083      	sub	sp, #12
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3310      	adds	r3, #16
 8009866:	4618      	mov	r0, r3
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fe0b 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800988c:	4603      	mov	r3, r0
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	605a      	str	r2, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800989e:	b590      	push	{r4, r7, lr}
 80098a0:	b08b      	sub	sp, #44	; 0x2c
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80098aa:	68b8      	ldr	r0, [r7, #8]
 80098ac:	f7fd ffd8 	bl	8007860 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 80098b0:	4603      	mov	r3, r0
 80098b2:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80098b4:	68b8      	ldr	r0, [r7, #8]
 80098b6:	f7ff ff1d 	bl	80096f4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 80098ba:	4603      	mov	r3, r0
 80098bc:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d020      	beq.n	800990c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80098ce:	68bc      	ldr	r4, [r7, #8]
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff f822 	bl	800891c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	4620      	mov	r0, r4
 80098e0:	f7fe f907 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80098ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fd56 	bl	80083a6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80098fa:	4603      	mov	r3, r0
 80098fc:	e004      	b.n	8009908 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fd44 	bl	800838e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009906:	4603      	mov	r3, r0
 8009908:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800990a:	e7db      	b.n	80098c4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	f107 0310 	add.w	r3, r7, #16
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff f851 	bl	80089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800991a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800991e:	2b00      	cmp	r3, #0
 8009920:	d01d      	beq.n	800995e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8009922:	68b8      	ldr	r0, [r7, #8]
 8009924:	f000 fdc8 	bl	800a4b8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 8009928:	4603      	mov	r3, r0
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	f107 021c 	add.w	r2, r7, #28
 8009930:	f107 0310 	add.w	r3, r7, #16
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe f8ac 	bl	8007a94 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8009942:	f107 0214 	add.w	r2, r7, #20
 8009946:	f107 0318 	add.w	r3, r7, #24
 800994a:	4619      	mov	r1, r3
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 fdc4 	bl	800a4da <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8009952:	e025      	b.n	80099a0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8009954:	f107 0310 	add.w	r3, r7, #16
 8009958:	4618      	mov	r0, r3
 800995a:	f000 f84a 	bl	80099f2 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800995e:	68bc      	ldr	r4, [r7, #8]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff fd8a 	bl	800947c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009968:	4603      	mov	r3, r0
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	4619      	mov	r1, r3
 800996e:	4620      	mov	r0, r4
 8009970:	f7fe f8bf 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d008      	beq.n	800998c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 800997a:	f107 0214 	add.w	r2, r7, #20
 800997e:	f107 0318 	add.w	r3, r7, #24
 8009982:	4619      	mov	r1, r3
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fda8 	bl	800a4da <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 800998a:	e009      	b.n	80099a0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 800998c:	2300      	movs	r3, #0
 800998e:	623b      	str	r3, [r7, #32]
 8009990:	f107 0220 	add.w	r2, r7, #32
 8009994:	f107 0310 	add.w	r3, r7, #16
 8009998:	4619      	mov	r1, r3
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 f84b 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	372c      	adds	r7, #44	; 0x2c
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd90      	pop	{r4, r7, pc}

080099a8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	330c      	adds	r3, #12
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80099cc:	68b8      	ldr	r0, [r7, #8]
 80099ce:	f000 fd68 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80099d2:	4603      	mov	r3, r0
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fd61 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80099e0:	4603      	mov	r3, r0
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f009 fc15 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8009a04:	4602      	mov	r2, r0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	601a      	str	r2, [r3, #0]
	return *this;
 8009a0a:	687b      	ldr	r3, [r7, #4]
      }
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f009 fc02 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8009a26:	4602      	mov	r2, r0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	601a      	str	r2, [r3, #0]
	return *this;
 8009a2c:	687b      	ldr	r3, [r7, #4]
      }
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8009a42:	68b8      	ldr	r0, [r7, #8]
 8009a44:	f000 fd2d 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	605a      	str	r2, [r3, #4]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <_ZNKSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3310      	adds	r3, #16
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 fd4c 	bl	800a50c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>
 8009a74:	4603      	mov	r3, r0
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <_ZNKSt10_Select1stISt4pairIKhN10PWMservice8InstanceEEEclERKS4_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8009aae:	b480      	push	{r7}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fd34 	bl	800a53c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fd33 	bl	800a552 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2101      	movs	r1, #1
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fd39 	bl	800a568 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j>
 8009af6:	4603      	mov	r3, r0
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	f107 030c 	add.w	r3, r7, #12
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff f8c7 	bl	8008ca6 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009b22:	b480      	push	{r7}
 8009b24:	b083      	sub	sp, #12
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3310      	adds	r3, #16
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009b52:	b590      	push	{r4, r7, lr}
 8009b54:	b08b      	sub	sp, #44	; 0x2c
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8009b5e:	68b8      	ldr	r0, [r7, #8]
 8009b60:	f7ff ff99 	bl	8009a96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8009b64:	4603      	mov	r3, r0
 8009b66:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8009b68:	68b8      	ldr	r0, [r7, #8]
 8009b6a:	f7ff ffa0 	bl	8009aae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d020      	beq.n	8009bc0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8009b82:	68bc      	ldr	r4, [r7, #8]
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff f869 	bl	8008c5e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7fe f833 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8009b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fcbb 	bl	800a524 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	e004      	b.n	8009bbc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f86e 	bl	8009c96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8009bbe:	e7db      	b.n	8009b78 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	f107 0310 	add.w	r3, r7, #16
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff f86c 	bl	8008ca6 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8009bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01d      	beq.n	8009c12 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8009bd6:	68b8      	ldr	r0, [r7, #8]
 8009bd8:	f000 fce9 	bl	800a5ae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	f107 021c 	add.w	r2, r7, #28
 8009be4:	f107 0310 	add.w	r3, r7, #16
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fd fff3 	bl	8007bd6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d008      	beq.n	8009c08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8009bf6:	f107 0214 	add.w	r2, r7, #20
 8009bfa:	f107 0318 	add.w	r3, r7, #24
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fce5 	bl	800a5d0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8009c06:	e025      	b.n	8009c54 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8009c08:	f107 0310 	add.w	r3, r7, #16
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 f831 	bl	8009c74 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8009c12:	68bc      	ldr	r4, [r7, #8]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fcb1 	bl	800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4619      	mov	r1, r3
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7fd ffeb 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8009c2e:	f107 0214 	add.w	r2, r7, #20
 8009c32:	f107 0318 	add.w	r3, r7, #24
 8009c36:	4619      	mov	r1, r3
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fcc9 	bl	800a5d0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8009c3e:	e009      	b.n	8009c54 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8009c40:	2300      	movs	r3, #0
 8009c42:	623b      	str	r3, [r7, #32]
 8009c44:	f107 0220 	add.w	r2, r7, #32
 8009c48:	f107 0310 	add.w	r3, r7, #16
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fef1 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	372c      	adds	r7, #44	; 0x2c
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd90      	pop	{r4, r7, pc}

08009c5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	330c      	adds	r3, #12
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f009 fad4 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8009c86:	4602      	mov	r2, r0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	601a      	str	r2, [r3, #0]
	return *this;
 8009c8c:	687b      	ldr	r3, [r7, #4]
      }
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f009 fab5 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	601a      	str	r2, [r3, #0]
	return *this;
 8009cc6:	687b      	ldr	r3, [r7, #4]
      }
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3310      	adds	r3, #16
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fc90 	bl	800a602 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fc1f 	bl	800a552 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8009d14:	4604      	mov	r4, r0
 8009d16:	6838      	ldr	r0, [r7, #0]
 8009d18:	f7fe fe70 	bl	80089fc <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fc7a 	bl	800a61a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd90      	pop	{r4, r7, pc}

08009d2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fc0a 	bl	800a552 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2201      	movs	r2, #1
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 fc74 	bl	800a632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j>
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <_ZSt10destroy_atIhEvPT_>:
    destroy_at(_Tp* __location)
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
    }
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fc7e 	bl	800a670 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4618      	mov	r0, r3
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b088      	sub	sp, #32
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	61fb      	str	r3, [r7, #28]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	61bb      	str	r3, [r7, #24]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009d96:	f7fb fc1e 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f009 f9d9 	bl	8013158 <_ZdlPv>
	    return;
 8009da6:	e005      	b.n	8009db4 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	69b9      	ldr	r1, [r7, #24]
 8009dac:	69f8      	ldr	r0, [r7, #28]
 8009dae:	f000 fe82 	bl	800aab6 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fd fde9 	bl	800799e <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fc29 	bl	8009626 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 fc47 	bl	800a686 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8009df8:	4603      	mov	r3, r0
      }
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
    }
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009e76:	b590      	push	{r4, r7, lr}
 8009e78:	b087      	sub	sp, #28
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
 8009e82:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d01b      	beq.n	8009ec2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8009e8a:	68fc      	ldr	r4, [r7, #12]
 8009e8c:	68b8      	ldr	r0, [r7, #8]
 8009e8e:	f7ff fa3c 	bl	800930a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009e92:	4603      	mov	r3, r0
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	4619      	mov	r1, r3
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7fe f89a 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f083 0301 	eor.w	r3, r3, #1
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	607b      	str	r3, [r7, #4]
 8009eae:	68b8      	ldr	r0, [r7, #8]
 8009eb0:	f000 fc06 	bl	800a6c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009eb4:	60b8      	str	r0, [r7, #8]
 8009eb6:	e7e5      	b.n	8009e84 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8009eb8:	68b8      	ldr	r0, [r7, #8]
 8009eba:	f000 f935 	bl	800a128 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009ebe:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8009ec0:	e7e0      	b.n	8009e84 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8009ec2:	f107 0314 	add.w	r3, r7, #20
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7ff fa7f 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8009ece:	697b      	ldr	r3, [r7, #20]
    }
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd90      	pop	{r4, r7, pc}

08009ed8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fbf9 	bl	800a6d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <_ZNSt11_Tuple_implILj0EJOSt4pairI3PinS1_EEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8009efa:	687c      	ldr	r4, [r7, #4]
 8009efc:	6838      	ldr	r0, [r7, #0]
 8009efe:	f7ff f895 	bl	800902c <_ZSt7forwardISt4pairI3PinS1_EEOT_RNSt16remove_referenceIS3_E4typeE>
 8009f02:	4603      	mov	r3, r0
 8009f04:	4619      	mov	r1, r3
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 fbf1 	bl	800a6ee <_ZNSt10_Head_baseILj0EOSt4pairI3PinS1_ELb0EEC1IS2_EEOT_>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd90      	pop	{r4, r7, pc}

08009f16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fbf5 	bl	800a70e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2101      	movs	r1, #1
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fbfb 	bl	800a724 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS2_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8009f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f3c:	b086      	sub	sp, #24
 8009f3e:	af02      	add	r7, sp, #8
 8009f40:	60f8      	str	r0, [r7, #12]
 8009f42:	60b9      	str	r1, [r7, #8]
 8009f44:	607a      	str	r2, [r7, #4]
 8009f46:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	202c      	movs	r0, #44	; 0x2c
 8009f4e:	f7fb fb4a 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 fbdb 	bl	800a70e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8009f58:	4604      	mov	r4, r0
 8009f5a:	68b8      	ldr	r0, [r7, #8]
 8009f5c:	f7ff f827 	bl	8008fae <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 8009f60:	4605      	mov	r5, r0
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7fe fb73 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009f68:	4606      	mov	r6, r0
 8009f6a:	6838      	ldr	r0, [r7, #0]
 8009f6c:	f7ff f87c 	bl	8009068 <_ZSt7forwardISt5tupleIJOSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009f70:	4680      	mov	r8, r0
 8009f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f74:	f7fe fb81 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	4643      	mov	r3, r8
 8009f7e:	4632      	mov	r2, r6
 8009f80:	4629      	mov	r1, r5
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fc2a 	bl	800a7dc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f92 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	f107 030c 	add.w	r3, r7, #12
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff fa11 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3310      	adds	r3, #16
 8009fd8:	4618      	mov	r0, r3
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009fe4:	b590      	push	{r4, r7, lr}
 8009fe6:	b08b      	sub	sp, #44	; 0x2c
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8009ff0:	68b8      	ldr	r0, [r7, #8]
 8009ff2:	f7ff ff28 	bl	8009e46 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8009ffa:	68b8      	ldr	r0, [r7, #8]
 8009ffc:	f7ff ff2f 	bl	8009e5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 800a000:	4603      	mov	r3, r0
 800a002:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a004:	2301      	movs	r3, #1
 800a006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d020      	beq.n	800a052 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a014:	68bc      	ldr	r4, [r7, #8]
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff f976 	bl	800930a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a01e:	4603      	mov	r3, r0
 800a020:	461a      	mov	r2, r3
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4620      	mov	r0, r4
 800a026:	f7fd ffd4 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800a02a:	4603      	mov	r3, r0
 800a02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 fb40 	bl	800a6c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a040:	4603      	mov	r3, r0
 800a042:	e004      	b.n	800a04e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 f86e 	bl	800a128 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a04c:	4603      	mov	r3, r0
 800a04e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a050:	e7db      	b.n	800a00a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	f107 0310 	add.w	r3, r7, #16
 800a058:	4611      	mov	r1, r2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7ff f9b6 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01d      	beq.n	800a0a4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 800a068:	68b8      	ldr	r0, [r7, #8]
 800a06a:	f000 fbd3 	bl	800a814 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 800a06e:	4603      	mov	r3, r0
 800a070:	61fb      	str	r3, [r7, #28]
 800a072:	f107 021c 	add.w	r2, r7, #28
 800a076:	f107 0310 	add.w	r3, r7, #16
 800a07a:	4611      	mov	r1, r2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fd ff5c 	bl	8007f3a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d008      	beq.n	800a09a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 800a088:	f107 0214 	add.w	r2, r7, #20
 800a08c:	f107 0318 	add.w	r3, r7, #24
 800a090:	4619      	mov	r1, r3
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 fbcf 	bl	800a836 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 800a098:	e025      	b.n	800a0e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 800a09a:	f107 0310 	add.w	r3, r7, #16
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f831 	bl	800a106 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a0a4:	68bc      	ldr	r4, [r7, #8]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe ff32 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f7fd ff8c 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d008      	beq.n	800a0d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 800a0c0:	f107 0214 	add.w	r2, r7, #20
 800a0c4:	f107 0318 	add.w	r3, r7, #24
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fbb3 	bl	800a836 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 800a0d0:	e009      	b.n	800a0e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	623b      	str	r3, [r7, #32]
 800a0d6:	f107 0220 	add.w	r2, r7, #32
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7ff fca8 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	372c      	adds	r7, #44	; 0x2c
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd90      	pop	{r4, r7, pc}

0800a0ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	330c      	adds	r3, #12
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f009 f88b 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800a118:	4602      	mov	r2, r0
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
	return *this;
 800a11e:	687b      	ldr	r3, [r7, #4]
      }
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	4618      	mov	r0, r3
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f009 f86c 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800a152:	4602      	mov	r2, r0
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	601a      	str	r2, [r3, #0]
	return *this;
 800a158:	687b      	ldr	r3, [r7, #4]
      }
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3310      	adds	r3, #16
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 fb7a 	bl	800a868 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>
 800a174:	4603      	mov	r3, r0
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>:
      operator()(const _Pair& __x) const
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a196:	b590      	push	{r4, r7, lr}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fab4 	bl	800a70e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	6838      	ldr	r0, [r7, #0]
 800a1aa:	f7fe ff00 	bl	8008fae <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fb64 	bl	800a880 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd90      	pop	{r4, r7, pc}

0800a1c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fa9f 	bl	800a70e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fb5e 	bl	800a898 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j>
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4619      	mov	r1, r3
 800a226:	68b8      	ldr	r0, [r7, #8]
 800a228:	f008 ff98 	bl	801315c <_ZdlPvj>
      }
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fdd6 	bl	8009e02 <_ZSt10destroy_atImEvPT_>
    }
 800a256:	bf00      	nop
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a288:	f7fb f9a5 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d006      	beq.n	800a2a0 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	4618      	mov	r0, r3
 800a298:	f008 ff62 	bl	8013160 <_Znwj>
 800a29c:	4603      	mov	r3, r0
 800a29e:	e006      	b.n	800a2ae <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 fcac 	bl	800ac02 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	bf00      	nop
      { return __a.allocate(__n); }
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800a2be:	687b      	ldr	r3, [r7, #4]
    }
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a2ec:	6838      	ldr	r0, [r7, #0]
 800a2ee:	f000 faf2 	bl	800a8d6 <_ZSt10destroy_atISt4pairIKhN10PWMservice8InstanceEEEvPT_>
	}
 800a2f2:	bf00      	nop
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b088      	sub	sp, #32
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	61fb      	str	r3, [r7, #28]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a312:	f7fb f960 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800a31c:	69b8      	ldr	r0, [r7, #24]
 800a31e:	f008 ff1b 	bl	8013158 <_ZdlPv>
	    return;
 800a322:	e005      	b.n	800a330 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	69b9      	ldr	r1, [r7, #24]
 800a328:	69f8      	ldr	r0, [r7, #28]
 800a32a:	f000 fc89 	bl	800ac40 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800a32e:	bf00      	nop
 800a330:	bf00      	nop
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>:
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKmPmEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	68b9      	ldr	r1, [r7, #8]
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fae1 	bl	800a928 <_ZSt4copyIPKmPmET0_T_S4_S3_>
 800a366:	4603      	mov	r3, r0
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 faeb 	bl	800a958 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 800a382:	4604      	mov	r4, r0
 800a384:	68b8      	ldr	r0, [r7, #8]
 800a386:	f000 fae7 	bl	800a958 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 800a38a:	4603      	mov	r3, r0
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	4619      	mov	r1, r3
 800a390:	4620      	mov	r0, r4
 800a392:	f000 faec 	bl	800a96e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>
 800a396:	4603      	mov	r3, r0
    }
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd90      	pop	{r4, r7, pc}

0800a3a0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a3c8:	f7fb f905 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	015b      	lsls	r3, r3, #5
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f008 fec2 	bl	8013160 <_Znwj>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	e006      	b.n	800a3ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 fc9e 	bl	800ad26 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE8allocateEjPKv>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	bf00      	nop
      { return __a.allocate(__n); }
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <_ZNSt5tupleIJRKhEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fad4 	bl	800a9b4 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <_ZSt12construct_atISt4pairIKhN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a416:	b5b0      	push	{r4, r5, r7, lr}
 800a418:	b088      	sub	sp, #32
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	607a      	str	r2, [r7, #4]
 800a422:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a424:	68b8      	ldr	r0, [r7, #8]
 800a426:	f7fe f912 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7fe f91a 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a430:	4602      	mov	r2, r0
 800a432:	f107 0318 	add.w	r3, r7, #24
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff ffdc 	bl	800a3f6 <_ZNSt5tupleIJRKhEEC1EOS2_>
 800a43e:	f107 0418 	add.w	r4, r7, #24
 800a442:	6838      	ldr	r0, [r7, #0]
 800a444:	f7fe f919 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4619      	mov	r1, r3
 800a44c:	2010      	movs	r0, #16
 800a44e:	f7fb f8ca 	bl	80055e6 <_ZnwjPv>
 800a452:	4605      	mov	r5, r0
 800a454:	7f3b      	ldrb	r3, [r7, #28]
 800a456:	4622      	mov	r2, r4
 800a458:	7d39      	ldrb	r1, [r7, #20]
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 fae1 	bl	800aa22 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 800a460:	462b      	mov	r3, r5
 800a462:	4618      	mov	r0, r3
 800a464:	3720      	adds	r7, #32
 800a466:	46bd      	mov	sp, r7
 800a468:	bdb0      	pop	{r4, r5, r7, pc}

0800a46a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a46a:	b5b0      	push	{r4, r5, r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
 800a476:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7fe f8e8 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a47e:	4604      	mov	r4, r0
 800a480:	6838      	ldr	r0, [r7, #0]
 800a482:	f7fe f8ef 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a486:	4605      	mov	r5, r0
 800a488:	6a38      	ldr	r0, [r7, #32]
 800a48a:	f7fe f8f6 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a48e:	4603      	mov	r3, r0
 800a490:	462a      	mov	r2, r5
 800a492:	4621      	mov	r1, r4
 800a494:	68b8      	ldr	r0, [r7, #8]
 800a496:	f7ff ffbe 	bl	800a416 <_ZSt12construct_atISt4pairIKhN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bdb0      	pop	{r4, r5, r7, pc}

0800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	f107 030c 	add.w	r3, r7, #12
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fa76 	bl	80089bc <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800a4e6:	68b8      	ldr	r0, [r7, #8]
 800a4e8:	f000 faaf 	bl	800aa4a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff ffd4 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 faa3 	bl	800aa60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>
 800a51a:	4603      	mov	r3, r0
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a57a:	f7fb f82c 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	4413      	add	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4618      	mov	r0, r3
 800a590:	f008 fde6 	bl	8013160 <_Znwj>
 800a594:	4603      	mov	r3, r0
 800a596:	e006      	b.n	800a5a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a598:	2200      	movs	r2, #0
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f000 fbfb 	bl	800ad98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE8allocateEjPKv>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	bf00      	nop
      { return __a.allocate(__n); }
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fe fb70 	bl	8008ca6 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800a5dc:	68b8      	ldr	r0, [r7, #8]
 800a5de:	f000 fa4a 	bl	800aa76 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff ff59 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	605a      	str	r2, [r3, #4]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fa3e 	bl	800aa8c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>
 800a610:	4603      	mov	r3, r0
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a624:	6838      	ldr	r0, [r7, #0]
 800a626:	f000 fa3c 	bl	800aaa2 <_ZSt10destroy_atISt4pairIK3PinN10PWMservice8InstanceEEEvPT_>
	}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a632:	b580      	push	{r7, lr}
 800a634:	b088      	sub	sp, #32
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	61fb      	str	r3, [r7, #28]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	61bb      	str	r3, [r7, #24]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a64a:	f7fa ffc4 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800a654:	69b8      	ldr	r0, [r7, #24]
 800a656:	f008 fd7f 	bl	8013158 <_ZdlPv>
	    return;
 800a65a:	e005      	b.n	800a668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	69b9      	ldr	r1, [r7, #24]
 800a660:	69f8      	ldr	r0, [r7, #28]
 800a662:	f000 fbbb 	bl	800addc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 800a666:	bf00      	nop
 800a668:	bf00      	nop
 800a66a:	3720      	adds	r7, #32
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800a686:	b5b0      	push	{r4, r5, r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	607a      	str	r2, [r7, #4]
 800a692:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 fa1d 	bl	800aad4 <_ZSt12__niter_baseIPmET_S1_>
 800a69a:	4604      	mov	r4, r0
 800a69c:	68b8      	ldr	r0, [r7, #8]
 800a69e:	f000 fa19 	bl	800aad4 <_ZSt12__niter_baseIPmET_S1_>
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fa15 	bl	800aad4 <_ZSt12__niter_baseIPmET_S1_>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 fa1a 	bl	800aaea <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 800a6b6:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bdb0      	pop	{r4, r5, r7, pc}

0800a6c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <_ZNSt10_Head_baseILj0EOSt4pairI3PinS1_ELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a6f8:	6838      	ldr	r0, [r7, #0]
 800a6fa:	f7fe fc97 	bl	800902c <_ZSt7forwardISt4pairI3PinS1_EEOT_RNSt16remove_referenceIS3_E4typeE>
 800a6fe:	4602      	mov	r2, r0
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a736:	f7fa ff4e 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d008      	beq.n	800a752 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	222c      	movs	r2, #44	; 0x2c
 800a744:	fb02 f303 	mul.w	r3, r2, r3
 800a748:	4618      	mov	r0, r3
 800a74a:	f008 fd09 	bl	8013160 <_Znwj>
 800a74e:	4603      	mov	r3, r0
 800a750:	e006      	b.n	800a760 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a752:	2200      	movs	r2, #0
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 fb52 	bl	800ae00 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE8allocateEjPKv>
 800a75c:	4603      	mov	r3, r0
 800a75e:	bf00      	nop
      { return __a.allocate(__n); }
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <_ZNSt5tupleIJOSt4pairI3PinS1_EEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 f9d4 	bl	800ab26 <_ZNSt11_Tuple_implILj0EJOSt4pairI3PinS1_EEEC1EOS4_>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a788:	b5b0      	push	{r4, r5, r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a796:	68b8      	ldr	r0, [r7, #8]
 800a798:	f7fd ff59 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7fe fc63 	bl	8009068 <_ZSt7forwardISt5tupleIJOSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	f107 0318 	add.w	r3, r7, #24
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff ffdc 	bl	800a768 <_ZNSt5tupleIJOSt4pairI3PinS1_EEEC1EOS4_>
 800a7b0:	f107 0418 	add.w	r4, r7, #24
 800a7b4:	6838      	ldr	r0, [r7, #0]
 800a7b6:	f7fd ff60 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	201c      	movs	r0, #28
 800a7c0:	f7fa ff11 	bl	80055e6 <_ZnwjPv>
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	7f3b      	ldrb	r3, [r7, #28]
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	7d39      	ldrb	r1, [r7, #20]
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 f9e4 	bl	800ab9a <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3720      	adds	r7, #32
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bdb0      	pop	{r4, r5, r7, pc}

0800a7dc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a7dc:	b5b0      	push	{r4, r5, r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7fd ff2f 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	6838      	ldr	r0, [r7, #0]
 800a7f4:	f7fe fc38 	bl	8009068 <_ZSt7forwardISt5tupleIJOSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	6a38      	ldr	r0, [r7, #32]
 800a7fc:	f7fd ff3d 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a800:	4603      	mov	r3, r0
 800a802:	462a      	mov	r2, r5
 800a804:	4621      	mov	r1, r4
 800a806:	68b8      	ldr	r0, [r7, #8]
 800a808:	f7ff ffbe 	bl	800a788 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bdb0      	pop	{r4, r5, r7, pc}

0800a814 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	f107 030c 	add.w	r3, r7, #12
 800a824:	4611      	mov	r1, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fdd0 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800a842:	68b8      	ldr	r0, [r7, #8]
 800a844:	f000 f9bd 	bl	800abc2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800a848:	4603      	mov	r3, r0
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff fe26 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800a856:	4603      	mov	r3, r0
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	605a      	str	r2, [r3, #4]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f9b1 	bl	800abd8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>
 800a876:	4603      	mov	r3, r0
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a88a:	6838      	ldr	r0, [r7, #0]
 800a88c:	f000 f9af 	bl	800abee <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEvPT_>
	}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	61bb      	str	r3, [r7, #24]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a8b0:	f7fa fe91 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800a8ba:	69b8      	ldr	r0, [r7, #24]
 800a8bc:	f008 fc4c 	bl	8013158 <_ZdlPv>
	    return;
 800a8c0:	e005      	b.n	800a8ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	69b9      	ldr	r1, [r7, #24]
 800a8c6:	69f8      	ldr	r0, [r7, #28]
 800a8c8:	f000 fae0 	bl	800ae8c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800a8cc:	bf00      	nop
 800a8ce:	bf00      	nop
 800a8d0:	3720      	adds	r7, #32
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <_ZSt10destroy_atISt4pairIKhN10PWMservice8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
    }
 800a8de:	bf00      	nop
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f9b1 	bl	800ac5e <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	4293      	cmp	r3, r2
 800a902:	bf8c      	ite	hi
 800a904:	2301      	movhi	r3, #1
 800a906:	2300      	movls	r3, #0
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a90e:	f008 fceb 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4618      	mov	r0, r3
 800a918:	f008 fc22 	bl	8013160 <_Znwj>
 800a91c:	4603      	mov	r3, r0
 800a91e:	bf00      	nop
      }
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <_ZSt4copyIPKmPmET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800a928:	b590      	push	{r4, r7, lr}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 f99e 	bl	800ac76 <_ZSt12__miter_baseIPKmET_S2_>
 800a93a:	4604      	mov	r4, r0
 800a93c:	68b8      	ldr	r0, [r7, #8]
 800a93e:	f000 f99a 	bl	800ac76 <_ZSt12__miter_baseIPKmET_S2_>
 800a942:	4603      	mov	r3, r0
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	4619      	mov	r1, r3
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 f99f 	bl	800ac8c <_ZSt13__copy_move_aILb0EPKmPmET1_T0_S4_S3_>
 800a94e:	4603      	mov	r3, r0
    }
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	bd90      	pop	{r4, r7, pc}

0800a958 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4618      	mov	r0, r3
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800a96e:	b5b0      	push	{r4, r5, r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 f9a9 	bl	800acd2 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800a980:	4604      	mov	r4, r0
 800a982:	68b8      	ldr	r0, [r7, #8]
 800a984:	f000 f9a5 	bl	800acd2 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800a988:	4605      	mov	r5, r0
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 f8a1 	bl	800aad4 <_ZSt12__niter_baseIPmET_S1_>
 800a992:	4603      	mov	r3, r0
 800a994:	461a      	mov	r2, r3
 800a996:	4629      	mov	r1, r5
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 f9a8 	bl	800acee <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	1d3b      	adds	r3, r7, #4
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 f9b2 	bl	800ad0e <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 800a9aa:	4603      	mov	r3, r0
    }
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a9b4 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800a9b4:	b590      	push	{r4, r7, lr}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800a9be:	687c      	ldr	r4, [r7, #4]
 800a9c0:	6838      	ldr	r0, [r7, #0]
 800a9c2:	f000 f9cf 	bl	800ad64 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fe fdb8 	bl	800953e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7fe fed7 	bl	8009786 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd90      	pop	{r4, r7, pc}

0800a9e2 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
 800a9ee:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800a9f0:	68b8      	ldr	r0, [r7, #8]
 800a9f2:	f000 f9c4 	bl	800ad7e <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe fda0 	bl	800953e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800a9fe:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800aa00:	781a      	ldrb	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	605a      	str	r2, [r3, #4]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	609a      	str	r2, [r3, #8]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	731a      	strb	r2, [r3, #12]
      { }
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 800aa22:	b5b0      	push	{r4, r5, r7, lr}
 800aa24:	b086      	sub	sp, #24
 800aa26:	af02      	add	r7, sp, #8
 800aa28:	60f8      	str	r0, [r7, #12]
 800aa2a:	7239      	strb	r1, [r7, #8]
 800aa2c:	607a      	str	r2, [r7, #4]
 800aa2e:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800aa30:	463a      	mov	r2, r7
 800aa32:	f88d 4000 	strb.w	r4, [sp]
 800aa36:	462b      	mov	r3, r5
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7ff ffd1 	bl	800a9e2 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bdb0      	pop	{r4, r5, r7, pc}

0800aa4a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4618      	mov	r0, r3
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800aa76:	b480      	push	{r7}
 800aa78:	b083      	sub	sp, #12
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4618      	mov	r0, r3
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <_ZSt10destroy_atISt4pairIK3PinN10PWMservice8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
    }
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	4619      	mov	r1, r3
 800aac8:	68b8      	ldr	r0, [r7, #8]
 800aaca:	f008 fb47 	bl	801315c <_ZdlPvj>
      }
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
    { return __it; }
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b086      	sub	sp, #24
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	60f8      	str	r0, [r7, #12]
 800aaf2:	60b9      	str	r1, [r7, #8]
 800aaf4:	607a      	str	r2, [r7, #4]
 800aaf6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	109b      	asrs	r3, r3, #2
 800ab00:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dd06      	ble.n	800ab16 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f008 fc91 	bl	8013438 <memmove>
      return __result + __count;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4413      	add	r3, r2
    }
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3718      	adds	r7, #24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <_ZNSt11_Tuple_implILj0EJOSt4pairI3PinS1_EEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800ab26:	b590      	push	{r4, r7, lr}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800ab30:	687c      	ldr	r4, [r7, #4]
 800ab32:	6838      	ldr	r0, [r7, #0]
 800ab34:	f000 f985 	bl	800ae42 <_ZNSt11_Tuple_implILj0EJOSt4pairI3PinS1_EEE7_M_headERS4_>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f98e 	bl	800ae5c <_ZSt7forwardIOSt4pairI3PinS1_EEOT_RNSt16remove_referenceIS4_E4typeE>
 800ab40:	4603      	mov	r3, r0
 800ab42:	4619      	mov	r1, r3
 800ab44:	4620      	mov	r0, r4
 800ab46:	f7ff fdd2 	bl	800a6ee <_ZNSt10_Head_baseILj0EOSt4pairI3PinS1_ELb0EEC1IS2_EEOT_>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd90      	pop	{r4, r7, pc}

0800ab54 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800ab54:	b590      	push	{r4, r7, lr}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800ab62:	68b8      	ldr	r0, [r7, #8]
 800ab64:	f000 f985 	bl	800ae72 <_ZSt3getILj0EJOSt4pairI3PinS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f976 	bl	800ae5c <_ZSt7forwardIOSt4pairI3PinS1_EEOT_RNSt16remove_referenceIS4_E4typeE>
 800ab70:	4602      	mov	r2, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	461c      	mov	r4, r3
 800ab76:	4613      	mov	r3, r2
 800ab78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	611a      	str	r2, [r3, #16]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	615a      	str	r2, [r3, #20]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	761a      	strb	r2, [r3, #24]
      { }
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd90      	pop	{r4, r7, pc}

0800ab9a <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800ab9a:	b5b0      	push	{r4, r5, r7, lr}
 800ab9c:	b086      	sub	sp, #24
 800ab9e:	af02      	add	r7, sp, #8
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	7239      	strb	r1, [r7, #8]
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800aba8:	463a      	mov	r2, r7
 800abaa:	f88d 4000 	strb.w	r4, [sp]
 800abae:	462b      	mov	r3, r5
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7ff ffce 	bl	800ab54 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bdb0      	pop	{r4, r5, r7, pc}

0800abc2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4618      	mov	r0, r3
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
    }
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 f94d 	bl	800aeae <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>
 800ac14:	4602      	mov	r2, r0
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	bf8c      	ite	hi
 800ac1c:	2301      	movhi	r3, #1
 800ac1e:	2300      	movls	r3, #0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ac26:	f008 fb5f 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	00db      	lsls	r3, r3, #3
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f008 fa96 	bl	8013160 <_Znwj>
 800ac34:	4603      	mov	r3, r0
 800ac36:	bf00      	nop
      }
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	015b      	lsls	r3, r3, #5
 800ac50:	4619      	mov	r1, r3
 800ac52:	68b8      	ldr	r0, [r7, #8]
 800ac54:	f008 fa82 	bl	801315c <_ZdlPvj>
      }
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ac66:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <_ZSt12__miter_baseIPKmET_S2_>:
    __miter_base(_Iterator __it)
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <_ZSt13__copy_move_aILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ac8c:	b5b0      	push	{r4, r5, r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 f914 	bl	800aec6 <_ZSt12__niter_baseIPKmET_S2_>
 800ac9e:	4604      	mov	r4, r0
 800aca0:	68b8      	ldr	r0, [r7, #8]
 800aca2:	f000 f910 	bl	800aec6 <_ZSt12__niter_baseIPKmET_S2_>
 800aca6:	4605      	mov	r5, r0
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4618      	mov	r0, r3
 800acac:	f7ff ff12 	bl	800aad4 <_ZSt12__niter_baseIPmET_S1_>
 800acb0:	4603      	mov	r3, r0
 800acb2:	461a      	mov	r2, r3
 800acb4:	4629      	mov	r1, r5
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 f819 	bl	800acee <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 800acbc:	4602      	mov	r2, r0
 800acbe:	1d3b      	adds	r3, r7, #4
 800acc0:	4611      	mov	r1, r2
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 f823 	bl	800ad0e <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 800acc8:	4603      	mov	r3, r0
    }
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bdb0      	pop	{r4, r5, r7, pc}

0800acd2 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800acda:	1d3b      	adds	r3, r7, #4
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f8fd 	bl	800aedc <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>
 800ace2:	4603      	mov	r3, r0
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60f8      	str	r0, [r7, #12]
 800acf6:	60b9      	str	r1, [r7, #8]
 800acf8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	68b9      	ldr	r1, [r7, #8]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 f8f7 	bl	800aef2 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>
 800ad04:	4603      	mov	r3, r0
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
    { return __res; }
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 f8fa 	bl	800af2c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE11_M_max_sizeEv>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	bf8c      	ite	hi
 800ad40:	2301      	movhi	r3, #1
 800ad42:	2300      	movls	r3, #0
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ad4a:	f008 facd 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	015b      	lsls	r3, r3, #5
 800ad52:	4618      	mov	r0, r3
 800ad54:	f008 fa04 	bl	8013160 <_Znwj>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	bf00      	nop
      }
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 f8e8 	bl	800af44 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>
 800ad74:	4603      	mov	r3, r0
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f8e7 	bl	800af5c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	4618      	mov	r0, r3
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 f8e5 	bl	800af74 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE11_M_max_sizeEv>
 800adaa:	4602      	mov	r2, r0
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	4293      	cmp	r3, r2
 800adb0:	bf8c      	ite	hi
 800adb2:	2301      	movhi	r3, #1
 800adb4:	2300      	movls	r3, #0
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800adbc:	f008 fa94 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	4613      	mov	r3, r2
 800adc4:	00db      	lsls	r3, r3, #3
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4618      	mov	r0, r3
 800adcc:	f008 f9c8 	bl	8013160 <_Znwj>
 800add0:	4603      	mov	r3, r0
 800add2:	bf00      	nop
      }
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	00db      	lsls	r3, r3, #3
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4619      	mov	r1, r3
 800adf4:	68b8      	ldr	r0, [r7, #8]
 800adf6:	f008 f9b1 	bl	801315c <_ZdlPvj>
      }
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f8bf 	bl	800af90 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE11_M_max_sizeEv>
 800ae12:	4602      	mov	r2, r0
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4293      	cmp	r3, r2
 800ae18:	bf8c      	ite	hi
 800ae1a:	2301      	movhi	r3, #1
 800ae1c:	2300      	movls	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ae24:	f008 fa60 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	222c      	movs	r2, #44	; 0x2c
 800ae2c:	fb02 f303 	mul.w	r3, r2, r3
 800ae30:	4618      	mov	r0, r3
 800ae32:	f008 f995 	bl	8013160 <_Znwj>
 800ae36:	4603      	mov	r3, r0
 800ae38:	bf00      	nop
      }
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <_ZNSt11_Tuple_implILj0EJOSt4pairI3PinS1_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 f8ad 	bl	800afac <_ZNSt10_Head_baseILj0EOSt4pairI3PinS1_ELb0EE7_M_headERS4_>
 800ae52:	4603      	mov	r3, r0
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <_ZSt7forwardIOSt4pairI3PinS1_EEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4618      	mov	r0, r3
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <_ZSt3getILj0EJOSt4pairI3PinS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f8a1 	bl	800afc4 <_ZSt12__get_helperILj0EOSt4pairI3PinS1_EJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ae82:	4603      	mov	r3, r0
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	222c      	movs	r2, #44	; 0x2c
 800ae9c:	fb02 f303 	mul.w	r3, r2, r3
 800aea0:	4619      	mov	r1, r3
 800aea2:	68b8      	ldr	r0, [r7, #8]
 800aea4:	f008 f95a 	bl	801315c <_ZdlPvj>
      }
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800aeb6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800aeba:	4618      	mov	r0, r3
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <_ZSt12__niter_baseIPKmET_S2_>:
    __niter_base(_Iterator __it)
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
    { return __it; }
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4618      	mov	r0, r3
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800aefe:	f7fa fb6a 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d006      	beq.n	800af16 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	68b9      	ldr	r1, [r7, #8]
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 f865 	bl	800afdc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>
 800af12:	4603      	mov	r3, r0
 800af14:	e006      	b.n	800af24 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f000 f881 	bl	800b022 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 800af20:	4603      	mov	r3, r0
 800af22:	bf00      	nop
    }
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800af34:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4618      	mov	r0, r3
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fefd 	bl	800ad64 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 800af6a:	4603      	mov	r3, r0
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800af7c:	4b03      	ldr	r3, [pc, #12]	; (800af8c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800af7e:	4618      	mov	r0, r3
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	038e38e3 	.word	0x038e38e3

0800af90 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800af98:	4b03      	ldr	r3, [pc, #12]	; (800afa8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	02e8ba2e 	.word	0x02e8ba2e

0800afac <_ZNSt10_Head_baseILj0EOSt4pairI3PinS1_ELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <_ZSt12__get_helperILj0EOSt4pairI3PinS1_EJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff ff38 	bl	800ae42 <_ZNSt11_Tuple_implILj0EJOSt4pairI3PinS1_EEE7_M_headERS4_>
 800afd2:	4603      	mov	r3, r0
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800afdc:	b480      	push	{r7}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	109b      	asrs	r3, r3, #2
 800aff0:	617b      	str	r3, [r7, #20]
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dd0d      	ble.n	800b014 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	601a      	str	r2, [r3, #0]
	      ++__first;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3304      	adds	r3, #4
 800b004:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3304      	adds	r3, #4
 800b00a:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	3b01      	subs	r3, #1
 800b010:	617b      	str	r3, [r7, #20]
 800b012:	e7ee      	b.n	800aff2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x16>
	  return __result;
 800b014:	687b      	ldr	r3, [r7, #4]
	}
 800b016:	4618      	mov	r0, r3
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b022:	b580      	push	{r7, lr}
 800b024:	b086      	sub	sp, #24
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	109b      	asrs	r3, r3, #2
 800b036:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d006      	beq.n	800b04c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	461a      	mov	r2, r3
 800b044:	68f9      	ldr	r1, [r7, #12]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f008 f9f6 	bl	8013438 <memmove>
	  return __result + _Num;
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	4413      	add	r3, r2
	}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <_Z41__static_initialization_and_destruction_0ii>:
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b0c6      	sub	sp, #280	; 0x118
 800b060:	af00      	add	r7, sp, #0
 800b062:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b066:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b06a:	6018      	str	r0, [r3, #0]
 800b06c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b070:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b074:	6019      	str	r1, [r3, #0]
 800b076:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b07a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d142      	bne.n	800b10a <_Z41__static_initialization_and_destruction_0ii+0xae>
 800b084:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b088:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b092:	4293      	cmp	r3, r2
 800b094:	d139      	bne.n	800b10a <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> PWMservice::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 800b096:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b09a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b09e:	4a28      	ldr	r2, [pc, #160]	; (800b140 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f008 f9b7 	bl	801341c <memcpy>
 800b0ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b0b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b0b6:	f107 0214 	add.w	r2, r7, #20
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b0c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b0c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0c8:	605a      	str	r2, [r3, #4]
 800b0ca:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fb fff5 	bl	80070be <_ZNSaIhEC1Ev>
 800b0d4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800b0d8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800b0dc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800b0e0:	ca06      	ldmia	r2, {r1, r2}
 800b0e2:	4818      	ldr	r0, [pc, #96]	; (800b144 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800b0e4:	f7fc f802 	bl	80070ec <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800b0e8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fb fff2 	bl	80070d6 <_ZNSaIhED1Ev>
map<uint8_t, PWMservice::Instance> PWMservice::active_instances = {};
 800b0f2:	4b15      	ldr	r3, [pc, #84]	; (800b148 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	6053      	str	r3, [r2, #4]
 800b0fc:	6093      	str	r3, [r2, #8]
 800b0fe:	60d3      	str	r3, [r2, #12]
 800b100:	6113      	str	r3, [r2, #16]
 800b102:	6153      	str	r3, [r2, #20]
 800b104:	4810      	ldr	r0, [pc, #64]	; (800b148 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800b106:	f7fb fbf1 	bl	80068ec <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
 800b10a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b10e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10e      	bne.n	800b136 <_Z41__static_initialization_and_destruction_0ii+0xda>
 800b118:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b11c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b126:	4293      	cmp	r3, r2
 800b128:	d105      	bne.n	800b136 <_Z41__static_initialization_and_destruction_0ii+0xda>
 800b12a:	4807      	ldr	r0, [pc, #28]	; (800b148 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800b12c:	f7fb fbeb 	bl	8006906 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> PWMservice::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 800b130:	4804      	ldr	r0, [pc, #16]	; (800b144 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800b132:	f7fc f809 	bl	8007148 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 800b136:	bf00      	nop
 800b138:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	08013954 	.word	0x08013954
 800b144:	240008a4 	.word	0x240008a4
 800b148:	240008a8 	.word	0x240008a8

0800b14c <_GLOBAL__sub_I__ZN10PWMservice10id_managerE>:
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
 800b150:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b154:	2001      	movs	r0, #1
 800b156:	f7ff ff81 	bl	800b05c <_Z41__static_initialization_and_destruction_0ii>
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <_GLOBAL__sub_D__ZN10PWMservice10id_managerE>:
 800b15c:	b580      	push	{r7, lr}
 800b15e:	af00      	add	r7, sp, #0
 800b160:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b164:	2000      	movs	r0, #0
 800b166:	f7ff ff79 	bl	800b05c <_Z41__static_initialization_and_destruction_0ii>
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_ZN3PWMC1Ev>:

#include "PWMservice/PWMservice.hpp"

class PWM {
public:
	PWM() = default;
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3304      	adds	r3, #4
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fa fa54 	bl	8005626 <_ZN3PinC1Ev>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	330c      	adds	r3, #12
 800b182:	4618      	mov	r0, r3
 800b184:	f7fa fa4f 	bl	8005626 <_ZN3PinC1Ev>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <_ZN13DigitalOutputC1Ev>:

#include "DigitalOutputservice/DigitalOutputservice.hpp"

class DigitalOutput {
public:
	DigitalOutput() = default;
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fa fa41 	bl	8005626 <_ZN3PinC1Ev>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <_ZN10HalfBridgeC1ER3PinS1_S1_S1_S1_>:
	HalfBridge::negative_voltage_pwm = PWM(negative_voltage_pwm_pin);
	HalfBridge::enable = DigitalOutput(enable_pin);

}

HalfBridge::HalfBridge(Pin& positive_voltage_pwm_pin, Pin& positive_voltage_pwm_negated_pin,
 800b1ae:	b5b0      	push	{r4, r5, r7, lr}
 800b1b0:	b092      	sub	sp, #72	; 0x48
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	607a      	str	r2, [r7, #4]
 800b1ba:	603b      	str	r3, [r7, #0]
		Pin& negative_voltage_pwm_pin, Pin& negative_voltage_pwm_negated_pin, Pin& enable_pin) {
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff ffd4 	bl	800b16c <_ZN3PWMC1Ev>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3314      	adds	r3, #20
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7ff ffcf 	bl	800b16c <_ZN3PWMC1Ev>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3328      	adds	r3, #40	; 0x28
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff ffdd 	bl	800b192 <_ZN13DigitalOutputC1Ev>
	HalfBridge::positive_voltage_pwm = PWM(positive_voltage_pwm_pin, positive_voltage_pwm_negated_pin);
 800b1d8:	f107 0314 	add.w	r3, r7, #20
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	68b9      	ldr	r1, [r7, #8]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f86b 	bl	800b2bc <_ZN3PWMC1ER3PinS1_>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	461d      	mov	r5, r3
 800b1ea:	f107 0414 	add.w	r4, r7, #20
 800b1ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b1f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	602b      	str	r3, [r5, #0]
	HalfBridge::negative_voltage_pwm = PWM(negative_voltage_pwm_pin, negative_voltage_pwm_negated_pin);
 800b1f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b1fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 f85c 	bl	800b2bc <_ZN3PWMC1ER3PinS1_>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f103 0414 	add.w	r4, r3, #20
 800b20a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800b20e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	6023      	str	r3, [r4, #0]
	HalfBridge::enable = DigitalOutput(enable_pin);
 800b216:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b21a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b21c:	4618      	mov	r0, r3
 800b21e:	f007 fe87 	bl	8012f30 <_ZN13DigitalOutputC1ER3Pin>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3328      	adds	r3, #40	; 0x28
 800b226:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b22a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b22c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4618      	mov	r0, r3
 800b234:	3748      	adds	r7, #72	; 0x48
 800b236:	46bd      	mov	sp, r7
 800b238:	bdb0      	pop	{r4, r5, r7, pc}

0800b23a <_ZN10HalfBridge7turn_onEv>:

void HalfBridge::turn_on() {
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
	positive_voltage_pwm.turn_on();
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4618      	mov	r0, r3
 800b246:	f000 f866 	bl	800b316 <_ZN3PWM7turn_onEv>
	negative_voltage_pwm.turn_on();
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3314      	adds	r3, #20
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 f861 	bl	800b316 <_ZN3PWM7turn_onEv>
	enable.turn_on(); // enable al final para evitar ruido
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3328      	adds	r3, #40	; 0x28
 800b258:	4618      	mov	r0, r3
 800b25a:	f007 fe95 	bl	8012f88 <_ZN13DigitalOutput7turn_onEv>
}
 800b25e:	bf00      	nop
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <_ZN10HalfBridge14set_duty_cycleEa>:
	enable.turn_off(); // enable al principio para evitar ruido
	positive_voltage_pwm.turn_off();
	negative_voltage_pwm.turn_off();
}

void HalfBridge::set_duty_cycle(int8_t duty_cycle) {
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
	if (duty_cycle >= 0) {
 800b272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b276:	2b00      	cmp	r3, #0
 800b278:	db0c      	blt.n	800b294 <_ZN10HalfBridge14set_duty_cycleEa+0x2e>
		negative_voltage_pwm.set_duty_cycle(0);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3314      	adds	r3, #20
 800b27e:	2100      	movs	r1, #0
 800b280:	4618      	mov	r0, r3
 800b282:	f000 f855 	bl	800b330 <_ZN3PWM14set_duty_cycleEh>
		positive_voltage_pwm.set_duty_cycle(duty_cycle);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	78fa      	ldrb	r2, [r7, #3]
 800b28a:	4611      	mov	r1, r2
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 f84f 	bl	800b330 <_ZN3PWM14set_duty_cycleEh>
	}
	else {
		positive_voltage_pwm.set_duty_cycle(0);
		negative_voltage_pwm.set_duty_cycle(duty_cycle);
	}
}
 800b292:	e00b      	b.n	800b2ac <_ZN10HalfBridge14set_duty_cycleEa+0x46>
		positive_voltage_pwm.set_duty_cycle(0);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2100      	movs	r1, #0
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 f849 	bl	800b330 <_ZN3PWM14set_duty_cycleEh>
		negative_voltage_pwm.set_duty_cycle(duty_cycle);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3314      	adds	r3, #20
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f842 	bl	800b330 <_ZN3PWM14set_duty_cycleEh>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	f008 f86e 	bl	8013398 <abort>

0800b2bc <_ZN3PWMC1ER3PinS1_>:
		//TODO: error handler
	}

	id = try_id.value();
}
PWM::PWM(Pin& pin, Pin& pin_negated) : pin(pin), pin_negated(pin_negated) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2d2:	e883 0003 	stmia.w	r3, {r0, r1}
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	330c      	adds	r3, #12
 800b2dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2e0:	e883 0003 	stmia.w	r3, {r0, r1}
	optional<uint8_t> try_id = PWMservice::inscribe_dual(pin, pin_negated);
 800b2e4:	6879      	ldr	r1, [r7, #4]
 800b2e6:	68b8      	ldr	r0, [r7, #8]
 800b2e8:	f7fb fbba 	bl	8006a60 <_ZN10PWMservice13inscribe_dualER3PinS1_>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	82bb      	strh	r3, [r7, #20]
	if (not try_id) {
 800b2f0:	f107 0314 	add.w	r3, r7, #20
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 f82c 	bl	800b352 <_ZNKSt8optionalIhEcvbEv>
		//TODO: error handler
	}

	id = try_id.value();
 800b2fa:	f107 0314 	add.w	r3, r7, #20
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 f83f 	bl	800b382 <_ZNRSt8optionalIhE5valueEv>
 800b304:	4603      	mov	r3, r0
 800b306:	781a      	ldrb	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	701a      	strb	r2, [r3, #0]
}
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <_ZN3PWM7turn_onEv>:

void PWM::turn_on() {
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
	PWMservice::turn_on(id);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	4618      	mov	r0, r3
 800b324:	f7fb fc72 	bl	8006c0c <_ZN10PWMservice7turn_onEh>
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <_ZN3PWM14set_duty_cycleEh>:

void PWM::turn_off() {
	PWMservice::turn_off(id);
}

void PWM::set_duty_cycle(uint8_t duty_cycle) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
	PWMservice::set_duty_cycle(id, duty_cycle);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	78fa      	ldrb	r2, [r7, #3]
 800b342:	4611      	mov	r1, r2
 800b344:	4618      	mov	r0, r3
 800b346:	f7fb fc9f 	bl	8006c88 <_ZN10PWMservice14set_duty_cycleEhh>
}
 800b34a:	bf00      	nop
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <_ZNKSt8optionalIhEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f805 	bl	800b36a <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 800b360:	4603      	mov	r3, r0
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800b36a:	b480      	push	{r7}
 800b36c:	b083      	sub	sp, #12
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	785b      	ldrb	r3, [r3, #1]
 800b376:	4618      	mov	r0, r3
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <_ZNRSt8optionalIhE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 800b382:	b580      	push	{r7, lr}
 800b384:	b082      	sub	sp, #8
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7ff ffed 	bl	800b36a <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 800b390:	4603      	mov	r3, r0
	  ? this->_M_get()
 800b392:	2b00      	cmp	r3, #0
 800b394:	d004      	beq.n	800b3a0 <_ZNRSt8optionalIhE5valueEv+0x1e>
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f808 	bl	800b3ac <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>
 800b39c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800b39e:	e001      	b.n	800b3a4 <_ZNRSt8optionalIhE5valueEv+0x22>
 800b3a0:	f7ff ff88 	bl	800b2b4 <_ZSt27__throw_bad_optional_accessv>
      }
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 f805 	bl	800b3c6 <_ZNSt22_Optional_payload_baseIhE6_M_getEv>
 800b3bc:	4603      	mov	r3, r0
      }
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <_ZNSt22_Optional_payload_baseIhE6_M_getEv>:
      _M_get() noexcept
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	609a      	str	r2, [r3, #8]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	2203      	movs	r2, #3
 800b412:	4798      	blx	r3
    }
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bf0c      	ite	eq
 800b42e:	2301      	moveq	r3, #1
 800b430:	2300      	movne	r3, #0
 800b432:	b2db      	uxtb	r3, r3
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      _Vector_base() = default;
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 f8fb 	bl	800b646 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <_ZNSt6vectorImSaImEEC1Ev>:
      vector() = default;
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff ffeb 	bl	800b440 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>:
public:
	LPTIM_HandleTypeDef* handle;
	uint16_t period;

	LowPowerTimer() = default;
	LowPowerTimer(LPTIM_HandleTypeDef* handle, uint16_t period) : handle(handle), period(period) {};
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	4613      	mov	r3, r2
 800b480:	80fb      	strh	r3, [r7, #6]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	88fa      	ldrh	r2, [r7, #6]
 800b48c:	809a      	strh	r2, [r3, #4]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	4618      	mov	r0, r3
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff ffa6 	bl	800b3f8 <_ZNSt14_Function_baseD1Ev>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
      ~map() = default;
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b082      	sub	sp, #8
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 f939 	bl	800b738 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <_ZN10PWMservice13TimerInitDataC1Ev>:
		TimerInitData() = default;
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3310      	adds	r3, #16
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff ffbc 	bl	800b45a <_ZNSt6vectorImSaImEEC1Ev>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <_ZN10PWMservice15TimerPeripheralC1Ev>:
	public:
		TIM_HandleTypeDef* handle;
		TimerInitData init_data;

		TimerPeripheral() = default;
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff ffe9 	bl	800b4d0 <_ZN10PWMservice13TimerInitDataC1Ev>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f989 	bl	800b82a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f9a7 	bl	800b87e <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEED1Ev>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>:
      _Rb_tree() = default;
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	f000 f985 	bl	800b854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>:
      map() = default;
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff ffeb 	bl	800b53a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4618      	mov	r0, r3
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
      ~map() = default;
 800b56e:	b580      	push	{r7, lr}
 800b570:	b082      	sub	sp, #8
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 f9f8 	bl	800b96e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4618      	mov	r0, r3
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fa75 	bl	800ba82 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <_ZN3ADC8InitDataD1Ev>:
#define MAX_12BIT 4095.0
#define MAX_16BIT 65535.0

class ADC {
public:
	struct InitData {
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	330c      	adds	r3, #12
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fb fd5a 	bl	8007068 <_ZNSt6vectorImSaImEED1Ev>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <_ZN3ADC10PeripheralD1Ev>:
		vector<uint32_t> channels;
		InitData() = default;
		InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels);
	};

	class Peripheral {
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3310      	adds	r3, #16
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff ffe9 	bl	800b5a2 <_ZN3ADC8InitDataD1Ev>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b082      	sub	sp, #8
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fad1 	bl	800bb8c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <_ZN17ExternalInterrupt8InstanceD1Ev>:
#ifdef HAL_EXTI_MODULE_ENABLED
#define GPIO_PORT GPIOE

class ExternalInterrupt {
public:
	class Instance {
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff ff4b 	bl	800b49c <_ZNSt8functionIFvvEED1Ev>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>:
    struct pair
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff ffe9 	bl	800b5f4 <_ZN17ExternalInterrupt8InstanceD1Ev>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>:
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4618      	mov	r0, r3
 800b638:	f000 fb52 	bl	800bce0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7fb fdbc 	bl	80071cc <_ZNSaImEC1Ev>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4618      	mov	r0, r3
 800b658:	f7fb fffb 	bl	8007652 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 800b666:	b490      	push	{r4, r7}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	60f8      	str	r0, [r7, #12]
 800b66e:	60b9      	str	r1, [r7, #8]
 800b670:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	4614      	mov	r4, r2
 800b678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b67a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	611a      	str	r2, [r3, #16]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bc90      	pop	{r4, r7}
 800b690:	4770      	bx	lr

0800b692 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fb35 	bl	800bd0a <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>:
      map(initializer_list<value_type> __l,
 800b6c0:	b5b0      	push	{r4, r5, r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	1d38      	adds	r0, r7, #4
 800b6ca:	e880 0006 	stmia.w	r0, {r1, r2}
 800b6ce:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800b6d0:	68fc      	ldr	r4, [r7, #12]
 800b6d2:	f107 0314 	add.w	r3, r7, #20
 800b6d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fb21 	bl	800bd20 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>
 800b6de:	f107 0314 	add.w	r3, r7, #20
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fb28 	bl	800bd3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>
 800b6ec:	f107 0314 	add.w	r3, r7, #20
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7ff ffda 	bl	800b6aa <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800b6f6:	68fc      	ldr	r4, [r7, #12]
 800b6f8:	1d3b      	adds	r3, r7, #4
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 fb3c 	bl	800bd78 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 800b700:	4605      	mov	r5, r0
 800b702:	1d3b      	adds	r3, r7, #4
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fb43 	bl	800bd90 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>
 800b70a:	4603      	mov	r3, r0
 800b70c:	461a      	mov	r2, r3
 800b70e:	4629      	mov	r1, r5
 800b710:	4620      	mov	r0, r4
 800b712:	f000 fb52 	bl	800bdba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bdb0      	pop	{r4, r5, r7, pc}

0800b720 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fb72 	bl	800be12 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fb90 	bl	800be66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 800b746:	4603      	mov	r3, r0
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fb6c 	bl	800be28 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff ffe4 	bl	800b720 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800b762:	b580      	push	{r7, lr}
 800b764:	b084      	sub	sp, #16
 800b766:	af00      	add	r7, sp, #0
 800b768:	60f8      	str	r0, [r7, #12]
 800b76a:	60b9      	str	r1, [r7, #8]
 800b76c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b76e:	68b8      	ldr	r0, [r7, #8]
 800b770:	f7fc fb5b 	bl	8007e2a <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800b774:	4602      	mov	r2, r0
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b77c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fb7c 	bl	800be7e <_ZSt7forwardIN10PWMservice8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b786:	4602      	mov	r2, r0
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3308      	adds	r3, #8
 800b78c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b78e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <_ZNSaISt4pairIK3PinN10PWMservice8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fb75 	bl	800be94 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN10PWMservice8InstanceEEEC1Ev>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <_ZNSaISt4pairIK3PinN10PWMservice8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 800b7ca:	b5b0      	push	{r4, r5, r7, lr}
 800b7cc:	b086      	sub	sp, #24
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	1d38      	adds	r0, r7, #4
 800b7d4:	e880 0006 	stmia.w	r0, {r1, r2}
 800b7d8:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800b7da:	68fc      	ldr	r4, [r7, #12]
 800b7dc:	f107 0314 	add.w	r3, r7, #20
 800b7e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fb61 	bl	800beaa <_ZNSaISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKS5_>
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fb68 	bl	800bec6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 800b7f6:	f107 0314 	add.w	r3, r7, #20
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff ffda 	bl	800b7b4 <_ZNSaISt4pairIK3PinN10PWMservice8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800b800:	68fc      	ldr	r4, [r7, #12]
 800b802:	1d3b      	adds	r3, r7, #4
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fb7c 	bl	800bf02 <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE5beginEv>
 800b80a:	4605      	mov	r5, r0
 800b80c:	1d3b      	adds	r3, r7, #4
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 fb83 	bl	800bf1a <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE3endEv>
 800b814:	4603      	mov	r3, r0
 800b816:	461a      	mov	r2, r3
 800b818:	4629      	mov	r1, r5
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 fb92 	bl	800bf44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bdb0      	pop	{r4, r5, r7, pc}

0800b82a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7fe f92f 	bl	8009a96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 800b838:	4603      	mov	r3, r0
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fbad 	bl	800bf9c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4618      	mov	r0, r3
 800b846:	f7ff fe6c 	bl	800b522 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fbbc 	bl	800bfda <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fbc4 	bl	800bff2 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fa ffce 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEED1Ev>:
 800b87e:	b480      	push	{r7}
 800b880:	b083      	sub	sp, #12
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4618      	mov	r0, r3
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	4614      	mov	r4, r2
 800b8a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b8a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fae6 	bl	800be7e <_ZSt7forwardIN10PWMservice8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3310      	adds	r3, #16
 800b8b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd90      	pop	{r4, r7, pc}

0800b8c8 <_ZNSaISt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fb99 	bl	800c008 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEC1Ev>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <_ZNSaISt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>:
      map(initializer_list<value_type> __l,
 800b8f6:	b5b0      	push	{r4, r5, r7, lr}
 800b8f8:	b086      	sub	sp, #24
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	1d38      	adds	r0, r7, #4
 800b900:	e880 0006 	stmia.w	r0, {r1, r2}
 800b904:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800b906:	68fc      	ldr	r4, [r7, #12]
 800b908:	f107 0314 	add.w	r3, r7, #20
 800b90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 fb85 	bl	800c01e <_ZNSaISt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEEC1ERKS6_>
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	461a      	mov	r2, r3
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fb8c 	bl	800c03a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>
 800b922:	f107 0314 	add.w	r3, r7, #20
 800b926:	4618      	mov	r0, r3
 800b928:	f7ff ffda 	bl	800b8e0 <_ZNSaISt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800b92c:	68fc      	ldr	r4, [r7, #12]
 800b92e:	1d3b      	adds	r3, r7, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f000 fba0 	bl	800c076 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE5beginEv>
 800b936:	4605      	mov	r5, r0
 800b938:	1d3b      	adds	r3, r7, #4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 fba7 	bl	800c08e <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE3endEv>
 800b940:	4603      	mov	r3, r0
 800b942:	461a      	mov	r2, r3
 800b944:	4629      	mov	r1, r5
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fbb6 	bl	800c0b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bdb0      	pop	{r4, r5, r7, pc}

0800b956 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fbd6 	bl	800c110 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEED1Ev>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7fe fa65 	bl	8009e46 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 800b97c:	4603      	mov	r3, r0
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fbd0 	bl	800c126 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff ffe4 	bl	800b956 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800b998:	b5b0      	push	{r4, r5, r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b9a4:	68b8      	ldr	r0, [r7, #8]
 800b9a6:	f7fc fa40 	bl	8007e2a <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9b2:	e883 0003 	stmia.w	r3, {r0, r1}
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fbd4 	bl	800c164 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f103 0408 	add.w	r4, r3, #8
 800b9c4:	4615      	mov	r5, r2
 800b9c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b9ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bdb0      	pop	{r4, r5, r7, pc}

0800b9dc <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fbc8 	bl	800c17a <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 800ba0a:	b5b0      	push	{r4, r5, r7, lr}
 800ba0c:	b086      	sub	sp, #24
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	1d38      	adds	r0, r7, #4
 800ba14:	e880 0006 	stmia.w	r0, {r1, r2}
 800ba18:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800ba1a:	68fc      	ldr	r4, [r7, #12]
 800ba1c:	f107 0314 	add.w	r3, r7, #20
 800ba20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 fbb4 	bl	800c190 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>
 800ba28:	f107 0314 	add.w	r3, r7, #20
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 fbbb 	bl	800c1ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 800ba36:	f107 0314 	add.w	r3, r7, #20
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff ffda 	bl	800b9f4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800ba40:	68fc      	ldr	r4, [r7, #12]
 800ba42:	1d3b      	adds	r3, r7, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 fbcf 	bl	800c1e8 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	1d3b      	adds	r3, r7, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fbd6 	bl	800c200 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>
 800ba54:	4603      	mov	r3, r0
 800ba56:	461a      	mov	r2, r3
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 fbe5 	bl	800c22a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bdb0      	pop	{r4, r5, r7, pc}

0800ba6a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fc05 	bl	800c282 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fc23 	bl	800c2d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 800ba90:	4603      	mov	r3, r0
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fbff 	bl	800c298 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7ff ffe4 	bl	800ba6a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4618      	mov	r0, r3
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bab8:	68b8      	ldr	r0, [r7, #8]
 800baba:	f7fc f9b6 	bl	8007e2a <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800babe:	4602      	mov	r2, r0
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bac6:	e883 0003 	stmia.w	r3, {r0, r1}
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fc0f 	bl	800c2ee <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bad0:	4602      	mov	r2, r0
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3308      	adds	r3, #8
 800bad6:	ca07      	ldmia	r2, {r0, r1, r2}
 800bad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fc08 	bl	800c304 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 800bb14:	b5b0      	push	{r4, r5, r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	1d38      	adds	r0, r7, #4
 800bb1e:	e880 0006 	stmia.w	r0, {r1, r2}
 800bb22:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800bb24:	68fc      	ldr	r4, [r7, #12]
 800bb26:	f107 0314 	add.w	r3, r7, #20
 800bb2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 fbf4 	bl	800c31a <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>
 800bb32:	f107 0314 	add.w	r3, r7, #20
 800bb36:	461a      	mov	r2, r3
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 fbfb 	bl	800c336 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 800bb40:	f107 0314 	add.w	r3, r7, #20
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff ffda 	bl	800bafe <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800bb4a:	68fc      	ldr	r4, [r7, #12]
 800bb4c:	1d3b      	adds	r3, r7, #4
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 fc0f 	bl	800c372 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 800bb54:	4605      	mov	r5, r0
 800bb56:	1d3b      	adds	r3, r7, #4
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fc16 	bl	800c38a <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	461a      	mov	r2, r3
 800bb62:	4629      	mov	r1, r5
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fc25 	bl	800c3b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3718      	adds	r7, #24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bdb0      	pop	{r4, r5, r7, pc}

0800bb74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc45 	bl	800c40c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fc63 	bl	800c460 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fc3f 	bl	800c422 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff ffe4 	bl	800bb74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <_ZN17ExternalInterrupt8InstanceC1EOS0_>:
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	801a      	strh	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	1d1a      	adds	r2, r3, #4
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f000 fc4f 	bl	800c48e <_ZNSt8functionIFvvEEC1EOS1_>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	7d1a      	ldrb	r2, [r3, #20]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	751a      	strb	r2, [r3, #20]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800bc02:	b590      	push	{r4, r7, lr}
 800bc04:	b085      	sub	sp, #20
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bc0e:	68b8      	ldr	r0, [r7, #8]
 800bc10:	f7ff ffd1 	bl	800bbb6 <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc14:	4603      	mov	r3, r0
 800bc16:	881a      	ldrh	r2, [r3, #0]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	801a      	strh	r2, [r3, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	1d1c      	adds	r4, r3, #4
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fc29 	bl	800c478 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc26:	4603      	mov	r3, r0
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7ff ffce 	bl	800bbcc <_ZN17ExternalInterrupt8InstanceC1EOS0_>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd90      	pop	{r4, r7, pc}

0800bc3a <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fc35 	bl	800c4b2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 800bc68:	b5b0      	push	{r4, r5, r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	1d38      	adds	r0, r7, #4
 800bc72:	e880 0006 	stmia.w	r0, {r1, r2}
 800bc76:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800bc78:	68fc      	ldr	r4, [r7, #12]
 800bc7a:	f107 0314 	add.w	r3, r7, #20
 800bc7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc80:	4618      	mov	r0, r3
 800bc82:	f000 fc21 	bl	800c4c8 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>
 800bc86:	f107 0314 	add.w	r3, r7, #20
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 fc28 	bl	800c4e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>
 800bc94:	f107 0314 	add.w	r3, r7, #20
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff ffda 	bl	800bc52 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800bc9e:	68fc      	ldr	r4, [r7, #12]
 800bca0:	1d3b      	adds	r3, r7, #4
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fc3c 	bl	800c520 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 800bca8:	4605      	mov	r5, r0
 800bcaa:	1d3b      	adds	r3, r7, #4
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 fc43 	bl	800c538 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f000 fc52 	bl	800c562 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bdb0      	pop	{r4, r5, r7, pc}

0800bcc8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fc72 	bl	800c5ba <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fc90 	bl	800c60e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fc6c 	bl	800c5d0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff ffe4 	bl	800bcc8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4618      	mov	r0, r3
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bd0a:	b480      	push	{r7}
 800bd0c:	b083      	sub	sp, #12
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fc7a 	bl	800c626 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>:
      _Rb_tree(const _Compare& __comp,
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800bd48:	68fc      	ldr	r4, [r7, #12]
 800bd4a:	f107 0314 	add.w	r3, r7, #20
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 fc74 	bl	800c63e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>
 800bd56:	f107 0314 	add.w	r3, r7, #20
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	68b9      	ldr	r1, [r7, #8]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f000 fc7a 	bl	800c658 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>
 800bd64:	f107 0314 	add.w	r3, r7, #20
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 f852 	bl	800be12 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4618      	mov	r0, r3
 800bd72:	371c      	adds	r7, #28
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd90      	pop	{r4, r7, pc}

0800bd78 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4618      	mov	r0, r3
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800bd90:	b590      	push	{r4, r7, lr}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7ff ffed 	bl	800bd78 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 800bd9e:	4604      	mov	r4, r0
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fc76 	bl	800c692 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>
 800bda6:	4602      	mov	r2, r0
 800bda8:	4613      	mov	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4423      	add	r3, r4
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd90      	pop	{r4, r7, pc}

0800bdba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b088      	sub	sp, #32
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800bdc6:	f107 0314 	add.w	r3, r7, #20
 800bdca:	68f9      	ldr	r1, [r7, #12]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 fc6c 	bl	800c6aa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>
	  for (; __first != __last; ++__first)
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d017      	beq.n	800be0a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fc74 	bl	800c6c8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 800bde0:	4603      	mov	r3, r0
 800bde2:	61fb      	str	r3, [r7, #28]
 800bde4:	f107 021c 	add.w	r2, r7, #28
 800bde8:	f107 0318 	add.w	r3, r7, #24
 800bdec:	4611      	mov	r1, r2
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fc7b 	bl	800c6ea <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 800bdf4:	f107 0314 	add.w	r3, r7, #20
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	69b9      	ldr	r1, [r7, #24]
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 fc84 	bl	800c70a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	3314      	adds	r3, #20
 800be06:	60bb      	str	r3, [r7, #8]
 800be08:	e7e3      	b.n	800bdd2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x18>
	}
 800be0a:	bf00      	nop
 800be0c:	3720      	adds	r7, #32
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800be12:	b480      	push	{r7}
 800be14:	b083      	sub	sp, #12
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d012      	beq.n	800be5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 800be38:	6838      	ldr	r0, [r7, #0]
 800be3a:	f000 fc99 	bl	800c770 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800be3e:	4603      	mov	r3, r0
 800be40:	4619      	mov	r1, r3
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7ff fff0 	bl	800be28 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 800be48:	6838      	ldr	r0, [r7, #0]
 800be4a:	f000 fc9d 	bl	800c788 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800be4e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fca4 	bl	800c7a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800be5c:	e7e9      	b.n	800be32 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800be5e:	bf00      	nop
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	4618      	mov	r0, r3
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <_ZSt7forwardIN10PWMservice8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4618      	mov	r0, r3
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN10PWMservice8InstanceEEEC1Ev>:
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4618      	mov	r0, r3
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <_ZNSaISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800beaa:	b580      	push	{r7, lr}
 800beac:	b082      	sub	sp, #8
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fc83 	bl	800c7c2 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKS7_>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 800bec6:	b590      	push	{r4, r7, lr}
 800bec8:	b087      	sub	sp, #28
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800bed2:	68fc      	ldr	r4, [r7, #12]
 800bed4:	f107 0314 	add.w	r3, r7, #20
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 fc7d 	bl	800c7da <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1IS5_EERKSaIT_E>
 800bee0:	f107 0314 	add.w	r3, r7, #20
 800bee4:	461a      	mov	r2, r3
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	4620      	mov	r0, r4
 800beea:	f000 fc83 	bl	800c7f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 800beee:	f107 0314 	add.w	r3, r7, #20
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff fcc3 	bl	800b87e <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEED1Ev>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4618      	mov	r0, r3
 800befc:	371c      	adds	r7, #28
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd90      	pop	{r4, r7, pc}

0800bf02 <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800bf1a:	b590      	push	{r4, r7, lr}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff ffed 	bl	800bf02 <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE5beginEv>
 800bf28:	4604      	mov	r4, r0
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fc7f 	bl	800c82e <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE4sizeEv>
 800bf30:	4602      	mov	r2, r0
 800bf32:	4613      	mov	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4413      	add	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4423      	add	r3, r4
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd90      	pop	{r4, r7, pc}

0800bf44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800bf50:	f107 0314 	add.w	r3, r7, #20
 800bf54:	68f9      	ldr	r1, [r7, #12]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 fc75 	bl	800c846 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d017      	beq.n	800bf94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7fc fd38 	bl	80089da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	61fb      	str	r3, [r7, #28]
 800bf6e:	f107 021c 	add.w	r2, r7, #28
 800bf72:	f107 0318 	add.w	r3, r7, #24
 800bf76:	4611      	mov	r1, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fb fe4f 	bl	8007c1c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 800bf7e:	f107 0314 	add.w	r3, r7, #20
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	69b9      	ldr	r1, [r7, #24]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f000 fc6c 	bl	800c864 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3314      	adds	r3, #20
 800bf90:	60bb      	str	r3, [r7, #8]
 800bf92:	e7e3      	b.n	800bf5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 800bf94:	bf00      	nop
 800bf96:	3720      	adds	r7, #32
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d012      	beq.n	800bfd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 800bfac:	6838      	ldr	r0, [r7, #0]
 800bfae:	f7fd fe72 	bl	8009c96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7ff fff0 	bl	800bf9c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 800bfbc:	6838      	ldr	r0, [r7, #0]
 800bfbe:	f7fe fab1 	bl	800a524 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 800bfc2:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7fc fe5c 	bl	8008c84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800bfd0:	e7e9      	b.n	800bfa6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 800bfd2:	bf00      	nop
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fc71 	bl	800c8ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>:
      _Rb_tree_key_compare()
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
      { }
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4618      	mov	r0, r3
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEC1Ev>:
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <_ZNSaISt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fc58 	bl	800c8e0 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEC1ERKS8_>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>:
      _Rb_tree(const _Compare& __comp,
 800c03a:	b590      	push	{r4, r7, lr}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800c046:	68fc      	ldr	r4, [r7, #12]
 800c048:	f107 0314 	add.w	r3, r7, #20
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 fc52 	bl	800c8f8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEEC1IS6_EERKSaIT_E>
 800c054:	f107 0314 	add.w	r3, r7, #20
 800c058:	461a      	mov	r2, r3
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fc58 	bl	800c912 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>
 800c062:	f107 0314 	add.w	r3, r7, #20
 800c066:	4618      	mov	r0, r3
 800c068:	f000 f852 	bl	800c110 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEED1Ev>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4618      	mov	r0, r3
 800c070:	371c      	adds	r7, #28
 800c072:	46bd      	mov	sp, r7
 800c074:	bd90      	pop	{r4, r7, pc}

0800c076 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4618      	mov	r0, r3
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800c08e:	b590      	push	{r4, r7, lr}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7ff ffed 	bl	800c076 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE5beginEv>
 800c09c:	4604      	mov	r4, r0
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fc54 	bl	800c94c <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE4sizeEv>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	00db      	lsls	r3, r3, #3
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4423      	add	r3, r4
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd90      	pop	{r4, r7, pc}

0800c0b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b088      	sub	sp, #32
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800c0c4:	f107 0314 	add.w	r3, r7, #20
 800c0c8:	68f9      	ldr	r1, [r7, #12]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 fc4a 	bl	800c964 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>
	  for (; __first != __last; ++__first)
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d017      	beq.n	800c108 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f7fc ff4c 	bl	8008f76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	61fb      	str	r3, [r7, #28]
 800c0e2:	f107 021c 	add.w	r2, r7, #28
 800c0e6:	f107 0318 	add.w	r3, r7, #24
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fb ffa6 	bl	800803e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 800c0f2:	f107 0314 	add.w	r3, r7, #20
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	69b9      	ldr	r1, [r7, #24]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 fc41 	bl	800c982 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	331c      	adds	r3, #28
 800c104:	60bb      	str	r3, [r7, #8]
 800c106:	e7e3      	b.n	800c0d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x18>
	}
 800c108:	bf00      	nop
 800c10a:	3720      	adds	r7, #32
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4618      	mov	r0, r3
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d012      	beq.n	800c15c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 800c136:	6838      	ldr	r0, [r7, #0]
 800c138:	f7fd fff6 	bl	800a128 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c13c:	4603      	mov	r3, r0
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff fff0 	bl	800c126 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 800c146:	6838      	ldr	r0, [r7, #0]
 800c148:	f7fe faba 	bl	800a6c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c14c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7fd f92a 	bl	80093aa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c15a:	e7e9      	b.n	800c130 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800c15c:	bf00      	nop
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
 800c17a:	b480      	push	{r7}
 800c17c:	b083      	sub	sp, #12
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4618      	mov	r0, r3
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fc23 	bl	800c9e8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 800c1ac:	b590      	push	{r4, r7, lr}
 800c1ae:	b087      	sub	sp, #28
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800c1b8:	68fc      	ldr	r4, [r7, #12]
 800c1ba:	f107 0314 	add.w	r3, r7, #20
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 fc1d 	bl	800ca00 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>
 800c1c6:	f107 0314 	add.w	r3, r7, #20
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	68b9      	ldr	r1, [r7, #8]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 fc23 	bl	800ca1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 800c1d4:	f107 0314 	add.w	r3, r7, #20
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f852 	bl	800c282 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd90      	pop	{r4, r7, pc}

0800c1e8 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800c200:	b590      	push	{r4, r7, lr}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff ffed 	bl	800c1e8 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 800c20e:	4604      	mov	r4, r0
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fc1f 	bl	800ca54 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>
 800c216:	4602      	mov	r2, r0
 800c218:	4613      	mov	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	00db      	lsls	r3, r3, #3
 800c220:	4423      	add	r3, r4
 800c222:	4618      	mov	r0, r3
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	bd90      	pop	{r4, r7, pc}

0800c22a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b088      	sub	sp, #32
 800c22e:	af00      	add	r7, sp, #0
 800c230:	60f8      	str	r0, [r7, #12]
 800c232:	60b9      	str	r1, [r7, #8]
 800c234:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800c236:	f107 0314 	add.w	r3, r7, #20
 800c23a:	68f9      	ldr	r1, [r7, #12]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fc15 	bl	800ca6c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	429a      	cmp	r2, r3
 800c248:	d017      	beq.n	800c27a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f000 fc1d 	bl	800ca8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 800c250:	4603      	mov	r3, r0
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	f107 021c 	add.w	r2, r7, #28
 800c258:	f107 0318 	add.w	r3, r7, #24
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fc24 	bl	800caac <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 800c264:	f107 0314 	add.w	r3, r7, #20
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	69b9      	ldr	r1, [r7, #24]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 fc2d 	bl	800cacc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	3328      	adds	r3, #40	; 0x28
 800c276:	60bb      	str	r3, [r7, #8]
 800c278:	e7e3      	b.n	800c242 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 800c27a:	bf00      	nop
 800c27c:	3720      	adds	r7, #32
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c282:	b480      	push	{r7}
 800c284:	b083      	sub	sp, #12
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d012      	beq.n	800c2ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 800c2a8:	6838      	ldr	r0, [r7, #0]
 800c2aa:	f000 fc42 	bl	800cb32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff fff0 	bl	800c298 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 800c2b8:	6838      	ldr	r0, [r7, #0]
 800c2ba:	f000 fc46 	bl	800cb4a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c2be:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fc4d 	bl	800cb62 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c2cc:	e7e9      	b.n	800c2a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 800c2ce:	bf00      	nop
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c2d6:	b480      	push	{r7}
 800c2d8:	b083      	sub	sp, #12
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4618      	mov	r0, r3
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fc2c 	bl	800cb84 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 800c336:	b590      	push	{r4, r7, lr}
 800c338:	b087      	sub	sp, #28
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800c342:	68fc      	ldr	r4, [r7, #12]
 800c344:	f107 0314 	add.w	r3, r7, #20
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 fc26 	bl	800cb9c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>
 800c350:	f107 0314 	add.w	r3, r7, #20
 800c354:	461a      	mov	r2, r3
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fc2c 	bl	800cbb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 800c35e:	f107 0314 	add.w	r3, r7, #20
 800c362:	4618      	mov	r0, r3
 800c364:	f000 f852 	bl	800c40c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4618      	mov	r0, r3
 800c36c:	371c      	adds	r7, #28
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd90      	pop	{r4, r7, pc}

0800c372 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800c372:	b480      	push	{r7}
 800c374:	b083      	sub	sp, #12
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800c38a:	b590      	push	{r4, r7, lr}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff ffed 	bl	800c372 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 800c398:	4604      	mov	r4, r0
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fc28 	bl	800cbf0 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4423      	add	r3, r4
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd90      	pop	{r4, r7, pc}

0800c3b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800c3c0:	f107 0314 	add.w	r3, r7, #20
 800c3c4:	68f9      	ldr	r1, [r7, #12]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 fc1e 	bl	800cc08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d017      	beq.n	800c404 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fc26 	bl	800cc26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	61fb      	str	r3, [r7, #28]
 800c3de:	f107 021c 	add.w	r2, r7, #28
 800c3e2:	f107 0318 	add.w	r3, r7, #24
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fc2d 	bl	800cc48 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 800c3ee:	f107 0314 	add.w	r3, r7, #20
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	69b9      	ldr	r1, [r7, #24]
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 fc36 	bl	800cc68 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	3314      	adds	r3, #20
 800c400:	60bb      	str	r3, [r7, #8]
 800c402:	e7e3      	b.n	800c3cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 800c404:	bf00      	nop
 800c406:	3720      	adds	r7, #32
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d012      	beq.n	800c458 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 800c432:	6838      	ldr	r0, [r7, #0]
 800c434:	f000 fc4b 	bl	800ccce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c438:	4603      	mov	r3, r0
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7ff fff0 	bl	800c422 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 800c442:	6838      	ldr	r0, [r7, #0]
 800c444:	f000 fc4f 	bl	800cce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c448:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fc56 	bl	800ccfe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c456:	e7e9      	b.n	800c42c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 800c458:	bf00      	nop
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <_ZNSt8functionIFvvEEC1EOS1_>:
       *  @param __x A %function object rvalue with identical call signature.
       *
       *  The newly-created %function contains the target of @a __x
       *  (if it has one).
       */
      function(function&& __x) noexcept : _Function_base()
 800c48e:	b580      	push	{r7, lr}
 800c490:	b082      	sub	sp, #8
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe ff9e 	bl	800b3dc <_ZNSt14_Function_baseC1Ev>
      {
	__x.swap(*this);
 800c4a0:	6879      	ldr	r1, [r7, #4]
 800c4a2:	6838      	ldr	r0, [r7, #0]
 800c4a4:	f000 fc3c 	bl	800cd20 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fc44 	bl	800cd62 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 800c4e4:	b590      	push	{r4, r7, lr}
 800c4e6:	b087      	sub	sp, #28
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800c4f0:	68fc      	ldr	r4, [r7, #12]
 800c4f2:	f107 0314 	add.w	r3, r7, #20
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f000 fc3e 	bl	800cd7a <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>
 800c4fe:	f107 0314 	add.w	r3, r7, #20
 800c502:	461a      	mov	r2, r3
 800c504:	68b9      	ldr	r1, [r7, #8]
 800c506:	4620      	mov	r0, r4
 800c508:	f000 fc44 	bl	800cd94 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 800c50c:	f107 0314 	add.w	r3, r7, #20
 800c510:	4618      	mov	r0, r3
 800c512:	f000 f852 	bl	800c5ba <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	4618      	mov	r0, r3
 800c51a:	371c      	adds	r7, #28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd90      	pop	{r4, r7, pc}

0800c520 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800c538:	b590      	push	{r4, r7, lr}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7ff ffed 	bl	800c520 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 800c546:	4604      	mov	r4, r0
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fc40 	bl	800cdce <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>
 800c54e:	4602      	mov	r2, r0
 800c550:	4613      	mov	r3, r2
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4423      	add	r3, r4
 800c55a:	4618      	mov	r0, r3
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd90      	pop	{r4, r7, pc}

0800c562 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800c562:	b580      	push	{r7, lr}
 800c564:	b088      	sub	sp, #32
 800c566:	af00      	add	r7, sp, #0
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800c56e:	f107 0314 	add.w	r3, r7, #20
 800c572:	68f9      	ldr	r1, [r7, #12]
 800c574:	4618      	mov	r0, r3
 800c576:	f000 fc36 	bl	800cde6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d017      	beq.n	800c5b2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 fc3e 	bl	800ce04 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800c588:	4603      	mov	r3, r0
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	f107 021c 	add.w	r2, r7, #28
 800c590:	f107 0318 	add.w	r3, r7, #24
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f000 fc45 	bl	800ce26 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 800c59c:	f107 0314 	add.w	r3, r7, #20
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	69b9      	ldr	r1, [r7, #24]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 fc4e 	bl	800ce46 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	331c      	adds	r3, #28
 800c5ae:	60bb      	str	r3, [r7, #8]
 800c5b0:	e7e3      	b.n	800c57a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 800c5b2:	bf00      	nop
 800c5b4:	3720      	adds	r7, #32
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d012      	beq.n	800c606 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800c5e0:	6838      	ldr	r0, [r7, #0]
 800c5e2:	f000 fc63 	bl	800ceac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff fff0 	bl	800c5d0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800c5f0:	6838      	ldr	r0, [r7, #0]
 800c5f2:	f000 fc67 	bl	800cec4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c5f6:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fc6e 	bl	800cedc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c604:	e7e9      	b.n	800c5da <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800c606:	bf00      	nop
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	6039      	str	r1, [r7, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4618      	mov	r0, r3
 800c634:	370c      	adds	r7, #12
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800c63e:	b580      	push	{r7, lr}
 800c640:	b082      	sub	sp, #8
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	6039      	str	r1, [r7, #0]
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fc58 	bl	800cefe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fc55 	bl	800cf14 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>
 800c66a:	4603      	mov	r3, r0
 800c66c:	4619      	mov	r1, r3
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f000 fc5b 	bl	800cf2a <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	68b9      	ldr	r1, [r7, #8]
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fc64 	bl	800cf46 <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3304      	adds	r3, #4
 800c682:	4618      	mov	r0, r3
 800c684:	f7fa f8c4 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>:
	_Alloc_node(_Rb_tree& __t)
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	1d1a      	adds	r2, r3, #4
 800c6d4:	f107 030c 	add.w	r3, r7, #12
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fc3f 	bl	800cf5e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4618      	mov	r0, r3
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c70a:	b5b0      	push	{r4, r5, r7, lr}
 800c70c:	b08a      	sub	sp, #40	; 0x28
 800c70e:	af02      	add	r7, sp, #8
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800c718:	f107 0318 	add.w	r3, r7, #24
 800c71c:	6879      	ldr	r1, [r7, #4]
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fd4f 	bl	800d1c2 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 800c724:	4603      	mov	r3, r0
 800c726:	f107 0010 	add.w	r0, r7, #16
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	68f9      	ldr	r1, [r7, #12]
 800c72e:	f000 fc25 	bl	800cf7c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00f      	beq.n	800c758 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800c738:	693c      	ldr	r4, [r7, #16]
 800c73a:	697d      	ldr	r5, [r7, #20]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 fd4c 	bl	800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 800c742:	4602      	mov	r2, r0
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	4613      	mov	r3, r2
 800c74a:	462a      	mov	r2, r5
 800c74c:	4621      	mov	r1, r4
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 fd4e 	bl	800d1f0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 800c754:	4603      	mov	r3, r0
			  __node_gen);
 800c756:	e007      	b.n	800c768 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800c758:	693a      	ldr	r2, [r7, #16]
 800c75a:	f107 031c 	add.w	r3, r7, #28
 800c75e:	4611      	mov	r1, r2
 800c760:	4618      	mov	r0, r3
 800c762:	f000 fbfc 	bl	800cf5e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 800c766:	69fb      	ldr	r3, [r7, #28]
    }
 800c768:	4618      	mov	r0, r3
 800c76a:	3720      	adds	r7, #32
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bdb0      	pop	{r4, r5, r7, pc}

0800c770 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	4618      	mov	r0, r3
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	4618      	mov	r0, r3
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fd68 	bl	800d282 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fd79 	bl	800d2ac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800c7ba:	bf00      	nop
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKS7_>:
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1IS5_EERKSaIT_E>:
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	6039      	str	r1, [r7, #0]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f870 	bl	800c8ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fd65 	bl	800d2d0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c806:	4603      	mov	r3, r0
 800c808:	4619      	mov	r1, r3
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f000 fd6b 	bl	800d2e6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1ERKS7_>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	4618      	mov	r0, r3
 800c816:	f000 fd74 	bl	800d302 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3304      	adds	r3, #4
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f9 fff6 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4618      	mov	r0, r3
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE4sizeEv>:
 800c82e:	b480      	push	{r7}
 800c830:	b083      	sub	sp, #12
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 800c846:	b480      	push	{r7}
 800c848:	b083      	sub	sp, #12
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4618      	mov	r0, r3
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c864:	b5b0      	push	{r4, r5, r7, lr}
 800c866:	b08a      	sub	sp, #40	; 0x28
 800c868:	af02      	add	r7, sp, #8
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800c872:	f107 0318 	add.w	r3, r7, #24
 800c876:	6879      	ldr	r1, [r7, #4]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fd fa37 	bl	8009cec <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>
 800c87e:	4603      	mov	r3, r0
 800c880:	f107 0010 	add.w	r0, r7, #16
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	68f9      	ldr	r1, [r7, #12]
 800c888:	f7fc f8c6 	bl	8008a18 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00f      	beq.n	800c8b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800c892:	693c      	ldr	r4, [r7, #16]
 800c894:	697d      	ldr	r5, [r7, #20]
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fd3f 	bl	800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800c89c:	4602      	mov	r2, r0
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f000 fd41 	bl	800d330 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 800c8ae:	4603      	mov	r3, r0
			  __node_gen);
 800c8b0:	e007      	b.n	800c8c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	f107 031c 	add.w	r3, r7, #28
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fc f9f3 	bl	8008ca6 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800c8c0:	69fb      	ldr	r3, [r7, #28]
    }
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3720      	adds	r7, #32
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bdb0      	pop	{r4, r5, r7, pc}

0800c8ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEEC1IS6_EERKSaIT_E>:
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fd5d 	bl	800d3c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEEC1Ev>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fd5a 	bl	800d3d8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSC_>
 800c924:	4603      	mov	r3, r0
 800c926:	4619      	mov	r1, r3
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f000 fd60 	bl	800d3ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEEC1ERKS8_>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	68b9      	ldr	r1, [r7, #8]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 fb07 	bl	800cf46 <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3304      	adds	r3, #4
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7f9 ff67 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE4sizeEv>:
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>:
	_Alloc_node(_Rb_tree& __t)
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c982:	b5b0      	push	{r4, r5, r7, lr}
 800c984:	b08a      	sub	sp, #40	; 0x28
 800c986:	af02      	add	r7, sp, #8
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	607a      	str	r2, [r7, #4]
 800c98e:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800c990:	f107 0318 	add.w	r3, r7, #24
 800c994:	6879      	ldr	r1, [r7, #4]
 800c996:	4618      	mov	r0, r3
 800c998:	f7fd fbf1 	bl	800a17e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f107 0010 	add.w	r0, r7, #16
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	68f9      	ldr	r1, [r7, #12]
 800c9a6:	f7fc fb8d 	bl	80090c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00f      	beq.n	800c9d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800c9b0:	693c      	ldr	r4, [r7, #16]
 800c9b2:	697d      	ldr	r5, [r7, #20]
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 fd28 	bl	800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	462a      	mov	r2, r5
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f000 fd2a 	bl	800d420 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 800c9cc:	4603      	mov	r3, r0
			  __node_gen);
 800c9ce:	e007      	b.n	800c9e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800c9d0:	693a      	ldr	r2, [r7, #16]
 800c9d2:	f107 031c 	add.w	r3, r7, #28
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fc fcf7 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800c9de:	69fb      	ldr	r3, [r7, #28]
    }
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3720      	adds	r7, #32
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bdb0      	pop	{r4, r5, r7, pc}

0800c9e8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>:
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>:
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fd51 	bl	800d4b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b084      	sub	sp, #16
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	60f8      	str	r0, [r7, #12]
 800ca22:	60b9      	str	r1, [r7, #8]
 800ca24:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fd4e 	bl	800d4c8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	4619      	mov	r1, r3
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f000 fd54 	bl	800d4de <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	68b9      	ldr	r1, [r7, #8]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fc61 	bl	800d302 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3304      	adds	r3, #4
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7f9 fee3 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>:
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	4618      	mov	r0, r3
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	683a      	ldr	r2, [r7, #0]
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	1d1a      	adds	r2, r3, #4
 800ca96:	f107 030c 	add.w	r3, r7, #12
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 fd2c 	bl	800d4fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800cacc:	b5b0      	push	{r4, r5, r7, lr}
 800cace:	b08a      	sub	sp, #40	; 0x28
 800cad0:	af02      	add	r7, sp, #8
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800cada:	f107 0318 	add.w	r3, r7, #24
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fe3c 	bl	800d75e <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f107 0010 	add.w	r0, r7, #16
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	68f9      	ldr	r1, [r7, #12]
 800caf0:	f000 fd12 	bl	800d518 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00f      	beq.n	800cb1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800cafa:	693c      	ldr	r4, [r7, #16]
 800cafc:	697d      	ldr	r5, [r7, #20]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fe39 	bl	800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800cb04:	4602      	mov	r2, r0
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	462a      	mov	r2, r5
 800cb0e:	4621      	mov	r1, r4
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f000 fe3b 	bl	800d78c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 800cb16:	4603      	mov	r3, r0
			  __node_gen);
 800cb18:	e007      	b.n	800cb2a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	f107 031c 	add.w	r3, r7, #28
 800cb20:	4611      	mov	r1, r2
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 fce9 	bl	800d4fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800cb28:	69fb      	ldr	r3, [r7, #28]
    }
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3720      	adds	r7, #32
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bdb0      	pop	{r4, r5, r7, pc}

0800cb32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800cb32:	b480      	push	{r7}
 800cb34:	b083      	sub	sp, #12
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800cb4a:	b480      	push	{r7}
 800cb4c:	b083      	sub	sp, #12
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	4618      	mov	r0, r3
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fe55 	bl	800d81e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800cb74:	6839      	ldr	r1, [r7, #0]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fe66 	bl	800d848 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>:
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4618      	mov	r0, r3
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>:
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fe60 	bl	800d86c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	60b9      	str	r1, [r7, #8]
 800cbc0:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 fe5d 	bl	800d882 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	4619      	mov	r1, r3
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f000 fe63 	bl	800d898 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	68b9      	ldr	r1, [r7, #8]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 fb93 	bl	800d302 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	3304      	adds	r3, #4
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7f9 fe15 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>:
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	370c      	adds	r7, #12
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	1d1a      	adds	r2, r3, #4
 800cc32:	f107 030c 	add.w	r3, r7, #12
 800cc36:	4611      	mov	r1, r2
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 fe3b 	bl	800d8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	4618      	mov	r0, r3
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800cc68:	b5b0      	push	{r4, r5, r7, lr}
 800cc6a:	b08a      	sub	sp, #40	; 0x28
 800cc6c:	af02      	add	r7, sp, #8
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800cc76:	f107 0318 	add.w	r3, r7, #24
 800cc7a:	6879      	ldr	r1, [r7, #4]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 ff4b 	bl	800db18 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 800cc82:	4603      	mov	r3, r0
 800cc84:	f107 0010 	add.w	r0, r7, #16
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	f000 fe21 	bl	800d8d2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00f      	beq.n	800ccb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800cc96:	693c      	ldr	r4, [r7, #16]
 800cc98:	697d      	ldr	r5, [r7, #20]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 ff48 	bl	800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800cca0:	4602      	mov	r2, r0
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	4613      	mov	r3, r2
 800cca8:	462a      	mov	r2, r5
 800ccaa:	4621      	mov	r1, r4
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f000 ff4a 	bl	800db46 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 800ccb2:	4603      	mov	r3, r0
			  __node_gen);
 800ccb4:	e007      	b.n	800ccc6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	f107 031c 	add.w	r3, r7, #28
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 fdf8 	bl	800d8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800ccc4:	69fb      	ldr	r3, [r7, #28]
    }
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3720      	adds	r7, #32
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bdb0      	pop	{r4, r5, r7, pc}

0800ccce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800ccce:	b480      	push	{r7}
 800ccd0:	b083      	sub	sp, #12
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b082      	sub	sp, #8
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 ff64 	bl	800dbd8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 ff75 	bl	800dc02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	4611      	mov	r1, r2
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 ff78 	bl	800dc26 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f103 0208 	add.w	r2, r3, #8
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	3308      	adds	r3, #8
 800cd40:	4619      	mov	r1, r3
 800cd42:	4610      	mov	r0, r2
 800cd44:	f000 ff96 	bl	800dc74 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f103 020c 	add.w	r2, r3, #12
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	330c      	adds	r3, #12
 800cd52:	4619      	mov	r1, r3
 800cd54:	4610      	mov	r0, r2
 800cd56:	f000 ffac 	bl	800dcb2 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>:
 800cd62:	b480      	push	{r7}
 800cd64:	b083      	sub	sp, #12
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	6039      	str	r1, [r7, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>:
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	6039      	str	r1, [r7, #0]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 ffb3 	bl	800dcf0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 ffb0 	bl	800dd06 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>
 800cda6:	4603      	mov	r3, r0
 800cda8:	4619      	mov	r1, r3
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 ffb6 	bl	800dd1c <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f000 ffbf 	bl	800dd38 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7f9 fd26 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>:
 800cdce:	b480      	push	{r7}
 800cdd0:	b083      	sub	sp, #12
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	4618      	mov	r0, r3
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	601a      	str	r2, [r3, #0]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	1d1a      	adds	r2, r3, #4
 800ce10:	f107 030c 	add.w	r3, r7, #12
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 ff9a 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800ce26:	b480      	push	{r7}
 800ce28:	b083      	sub	sp, #12
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ce46:	b5b0      	push	{r4, r5, r7, lr}
 800ce48:	b08a      	sub	sp, #40	; 0x28
 800ce4a:	af02      	add	r7, sp, #8
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
 800ce52:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800ce54:	f107 0318 	add.w	r3, r7, #24
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f001 f8aa 	bl	800dfb4 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 800ce60:	4603      	mov	r3, r0
 800ce62:	f107 0010 	add.w	r0, r7, #16
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	68f9      	ldr	r1, [r7, #12]
 800ce6a:	f000 ff80 	bl	800dd6e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
      if (__res.second)
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00f      	beq.n	800ce94 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800ce74:	693c      	ldr	r4, [r7, #16]
 800ce76:	697d      	ldr	r5, [r7, #20]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f001 f8a7 	bl	800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	4613      	mov	r3, r2
 800ce86:	462a      	mov	r2, r5
 800ce88:	4621      	mov	r1, r4
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f001 f8a9 	bl	800dfe2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 800ce90:	4603      	mov	r3, r0
			  __node_gen);
 800ce92:	e007      	b.n	800cea4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800ce94:	693a      	ldr	r2, [r7, #16]
 800ce96:	f107 031c 	add.w	r3, r7, #28
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 ff57 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800cea2:	69fb      	ldr	r3, [r7, #28]
    }
 800cea4:	4618      	mov	r0, r3
 800cea6:	3720      	adds	r7, #32
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bdb0      	pop	{r4, r5, r7, pc}

0800ceac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	4618      	mov	r0, r3
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f001 f8c3 	bl	800e074 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f001 f8d4 	bl	800e09e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f001 f8c3 	bl	800e0c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800cf46:	b480      	push	{r7}
 800cf48:	b083      	sub	sp, #12
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
      { }
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4618      	mov	r0, r3
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800cf5e:	b480      	push	{r7}
 800cf60:	b083      	sub	sp, #12
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4618      	mov	r0, r3
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800cf7c:	b590      	push	{r4, r7, lr}
 800cf7e:	b08d      	sub	sp, #52	; 0x34
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
 800cf88:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800cf8a:	1d3b      	adds	r3, r7, #4
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f001 f8a4 	bl	800e0da <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>
 800cf92:	4603      	mov	r3, r0
 800cf94:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800cf96:	69bc      	ldr	r4, [r7, #24]
 800cf98:	68b8      	ldr	r0, [r7, #8]
 800cf9a:	f001 f8af 	bl	800e0fc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	bf0c      	ite	eq
 800cfa4:	2301      	moveq	r3, #1
 800cfa6:	2300      	movne	r3, #0
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d030      	beq.n	800d010 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	f001 f8b0 	bl	800e114 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 800cfb4:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d013      	beq.n	800cfe2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 800cfba:	68bc      	ldr	r4, [r7, #8]
 800cfbc:	68b8      	ldr	r0, [r7, #8]
 800cfbe:	f001 f8b5 	bl	800e12c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f001 f8bc 	bl	800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f7fa fffd 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e000      	b.n	800cfe4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 800cfe2:	2300      	movs	r3, #0
	  if (size() > 0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00c      	beq.n	800d002 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 800cfe8:	2300      	movs	r3, #0
 800cfea:	61fb      	str	r3, [r7, #28]
 800cfec:	68b8      	ldr	r0, [r7, #8]
 800cfee:	f001 f89d 	bl	800e12c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800cff2:	4602      	mov	r2, r0
 800cff4:	f107 031c 	add.w	r3, r7, #28
 800cff8:	4619      	mov	r1, r3
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7fc fc39 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d000:	e0db      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	683a      	ldr	r2, [r7, #0]
 800d006:	68b9      	ldr	r1, [r7, #8]
 800d008:	4618      	mov	r0, r3
 800d00a:	f001 f8a7 	bl	800e15c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800d00e:	e0d4      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800d010:	68bc      	ldr	r4, [r7, #8]
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	4618      	mov	r0, r3
 800d016:	f001 f895 	bl	800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d01a:	4603      	mov	r3, r0
 800d01c:	461a      	mov	r2, r3
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	4620      	mov	r0, r4
 800d022:	f7fa ffd6 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d057      	beq.n	800d0dc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800d030:	69bc      	ldr	r4, [r7, #24]
 800d032:	68b8      	ldr	r0, [r7, #8]
 800d034:	f001 f917 	bl	800e266 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 800d038:	4603      	mov	r3, r0
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	429c      	cmp	r4, r3
 800d03e:	bf0c      	ite	eq
 800d040:	2301      	moveq	r3, #1
 800d042:	2300      	movne	r3, #0
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00d      	beq.n	800d066 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800d04a:	68b8      	ldr	r0, [r7, #8]
 800d04c:	f001 f90b 	bl	800e266 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 800d050:	4604      	mov	r4, r0
 800d052:	68b8      	ldr	r0, [r7, #8]
 800d054:	f001 f907 	bl	800e266 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 800d058:	4603      	mov	r3, r0
 800d05a:	461a      	mov	r2, r3
 800d05c:	4621      	mov	r1, r4
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f7fc fcae 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d064:	e0a9      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800d066:	68bc      	ldr	r4, [r7, #8]
 800d068:	f107 0314 	add.w	r3, r7, #20
 800d06c:	4618      	mov	r0, r3
 800d06e:	f001 f906 	bl	800e27e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
 800d072:	4603      	mov	r3, r0
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4618      	mov	r0, r3
 800d078:	f001 f864 	bl	800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d07c:	4603      	mov	r3, r0
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	4619      	mov	r1, r3
 800d082:	4620      	mov	r0, r4
 800d084:	f7fa ffa5 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d01f      	beq.n	800d0ce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	4618      	mov	r0, r3
 800d092:	f7ff fb6d 	bl	800c770 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bf0c      	ite	eq
 800d09c:	2301      	moveq	r3, #1
 800d09e:	2300      	movne	r3, #0
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00a      	beq.n	800d0bc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	623b      	str	r3, [r7, #32]
 800d0aa:	f107 0214 	add.w	r2, r7, #20
 800d0ae:	f107 0320 	add.w	r3, r7, #32
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f7fc fbdc 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d0ba:	e07e      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800d0bc:	f107 0218 	add.w	r2, r7, #24
 800d0c0:	f107 0318 	add.w	r3, r7, #24
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f7fc fc7a 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d0cc:	e075      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	68b9      	ldr	r1, [r7, #8]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f001 f841 	bl	800e15c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800d0da:	e06e      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800d0dc:	68bc      	ldr	r4, [r7, #8]
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f001 f82f 	bl	800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f7fa ff70 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d056      	beq.n	800d1a6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800d0fc:	69bc      	ldr	r4, [r7, #24]
 800d0fe:	68b8      	ldr	r0, [r7, #8]
 800d100:	f001 f814 	bl	800e12c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800d104:	4603      	mov	r3, r0
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	429c      	cmp	r4, r3
 800d10a:	bf0c      	ite	eq
 800d10c:	2301      	moveq	r3, #1
 800d10e:	2300      	movne	r3, #0
 800d110:	b2db      	uxtb	r3, r3
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00c      	beq.n	800d130 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 800d116:	2300      	movs	r3, #0
 800d118:	627b      	str	r3, [r7, #36]	; 0x24
 800d11a:	68b8      	ldr	r0, [r7, #8]
 800d11c:	f001 f806 	bl	800e12c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800d120:	4602      	mov	r2, r0
 800d122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d126:	4619      	mov	r1, r3
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fc fba2 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d12e:	e044      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800d130:	68bc      	ldr	r4, [r7, #8]
 800d132:	f107 0310 	add.w	r3, r7, #16
 800d136:	4618      	mov	r0, r3
 800d138:	f001 f8b2 	bl	800e2a0 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>
 800d13c:	4603      	mov	r3, r0
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4618      	mov	r0, r3
 800d142:	f000 ffff 	bl	800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d146:	4603      	mov	r3, r0
 800d148:	461a      	mov	r2, r3
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	4620      	mov	r0, r4
 800d14e:	f7fa ff40 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d01f      	beq.n	800d198 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7ff fb08 	bl	800c770 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	bf0c      	ite	eq
 800d166:	2301      	moveq	r3, #1
 800d168:	2300      	movne	r3, #0
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00a      	beq.n	800d186 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 800d170:	2300      	movs	r3, #0
 800d172:	62bb      	str	r3, [r7, #40]	; 0x28
 800d174:	f107 0218 	add.w	r2, r7, #24
 800d178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d17c:	4619      	mov	r1, r3
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f7fc fb77 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d184:	e019      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800d186:	f107 0210 	add.w	r2, r7, #16
 800d18a:	f107 0310 	add.w	r3, r7, #16
 800d18e:	4619      	mov	r1, r3
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7fc fc15 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d196:	e010      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	683a      	ldr	r2, [r7, #0]
 800d19c:	68b9      	ldr	r1, [r7, #8]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f000 ffdc 	bl	800e15c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800d1a4:	e009      	b.n	800d1ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d1ae:	f107 0318 	add.w	r3, r7, #24
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7fc fc3e 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	3734      	adds	r7, #52	; 0x34
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd90      	pop	{r4, r7, pc}

0800d1c2 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>:
      operator()(const _Pair& __x) const
 800d1c2:	b480      	push	{r7}
 800d1c4:	b083      	sub	sp, #12
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d1f0:	b5b0      	push	{r4, r5, r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d11a      	bne.n	800d23a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f000 ff79 	bl	800e0fc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 800d20a:	4602      	mov	r2, r0
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4293      	cmp	r3, r2
 800d210:	d013      	beq.n	800d23a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d212:	68fc      	ldr	r4, [r7, #12]
 800d214:	f107 0310 	add.w	r3, r7, #16
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7ff ffd1 	bl	800d1c2 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 800d220:	4605      	mov	r5, r0
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 ff8e 	bl	800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d228:	4603      	mov	r3, r0
 800d22a:	461a      	mov	r2, r3
 800d22c:	4629      	mov	r1, r5
 800d22e:	4620      	mov	r0, r4
 800d230:	f7fa fecf 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 800d23a:	2301      	movs	r3, #1
 800d23c:	e000      	b.n	800d240 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 800d23e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d240:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800d242:	6838      	ldr	r0, [r7, #0]
 800d244:	f7ff ffc9 	bl	800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d248:	4603      	mov	r3, r0
 800d24a:	4619      	mov	r1, r3
 800d24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d24e:	f001 f838 	bl	800e2c2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 800d252:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800d258:	7ff8      	ldrb	r0, [r7, #31]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	69b9      	ldr	r1, [r7, #24]
 800d25e:	f005 ffe8 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	695b      	ldr	r3, [r3, #20]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800d26c:	f107 0314 	add.w	r3, r7, #20
 800d270:	69b9      	ldr	r1, [r7, #24]
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff fe73 	bl	800cf5e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 800d278:	697b      	ldr	r3, [r7, #20]
      }
 800d27a:	4618      	mov	r0, r3
 800d27c:	3720      	adds	r7, #32
 800d27e:	46bd      	mov	sp, r7
 800d280:	bdb0      	pop	{r4, r5, r7, pc}

0800d282 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800d282:	b590      	push	{r4, r7, lr}
 800d284:	b083      	sub	sp, #12
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f001 f82c 	bl	800e2ea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800d292:	4604      	mov	r4, r0
 800d294:	6838      	ldr	r0, [r7, #0]
 800d296:	f001 f833 	bl	800e300 <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 800d29a:	4603      	mov	r3, r0
 800d29c:	4619      	mov	r1, r3
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f001 f83c 	bl	800e31c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>
      }
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd90      	pop	{r4, r7, pc}

0800d2ac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f001 f817 	bl	800e2ea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2201      	movs	r2, #1
 800d2c0:	6839      	ldr	r1, [r7, #0]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f001 f836 	bl	800e334 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b082      	sub	sp, #8
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f001 f83d 	bl	800e372 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1ERKS9_>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800d302:	b480      	push	{r7}
 800d304:	b083      	sub	sp, #12
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	6039      	str	r1, [r7, #0]
      { }
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4618      	mov	r0, r3
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d330:	b5b0      	push	{r4, r5, r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
 800d33c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d11a      	bne.n	800d37a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7fc fbb2 	bl	8009aae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800d34a:	4602      	mov	r2, r0
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4293      	cmp	r3, r2
 800d350:	d013      	beq.n	800d37a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d352:	68fc      	ldr	r4, [r7, #12]
 800d354:	f107 0310 	add.w	r3, r7, #16
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fc fcc6 	bl	8009cec <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>
 800d360:	4605      	mov	r5, r0
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7fb f90b 	bl	800857e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	4629      	mov	r1, r5
 800d36e:	4620      	mov	r0, r4
 800d370:	f7fa fc45 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 800d37a:	2301      	movs	r3, #1
 800d37c:	e000      	b.n	800d380 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 800d37e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d380:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800d382:	6838      	ldr	r0, [r7, #0]
 800d384:	f7ff ffc9 	bl	800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d388:	4603      	mov	r3, r0
 800d38a:	4619      	mov	r1, r3
 800d38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d38e:	f000 fffc 	bl	800e38a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 800d392:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800d398:	7ff8      	ldrb	r0, [r7, #31]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	69b9      	ldr	r1, [r7, #24]
 800d39e:	f005 ff48 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	695b      	ldr	r3, [r3, #20]
 800d3a6:	1c5a      	adds	r2, r3, #1
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800d3ac:	f107 0314 	add.w	r3, r7, #20
 800d3b0:	69b9      	ldr	r1, [r7, #24]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fb fc77 	bl	8008ca6 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800d3b8:	697b      	ldr	r3, [r7, #20]
      }
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3720      	adds	r7, #32
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bdb0      	pop	{r4, r5, r7, pc}

0800d3c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEEC1Ev>:
 800d3c2:	b480      	push	{r7}
 800d3c4:	b083      	sub	sp, #12
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	370c      	adds	r7, #12
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEEC1ERKS8_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 ffd9 	bl	800e3b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEEC1ERKSA_>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d420:	b5b0      	push	{r4, r5, r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
 800d42c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d11a      	bne.n	800d46a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f7fc fd12 	bl	8009e5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 800d43a:	4602      	mov	r2, r0
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4293      	cmp	r3, r2
 800d440:	d013      	beq.n	800d46a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d442:	68fc      	ldr	r4, [r7, #12]
 800d444:	f107 0310 	add.w	r3, r7, #16
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fc fe97 	bl	800a17e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>
 800d450:	4605      	mov	r5, r0
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7fb fd5d 	bl	8008f12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d458:	4603      	mov	r3, r0
 800d45a:	461a      	mov	r2, r3
 800d45c:	4629      	mov	r1, r5
 800d45e:	4620      	mov	r0, r4
 800d460:	f7fa fdb7 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e000      	b.n	800d470 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 800d46e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d470:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800d472:	6838      	ldr	r0, [r7, #0]
 800d474:	f7ff ffc9 	bl	800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800d478:	4603      	mov	r3, r0
 800d47a:	4619      	mov	r1, r3
 800d47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d47e:	f000 ffa4 	bl	800e3ca <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 800d482:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800d488:	7ff8      	ldrb	r0, [r7, #31]
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	69b9      	ldr	r1, [r7, #24]
 800d48e:	f005 fed0 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800d49c:	f107 0314 	add.w	r3, r7, #20
 800d4a0:	69b9      	ldr	r1, [r7, #24]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fb ff92 	bl	80093cc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800d4a8:	697b      	ldr	r3, [r7, #20]
      }
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3720      	adds	r7, #32
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bdb0      	pop	{r4, r5, r7, pc}

0800d4b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>:
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800d4e8:	6839      	ldr	r1, [r7, #0]
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 ff81 	bl	800e3f2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800d4fa:	b480      	push	{r7}
 800d4fc:	b083      	sub	sp, #12
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4618      	mov	r0, r3
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d518:	b590      	push	{r4, r7, lr}
 800d51a:	b08d      	sub	sp, #52	; 0x34
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800d526:	1d3b      	adds	r3, r7, #4
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 ff6e 	bl	800e40a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>
 800d52e:	4603      	mov	r3, r0
 800d530:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800d532:	69bc      	ldr	r4, [r7, #24]
 800d534:	68b8      	ldr	r0, [r7, #8]
 800d536:	f000 ff79 	bl	800e42c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800d53a:	4603      	mov	r3, r0
 800d53c:	429c      	cmp	r4, r3
 800d53e:	bf0c      	ite	eq
 800d540:	2301      	moveq	r3, #1
 800d542:	2300      	movne	r3, #0
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d030      	beq.n	800d5ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 800d54a:	68b8      	ldr	r0, [r7, #8]
 800d54c:	f000 ff7a 	bl	800e444 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 800d550:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800d552:	2b00      	cmp	r3, #0
 800d554:	d013      	beq.n	800d57e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 800d556:	68bc      	ldr	r4, [r7, #8]
 800d558:	68b8      	ldr	r0, [r7, #8]
 800d55a:	f000 ff7f 	bl	800e45c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800d55e:	4603      	mov	r3, r0
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4618      	mov	r0, r3
 800d564:	f000 ff86 	bl	800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d568:	4603      	mov	r3, r0
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	4619      	mov	r1, r3
 800d56e:	4620      	mov	r0, r4
 800d570:	f7fa fb45 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 800d57e:	2300      	movs	r3, #0
	  if (size() > 0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00c      	beq.n	800d59e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800d584:	2300      	movs	r3, #0
 800d586:	61fb      	str	r3, [r7, #28]
 800d588:	68b8      	ldr	r0, [r7, #8]
 800d58a:	f000 ff67 	bl	800e45c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800d58e:	4602      	mov	r2, r0
 800d590:	f107 031c 	add.w	r3, r7, #28
 800d594:	4619      	mov	r1, r3
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f7fc f96b 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d59c:	e0db      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 ff71 	bl	800e48c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800d5aa:	e0d4      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800d5ac:	68bc      	ldr	r4, [r7, #8]
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 ff5f 	bl	800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f7fa fb1e 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d057      	beq.n	800d678 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800d5cc:	69bc      	ldr	r4, [r7, #24]
 800d5ce:	68b8      	ldr	r0, [r7, #8]
 800d5d0:	f000 ffe1 	bl	800e596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	429c      	cmp	r4, r3
 800d5da:	bf0c      	ite	eq
 800d5dc:	2301      	moveq	r3, #1
 800d5de:	2300      	movne	r3, #0
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00d      	beq.n	800d602 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800d5e6:	68b8      	ldr	r0, [r7, #8]
 800d5e8:	f000 ffd5 	bl	800e596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	68b8      	ldr	r0, [r7, #8]
 800d5f0:	f000 ffd1 	bl	800e596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7fc f9e0 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d600:	e0a9      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800d602:	68bc      	ldr	r4, [r7, #8]
 800d604:	f107 0314 	add.w	r3, r7, #20
 800d608:	4618      	mov	r0, r3
 800d60a:	f000 ffd0 	bl	800e5ae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
 800d60e:	4603      	mov	r3, r0
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4618      	mov	r0, r3
 800d614:	f000 ff2e 	bl	800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d618:	4603      	mov	r3, r0
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	4619      	mov	r1, r3
 800d61e:	4620      	mov	r0, r4
 800d620:	f7fa faed 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d01f      	beq.n	800d66a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff fa80 	bl	800cb32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	bf0c      	ite	eq
 800d638:	2301      	moveq	r3, #1
 800d63a:	2300      	movne	r3, #0
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00a      	beq.n	800d658 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800d642:	2300      	movs	r3, #0
 800d644:	623b      	str	r3, [r7, #32]
 800d646:	f107 0214 	add.w	r2, r7, #20
 800d64a:	f107 0320 	add.w	r3, r7, #32
 800d64e:	4619      	mov	r1, r3
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7fc f90e 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d656:	e07e      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800d658:	f107 0218 	add.w	r2, r7, #24
 800d65c:	f107 0318 	add.w	r3, r7, #24
 800d660:	4619      	mov	r1, r3
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f7fc f9ac 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d668:	e075      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	68b9      	ldr	r1, [r7, #8]
 800d670:	4618      	mov	r0, r3
 800d672:	f000 ff0b 	bl	800e48c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800d676:	e06e      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800d678:	68bc      	ldr	r4, [r7, #8]
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 fef9 	bl	800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d682:	4603      	mov	r3, r0
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	4619      	mov	r1, r3
 800d688:	4620      	mov	r0, r4
 800d68a:	f7fa fab8 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d056      	beq.n	800d742 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800d698:	69bc      	ldr	r4, [r7, #24]
 800d69a:	68b8      	ldr	r0, [r7, #8]
 800d69c:	f000 fede 	bl	800e45c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	bf0c      	ite	eq
 800d6a8:	2301      	moveq	r3, #1
 800d6aa:	2300      	movne	r3, #0
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00c      	beq.n	800d6cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	627b      	str	r3, [r7, #36]	; 0x24
 800d6b6:	68b8      	ldr	r0, [r7, #8]
 800d6b8:	f000 fed0 	bl	800e45c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f7fc f8d4 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d6ca:	e044      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800d6cc:	68bc      	ldr	r4, [r7, #8]
 800d6ce:	f107 0310 	add.w	r3, r7, #16
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 ff7c 	bl	800e5d0 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 fec9 	bl	800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f7fa fa88 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d01f      	beq.n	800d734 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff fa1b 	bl	800cb32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	bf0c      	ite	eq
 800d702:	2301      	moveq	r3, #1
 800d704:	2300      	movne	r3, #0
 800d706:	b2db      	uxtb	r3, r3
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00a      	beq.n	800d722 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800d70c:	2300      	movs	r3, #0
 800d70e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d710:	f107 0218 	add.w	r2, r7, #24
 800d714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d718:	4619      	mov	r1, r3
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f7fc f8a9 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d720:	e019      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800d722:	f107 0210 	add.w	r2, r7, #16
 800d726:	f107 0310 	add.w	r3, r7, #16
 800d72a:	4619      	mov	r1, r3
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f7fc f947 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d732:	e010      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	68b9      	ldr	r1, [r7, #8]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 fea6 	bl	800e48c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800d740:	e009      	b.n	800d756 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800d742:	2300      	movs	r3, #0
 800d744:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d746:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d74a:	f107 0318 	add.w	r3, r7, #24
 800d74e:	4619      	mov	r1, r3
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7fc f970 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	3734      	adds	r7, #52	; 0x34
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd90      	pop	{r4, r7, pc}

0800d75e <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 800d75e:	b480      	push	{r7}
 800d760:	b083      	sub	sp, #12
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	370c      	adds	r7, #12
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d776:	b480      	push	{r7}
 800d778:	b083      	sub	sp, #12
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4618      	mov	r0, r3
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d78c:	b5b0      	push	{r4, r5, r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d11a      	bne.n	800d7d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 fe43 	bl	800e42c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d013      	beq.n	800d7d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800d7ae:	68fc      	ldr	r4, [r7, #12]
 800d7b0:	f107 0310 	add.w	r3, r7, #16
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7ff ffd1 	bl	800d75e <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 800d7bc:	4605      	mov	r5, r0
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 fe58 	bl	800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f7fa fa17 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e000      	b.n	800d7dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 800d7da:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800d7dc:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800d7de:	6838      	ldr	r0, [r7, #0]
 800d7e0:	f7ff ffc9 	bl	800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ea:	f000 ff02 	bl	800e5f2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 800d7ee:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800d7f4:	7ff8      	ldrb	r0, [r7, #31]
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	69b9      	ldr	r1, [r7, #24]
 800d7fa:	f005 fd1a 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800d808:	f107 0314 	add.w	r3, r7, #20
 800d80c:	69b9      	ldr	r1, [r7, #24]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7ff fe73 	bl	800d4fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800d814:	697b      	ldr	r3, [r7, #20]
      }
 800d816:	4618      	mov	r0, r3
 800d818:	3720      	adds	r7, #32
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bdb0      	pop	{r4, r5, r7, pc}

0800d81e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800d81e:	b590      	push	{r4, r7, lr}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fef6 	bl	800e61a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800d82e:	4604      	mov	r4, r0
 800d830:	6838      	ldr	r0, [r7, #0]
 800d832:	f000 fefd 	bl	800e630 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 800d836:	4603      	mov	r3, r0
 800d838:	4619      	mov	r1, r3
 800d83a:	4620      	mov	r0, r4
 800d83c:	f000 ff06 	bl	800e64c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	bd90      	pop	{r4, r7, pc}

0800d848 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 fee1 	bl	800e61a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800d858:	4603      	mov	r3, r0
 800d85a:	2201      	movs	r2, #1
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	4618      	mov	r0, r3
 800d860:	f000 ff00 	bl	800e664 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>:
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4618      	mov	r0, r3
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800d8a2:	6839      	ldr	r1, [r7, #0]
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 fefc 	bl	800e6a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800d8d2:	b590      	push	{r4, r7, lr}
 800d8d4:	b08d      	sub	sp, #52	; 0x34
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	60b9      	str	r1, [r7, #8]
 800d8dc:	607a      	str	r2, [r7, #4]
 800d8de:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800d8e0:	1d3b      	adds	r3, r7, #4
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f000 fee9 	bl	800e6ba <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800d8ec:	69bc      	ldr	r4, [r7, #24]
 800d8ee:	68b8      	ldr	r0, [r7, #8]
 800d8f0:	f000 fef4 	bl	800e6dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	429c      	cmp	r4, r3
 800d8f8:	bf0c      	ite	eq
 800d8fa:	2301      	moveq	r3, #1
 800d8fc:	2300      	movne	r3, #0
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b00      	cmp	r3, #0
 800d902:	d030      	beq.n	800d966 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 800d904:	68b8      	ldr	r0, [r7, #8]
 800d906:	f000 fef5 	bl	800e6f4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 800d90a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d013      	beq.n	800d938 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 800d910:	68bc      	ldr	r4, [r7, #8]
 800d912:	68b8      	ldr	r0, [r7, #8]
 800d914:	f000 fefa 	bl	800e70c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800d918:	4603      	mov	r3, r0
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 ff01 	bl	800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d922:	4603      	mov	r3, r0
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	4619      	mov	r1, r3
 800d928:	4620      	mov	r0, r4
 800d92a:	f7fa f968 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 800d934:	2301      	movs	r3, #1
 800d936:	e000      	b.n	800d93a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 800d938:	2300      	movs	r3, #0
	  if (size() > 0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00c      	beq.n	800d958 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800d93e:	2300      	movs	r3, #0
 800d940:	61fb      	str	r3, [r7, #28]
 800d942:	68b8      	ldr	r0, [r7, #8]
 800d944:	f000 fee2 	bl	800e70c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800d948:	4602      	mov	r2, r0
 800d94a:	f107 031c 	add.w	r3, r7, #28
 800d94e:	4619      	mov	r1, r3
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7fb ff8e 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800d956:	e0db      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	68b9      	ldr	r1, [r7, #8]
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 feec 	bl	800e73c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800d964:	e0d4      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800d966:	68bc      	ldr	r4, [r7, #8]
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 feda 	bl	800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d970:	4603      	mov	r3, r0
 800d972:	461a      	mov	r2, r3
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	4620      	mov	r0, r4
 800d978:	f7fa f941 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d057      	beq.n	800da32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800d986:	69bc      	ldr	r4, [r7, #24]
 800d988:	68b8      	ldr	r0, [r7, #8]
 800d98a:	f000 ff5c 	bl	800e846 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800d98e:	4603      	mov	r3, r0
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	429c      	cmp	r4, r3
 800d994:	bf0c      	ite	eq
 800d996:	2301      	moveq	r3, #1
 800d998:	2300      	movne	r3, #0
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00d      	beq.n	800d9bc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800d9a0:	68b8      	ldr	r0, [r7, #8]
 800d9a2:	f000 ff50 	bl	800e846 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	68b8      	ldr	r0, [r7, #8]
 800d9aa:	f000 ff4c 	bl	800e846 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f7fc f803 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800d9ba:	e0a9      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800d9bc:	68bc      	ldr	r4, [r7, #8]
 800d9be:	f107 0314 	add.w	r3, r7, #20
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 ff4b 	bl	800e85e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f000 fea9 	bl	800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	4620      	mov	r0, r4
 800d9da:	f7fa f910 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d01f      	beq.n	800da24 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff f971 	bl	800ccce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bf0c      	ite	eq
 800d9f2:	2301      	moveq	r3, #1
 800d9f4:	2300      	movne	r3, #0
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00a      	beq.n	800da12 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	623b      	str	r3, [r7, #32]
 800da00:	f107 0214 	add.w	r2, r7, #20
 800da04:	f107 0320 	add.w	r3, r7, #32
 800da08:	4619      	mov	r1, r3
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f7fb ff31 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800da10:	e07e      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800da12:	f107 0218 	add.w	r2, r7, #24
 800da16:	f107 0318 	add.w	r3, r7, #24
 800da1a:	4619      	mov	r1, r3
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7fb ffcf 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800da22:	e075      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	68b9      	ldr	r1, [r7, #8]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 fe86 	bl	800e73c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800da30:	e06e      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800da32:	68bc      	ldr	r4, [r7, #8]
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	4618      	mov	r0, r3
 800da38:	f000 fe74 	bl	800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800da3c:	4603      	mov	r3, r0
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	4619      	mov	r1, r3
 800da42:	4620      	mov	r0, r4
 800da44:	f7fa f8db 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d056      	beq.n	800dafc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800da52:	69bc      	ldr	r4, [r7, #24]
 800da54:	68b8      	ldr	r0, [r7, #8]
 800da56:	f000 fe59 	bl	800e70c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800da5a:	4603      	mov	r3, r0
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	429c      	cmp	r4, r3
 800da60:	bf0c      	ite	eq
 800da62:	2301      	moveq	r3, #1
 800da64:	2300      	movne	r3, #0
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00c      	beq.n	800da86 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800da6c:	2300      	movs	r3, #0
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
 800da70:	68b8      	ldr	r0, [r7, #8]
 800da72:	f000 fe4b 	bl	800e70c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800da76:	4602      	mov	r2, r0
 800da78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da7c:	4619      	mov	r1, r3
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f7fb fef7 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800da84:	e044      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800da86:	68bc      	ldr	r4, [r7, #8]
 800da88:	f107 0310 	add.w	r3, r7, #16
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 fef7 	bl	800e880 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>
 800da92:	4603      	mov	r3, r0
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4618      	mov	r0, r3
 800da98:	f000 fe44 	bl	800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800da9c:	4603      	mov	r3, r0
 800da9e:	461a      	mov	r2, r3
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	4620      	mov	r0, r4
 800daa4:	f7fa f8ab 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d01f      	beq.n	800daee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff f90c 	bl	800ccce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	bf0c      	ite	eq
 800dabc:	2301      	moveq	r3, #1
 800dabe:	2300      	movne	r3, #0
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800dac6:	2300      	movs	r3, #0
 800dac8:	62bb      	str	r3, [r7, #40]	; 0x28
 800daca:	f107 0218 	add.w	r2, r7, #24
 800dace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dad2:	4619      	mov	r1, r3
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7fb fecc 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800dada:	e019      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800dadc:	f107 0210 	add.w	r2, r7, #16
 800dae0:	f107 0310 	add.w	r3, r7, #16
 800dae4:	4619      	mov	r1, r3
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f7fb ff6a 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800daec:	e010      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	68b9      	ldr	r1, [r7, #8]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 fe21 	bl	800e73c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800dafa:	e009      	b.n	800db10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800dafc:	2300      	movs	r3, #0
 800dafe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db00:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800db04:	f107 0318 	add.w	r3, r7, #24
 800db08:	4619      	mov	r1, r3
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7fb ff93 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	3734      	adds	r7, #52	; 0x34
 800db14:	46bd      	mov	sp, r7
 800db16:	bd90      	pop	{r4, r7, pc}

0800db18 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	4618      	mov	r0, r3
 800db26:	370c      	adds	r7, #12
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4618      	mov	r0, r3
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800db46:	b5b0      	push	{r4, r5, r7, lr}
 800db48:	b088      	sub	sp, #32
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	60f8      	str	r0, [r7, #12]
 800db4e:	60b9      	str	r1, [r7, #8]
 800db50:	607a      	str	r2, [r7, #4]
 800db52:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d11a      	bne.n	800db90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	f000 fdbe 	bl	800e6dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800db60:	4602      	mov	r2, r0
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4293      	cmp	r3, r2
 800db66:	d013      	beq.n	800db90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800db68:	68fc      	ldr	r4, [r7, #12]
 800db6a:	f107 0310 	add.w	r3, r7, #16
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	4618      	mov	r0, r3
 800db72:	f7ff ffd1 	bl	800db18 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 800db76:	4605      	mov	r5, r0
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fdd3 	bl	800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800db7e:	4603      	mov	r3, r0
 800db80:	461a      	mov	r2, r3
 800db82:	4629      	mov	r1, r5
 800db84:	4620      	mov	r0, r4
 800db86:	f7fa f83a 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 800db90:	2301      	movs	r3, #1
 800db92:	e000      	b.n	800db96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 800db94:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800db96:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800db98:	6838      	ldr	r0, [r7, #0]
 800db9a:	f7ff ffc9 	bl	800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800db9e:	4603      	mov	r3, r0
 800dba0:	4619      	mov	r1, r3
 800dba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dba4:	f000 fe7d 	bl	800e8a2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 800dba8:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800dbae:	7ff8      	ldrb	r0, [r7, #31]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	69b9      	ldr	r1, [r7, #24]
 800dbb4:	f005 fb3d 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800dbc2:	f107 0314 	add.w	r3, r7, #20
 800dbc6:	69b9      	ldr	r1, [r7, #24]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7ff fe73 	bl	800d8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800dbce:	697b      	ldr	r3, [r7, #20]
      }
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3720      	adds	r7, #32
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bdb0      	pop	{r4, r5, r7, pc}

0800dbd8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800dbd8:	b590      	push	{r4, r7, lr}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 fe71 	bl	800e8ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800dbe8:	4604      	mov	r4, r0
 800dbea:	6838      	ldr	r0, [r7, #0]
 800dbec:	f000 fe78 	bl	800e8e0 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 fe81 	bl	800e8fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 800dbfa:	bf00      	nop
 800dbfc:	370c      	adds	r7, #12
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd90      	pop	{r4, r7, pc}

0800dc02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fe5c 	bl	800e8ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2201      	movs	r2, #1
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 fe7b 	bl	800e914 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>
 800dc1e:	bf00      	nop
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b084      	sub	sp, #16
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fe8e 	bl	800e952 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800dc36:	4602      	mov	r2, r0
 800dc38:	f107 0308 	add.w	r3, r7, #8
 800dc3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc40:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800dc44:	6838      	ldr	r0, [r7, #0]
 800dc46:	f000 fe84 	bl	800e952 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc52:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800dc56:	f107 0308 	add.w	r3, r7, #8
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 fe79 	bl	800e952 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800dc60:	4602      	mov	r2, r0
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc68:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800dc6c:	bf00      	nop
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fe72 	bl	800e968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800dc84:	4603      	mov	r3, r0
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800dc8a:	6838      	ldr	r0, [r7, #0]
 800dc8c:	f000 fe6c 	bl	800e968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800dc90:	4603      	mov	r3, r0
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800dc98:	f107 030c 	add.w	r3, r7, #12
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 fe63 	bl	800e968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800dca2:	4603      	mov	r3, r0
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	601a      	str	r2, [r3, #0]
    }
 800dcaa:	bf00      	nop
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fe5e 	bl	800e97e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800dcc8:	6838      	ldr	r0, [r7, #0]
 800dcca:	f000 fe58 	bl	800e97e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800dcd6:	f107 030c 	add.w	r3, r7, #12
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 fe4f 	bl	800e97e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800dce0:	4603      	mov	r3, r0
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	601a      	str	r2, [r3, #0]
    }
 800dce8:	bf00      	nop
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>:
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	370c      	adds	r7, #12
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800dd06:	b480      	push	{r7}
 800dd08:	b083      	sub	sp, #12
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4618      	mov	r0, r3
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 fe33 	bl	800e994 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4618      	mov	r0, r3
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
      { }
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4618      	mov	r0, r3
 800dd46:	370c      	adds	r7, #12
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4618      	mov	r0, r3
 800dd64:	370c      	adds	r7, #12
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr

0800dd6e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800dd6e:	b590      	push	{r4, r7, lr}
 800dd70:	b08d      	sub	sp, #52	; 0x34
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60f8      	str	r0, [r7, #12]
 800dd76:	60b9      	str	r1, [r7, #8]
 800dd78:	607a      	str	r2, [r7, #4]
 800dd7a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800dd7c:	1d3b      	adds	r3, r7, #4
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 fe14 	bl	800e9ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>
 800dd84:	4603      	mov	r3, r0
 800dd86:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800dd88:	69bc      	ldr	r4, [r7, #24]
 800dd8a:	68b8      	ldr	r0, [r7, #8]
 800dd8c:	f000 fe1f 	bl	800e9ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 800dd90:	4603      	mov	r3, r0
 800dd92:	429c      	cmp	r4, r3
 800dd94:	bf0c      	ite	eq
 800dd96:	2301      	moveq	r3, #1
 800dd98:	2300      	movne	r3, #0
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d030      	beq.n	800de02 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 800dda0:	68b8      	ldr	r0, [r7, #8]
 800dda2:	f000 fe20 	bl	800e9e6 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 800dda6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d013      	beq.n	800ddd4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 800ddac:	68bc      	ldr	r4, [r7, #8]
 800ddae:	68b8      	ldr	r0, [r7, #8]
 800ddb0:	f000 fe25 	bl	800e9fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 fe2c 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f000 fe32 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e000      	b.n	800ddd6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 800ddd4:	2300      	movs	r3, #0
	  if (size() > 0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00c      	beq.n	800ddf4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 800ddda:	2300      	movs	r3, #0
 800dddc:	61fb      	str	r3, [r7, #28]
 800ddde:	68b8      	ldr	r0, [r7, #8]
 800dde0:	f000 fe0d 	bl	800e9fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 800dde4:	4602      	mov	r2, r0
 800dde6:	f107 031c 	add.w	r3, r7, #28
 800ddea:	4619      	mov	r1, r3
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f7fb fd40 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800ddf2:	e0db      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	68b9      	ldr	r1, [r7, #8]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f000 fe2c 	bl	800ea58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 800de00:	e0d4      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800de02:	68bc      	ldr	r4, [r7, #8]
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	4618      	mov	r0, r3
 800de08:	f000 fe05 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800de0c:	4603      	mov	r3, r0
 800de0e:	461a      	mov	r2, r3
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	4620      	mov	r0, r4
 800de14:	f000 fe0b 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d057      	beq.n	800dece <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800de22:	69bc      	ldr	r4, [r7, #24]
 800de24:	68b8      	ldr	r0, [r7, #8]
 800de26:	f000 fe9c 	bl	800eb62 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 800de2a:	4603      	mov	r3, r0
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	429c      	cmp	r4, r3
 800de30:	bf0c      	ite	eq
 800de32:	2301      	moveq	r3, #1
 800de34:	2300      	movne	r3, #0
 800de36:	b2db      	uxtb	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00d      	beq.n	800de58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800de3c:	68b8      	ldr	r0, [r7, #8]
 800de3e:	f000 fe90 	bl	800eb62 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 800de42:	4604      	mov	r4, r0
 800de44:	68b8      	ldr	r0, [r7, #8]
 800de46:	f000 fe8c 	bl	800eb62 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 800de4a:	4603      	mov	r3, r0
 800de4c:	461a      	mov	r2, r3
 800de4e:	4621      	mov	r1, r4
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7fb fdb5 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800de56:	e0a9      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800de58:	68bc      	ldr	r4, [r7, #8]
 800de5a:	f107 0314 	add.w	r3, r7, #20
 800de5e:	4618      	mov	r0, r3
 800de60:	f000 fe8b 	bl	800eb7a <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
 800de64:	4603      	mov	r3, r0
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 fdd4 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800de6e:	4603      	mov	r3, r0
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	4619      	mov	r1, r3
 800de74:	4620      	mov	r0, r4
 800de76:	f000 fdda 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d01f      	beq.n	800dec0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff f812 	bl	800ceac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	bf0c      	ite	eq
 800de8e:	2301      	moveq	r3, #1
 800de90:	2300      	movne	r3, #0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00a      	beq.n	800deae <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 800de98:	2300      	movs	r3, #0
 800de9a:	623b      	str	r3, [r7, #32]
 800de9c:	f107 0214 	add.w	r2, r7, #20
 800dea0:	f107 0320 	add.w	r3, r7, #32
 800dea4:	4619      	mov	r1, r3
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f7fb fce3 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800deac:	e07e      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800deae:	f107 0218 	add.w	r2, r7, #24
 800deb2:	f107 0318 	add.w	r3, r7, #24
 800deb6:	4619      	mov	r1, r3
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7fb fd81 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800debe:	e075      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	683a      	ldr	r2, [r7, #0]
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 fdc6 	bl	800ea58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 800decc:	e06e      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800dece:	68bc      	ldr	r4, [r7, #8]
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 fd9f 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800ded8:	4603      	mov	r3, r0
 800deda:	683a      	ldr	r2, [r7, #0]
 800dedc:	4619      	mov	r1, r3
 800dede:	4620      	mov	r0, r4
 800dee0:	f000 fda5 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d056      	beq.n	800df98 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800deee:	69bc      	ldr	r4, [r7, #24]
 800def0:	68b8      	ldr	r0, [r7, #8]
 800def2:	f000 fd84 	bl	800e9fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 800def6:	4603      	mov	r3, r0
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	429c      	cmp	r4, r3
 800defc:	bf0c      	ite	eq
 800defe:	2301      	moveq	r3, #1
 800df00:	2300      	movne	r3, #0
 800df02:	b2db      	uxtb	r3, r3
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00c      	beq.n	800df22 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 800df08:	2300      	movs	r3, #0
 800df0a:	627b      	str	r3, [r7, #36]	; 0x24
 800df0c:	68b8      	ldr	r0, [r7, #8]
 800df0e:	f000 fd76 	bl	800e9fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 800df12:	4602      	mov	r2, r0
 800df14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df18:	4619      	mov	r1, r3
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f7fb fca9 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800df20:	e044      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800df22:	68bc      	ldr	r4, [r7, #8]
 800df24:	f107 0310 	add.w	r3, r7, #16
 800df28:	4618      	mov	r0, r3
 800df2a:	f000 fe37 	bl	800eb9c <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>
 800df2e:	4603      	mov	r3, r0
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4618      	mov	r0, r3
 800df34:	f000 fd6f 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800df38:	4603      	mov	r3, r0
 800df3a:	461a      	mov	r2, r3
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	4620      	mov	r0, r4
 800df40:	f000 fd75 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d01f      	beq.n	800df8a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe ffad 	bl	800ceac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	bf0c      	ite	eq
 800df58:	2301      	moveq	r3, #1
 800df5a:	2300      	movne	r3, #0
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 800df62:	2300      	movs	r3, #0
 800df64:	62bb      	str	r3, [r7, #40]	; 0x28
 800df66:	f107 0218 	add.w	r2, r7, #24
 800df6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df6e:	4619      	mov	r1, r3
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f7fb fc7e 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800df76:	e019      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800df78:	f107 0210 	add.w	r2, r7, #16
 800df7c:	f107 0310 	add.w	r3, r7, #16
 800df80:	4619      	mov	r1, r3
 800df82:	68f8      	ldr	r0, [r7, #12]
 800df84:	f7fb fd1c 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800df88:	e010      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	68b9      	ldr	r1, [r7, #8]
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fd61 	bl	800ea58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 800df96:	e009      	b.n	800dfac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 800df98:	2300      	movs	r3, #0
 800df9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df9c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dfa0:	f107 0318 	add.w	r3, r7, #24
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7fb fd45 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	3734      	adds	r7, #52	; 0x34
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd90      	pop	{r4, r7, pc}

0800dfb4 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>:
      operator()(const _Pair& __x) const
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800dfe2:	b5b0      	push	{r4, r5, r7, lr}
 800dfe4:	b088      	sub	sp, #32
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	60f8      	str	r0, [r7, #12]
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	607a      	str	r2, [r7, #4]
 800dfee:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d11a      	bne.n	800e02c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f000 fce9 	bl	800e9ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 800dffc:	4602      	mov	r2, r0
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4293      	cmp	r3, r2
 800e002:	d013      	beq.n	800e02c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800e004:	68fc      	ldr	r4, [r7, #12]
 800e006:	f107 0310 	add.w	r3, r7, #16
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7ff ffd1 	bl	800dfb4 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 800e012:	4605      	mov	r5, r0
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fcfe 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800e01a:	4603      	mov	r3, r0
 800e01c:	461a      	mov	r2, r3
 800e01e:	4629      	mov	r1, r5
 800e020:	4620      	mov	r0, r4
 800e022:	f000 fd04 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 800e02c:	2301      	movs	r3, #1
 800e02e:	e000      	b.n	800e032 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 800e030:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800e032:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800e034:	6838      	ldr	r0, [r7, #0]
 800e036:	f7ff ffc9 	bl	800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e03a:	4603      	mov	r3, r0
 800e03c:	4619      	mov	r1, r3
 800e03e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e040:	f000 fdbd 	bl	800ebbe <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 800e044:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800e04a:	7ff8      	ldrb	r0, [r7, #31]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	69b9      	ldr	r1, [r7, #24]
 800e050:	f005 f8ef 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	695b      	ldr	r3, [r3, #20]
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800e05e:	f107 0314 	add.w	r3, r7, #20
 800e062:	69b9      	ldr	r1, [r7, #24]
 800e064:	4618      	mov	r0, r3
 800e066:	f7ff fe73 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800e06a:	697b      	ldr	r3, [r7, #20]
      }
 800e06c:	4618      	mov	r0, r3
 800e06e:	3720      	adds	r7, #32
 800e070:	46bd      	mov	sp, r7
 800e072:	bdb0      	pop	{r4, r5, r7, pc}

0800e074 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800e074:	b590      	push	{r4, r7, lr}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fdb1 	bl	800ebe6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800e084:	4604      	mov	r4, r0
 800e086:	6838      	ldr	r0, [r7, #0]
 800e088:	f000 fdb8 	bl	800ebfc <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 800e08c:	4603      	mov	r3, r0
 800e08e:	4619      	mov	r1, r3
 800e090:	4620      	mov	r0, r4
 800e092:	f000 fdc1 	bl	800ec18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd90      	pop	{r4, r7, pc}

0800e09e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b082      	sub	sp, #8
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
 800e0a6:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fd9c 	bl	800ebe6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f000 fdbb 	bl	800ec30 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>
 800e0ba:	bf00      	nop
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800e0c2:	b480      	push	{r7}
 800e0c4:	b083      	sub	sp, #12
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	6039      	str	r1, [r7, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	370c      	adds	r7, #12
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b084      	sub	sp, #16
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	f107 030c 	add.w	r3, r7, #12
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fe ff36 	bl	800cf5e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	3304      	adds	r3, #4
 800e108:	4618      	mov	r0, r3
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	4618      	mov	r0, r3
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	3310      	adds	r3, #16
 800e138:	4618      	mov	r0, r3
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 fd8e 	bl	800ec6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800e152:	4603      	mov	r3, r0
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800e15c:	b590      	push	{r4, r7, lr}
 800e15e:	b08b      	sub	sp, #44	; 0x2c
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800e168:	68b8      	ldr	r0, [r7, #8]
 800e16a:	f7fd fe7c 	bl	800be66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 800e16e:	4603      	mov	r3, r0
 800e170:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800e172:	68b8      	ldr	r0, [r7, #8]
 800e174:	f7ff ffc2 	bl	800e0fc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 800e178:	4603      	mov	r3, r0
 800e17a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800e17c:	2301      	movs	r3, #1
 800e17e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d020      	beq.n	800e1ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800e18c:	68bc      	ldr	r4, [r7, #8]
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	4618      	mov	r0, r3
 800e192:	f000 fd6c 	bl	800ec6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800e196:	4603      	mov	r3, r0
 800e198:	461a      	mov	r2, r3
 800e19a:	6879      	ldr	r1, [r7, #4]
 800e19c:	4620      	mov	r0, r4
 800e19e:	f7f9 ff18 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800e1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d005      	beq.n	800e1bc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fe fae8 	bl	800c788 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	e004      	b.n	800e1c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fe fad6 	bl	800c770 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800e1c8:	e7db      	b.n	800e182 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	f107 0310 	add.w	r3, r7, #16
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fec3 	bl	800cf5e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800e1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d01d      	beq.n	800e21c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 800e1e0:	68b8      	ldr	r0, [r7, #8]
 800e1e2:	f000 fd57 	bl	800ec94 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	61fb      	str	r3, [r7, #28]
 800e1ea:	f107 021c 	add.w	r2, r7, #28
 800e1ee:	f107 0310 	add.w	r3, r7, #16
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f000 fd5e 	bl	800ecb6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d008      	beq.n	800e212 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 800e200:	f107 0214 	add.w	r2, r7, #20
 800e204:	f107 0318 	add.w	r3, r7, #24
 800e208:	4619      	mov	r1, r3
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f000 fd67 	bl	800ecde <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 800e210:	e025      	b.n	800e25e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 800e212:	f107 0310 	add.w	r3, r7, #16
 800e216:	4618      	mov	r0, r3
 800e218:	f000 f831 	bl	800e27e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800e21c:	68bc      	ldr	r4, [r7, #8]
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff ff8f 	bl	800e144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800e226:	4603      	mov	r3, r0
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	4619      	mov	r1, r3
 800e22c:	4620      	mov	r0, r4
 800e22e:	f7f9 fed0 	bl	8007fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d008      	beq.n	800e24a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 800e238:	f107 0214 	add.w	r2, r7, #20
 800e23c:	f107 0318 	add.w	r3, r7, #24
 800e240:	4619      	mov	r1, r3
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f000 fd4b 	bl	800ecde <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 800e248:	e009      	b.n	800e25e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 800e24a:	2300      	movs	r3, #0
 800e24c:	623b      	str	r3, [r7, #32]
 800e24e:	f107 0220 	add.w	r2, r7, #32
 800e252:	f107 0310 	add.w	r3, r7, #16
 800e256:	4619      	mov	r1, r3
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f7fb fbec 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	372c      	adds	r7, #44	; 0x2c
 800e262:	46bd      	mov	sp, r7
 800e264:	bd90      	pop	{r4, r7, pc}

0800e266 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	330c      	adds	r3, #12
 800e272:	4618      	mov	r0, r3
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f004 ffcf 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800e290:	4602      	mov	r2, r0
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	601a      	str	r2, [r3, #0]
	return *this;
 800e296:	687b      	ldr	r3, [r7, #4]
      }
 800e298:	4618      	mov	r0, r3
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f004 ffbc 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	601a      	str	r2, [r3, #0]
	return *this;
 800e2b8:	687b      	ldr	r3, [r7, #4]
      }
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3708      	adds	r7, #8
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg) const
 800e2c2:	b590      	push	{r4, r7, lr}
 800e2c4:	b083      	sub	sp, #12
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681c      	ldr	r4, [r3, #0]
 800e2d0:	6838      	ldr	r0, [r7, #0]
 800e2d2:	f7fe ff82 	bl	800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f000 fd18 	bl	800ed10 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd90      	pop	{r4, r7, pc}

0800e2ea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800e2ea:	b480      	push	{r7}
 800e2ec:	b083      	sub	sp, #12
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr()
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3310      	adds	r3, #16
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 fd16 	bl	800ed3e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 800e312:	4603      	mov	r3, r0
 800e314:	4618      	mov	r0, r3
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800e326:	6838      	ldr	r0, [r7, #0]
 800e328:	f000 fd15 	bl	800ed56 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>
	}
 800e32c:	bf00      	nop
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e334:	b580      	push	{r7, lr}
 800e336:	b088      	sub	sp, #32
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	61fb      	str	r3, [r7, #28]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	61bb      	str	r3, [r7, #24]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e34c:	f7f7 f943 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d003      	beq.n	800e35e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800e356:	69b8      	ldr	r0, [r7, #24]
 800e358:	f004 fefe 	bl	8013158 <_ZdlPv>
	    return;
 800e35c:	e005      	b.n	800e36a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800e35e:	697a      	ldr	r2, [r7, #20]
 800e360:	69b9      	ldr	r1, [r7, #24]
 800e362:	69f8      	ldr	r0, [r7, #28]
 800e364:	f000 feff 	bl	800f166 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	3720      	adds	r7, #32
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1ERKS9_>:
 800e372:	b480      	push	{r7}
 800e374:	b083      	sub	sp, #12
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	6039      	str	r1, [r7, #0]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4618      	mov	r0, r3
 800e380:	370c      	adds	r7, #12
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr

0800e38a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 800e38a:	b590      	push	{r4, r7, lr}
 800e38c:	b083      	sub	sp, #12
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681c      	ldr	r4, [r3, #0]
 800e398:	6838      	ldr	r0, [r7, #0]
 800e39a:	f7fe ffbe 	bl	800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 fce1 	bl	800ed6a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd90      	pop	{r4, r7, pc}

0800e3b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEEC1ERKSA_>:
 800e3b2:	b480      	push	{r7}
 800e3b4:	b083      	sub	sp, #12
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
 800e3ba:	6039      	str	r1, [r7, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	370c      	adds	r7, #12
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg) const
 800e3ca:	b590      	push	{r4, r7, lr}
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681c      	ldr	r4, [r3, #0]
 800e3d8:	6838      	ldr	r0, [r7, #0]
 800e3da:	f7ff f816 	bl	800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f000 fcd8 	bl	800ed98 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd90      	pop	{r4, r7, pc}

0800e3f2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>:
 800e3f2:	b480      	push	{r7}
 800e3f4:	b083      	sub	sp, #12
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	6039      	str	r1, [r7, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	4618      	mov	r0, r3
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	f107 030c 	add.w	r3, r7, #12
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff f86c 	bl	800d4fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	4618      	mov	r0, r3
 800e426:	3710      	adds	r7, #16
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	3304      	adds	r3, #4
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	695b      	ldr	r3, [r3, #20]
 800e450:	4618      	mov	r0, r3
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	3310      	adds	r3, #16
 800e468:	4618      	mov	r0, r3
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fca2 	bl	800edc6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800e482:	4603      	mov	r3, r0
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800e48c:	b590      	push	{r4, r7, lr}
 800e48e:	b08b      	sub	sp, #44	; 0x2c
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800e498:	68b8      	ldr	r0, [r7, #8]
 800e49a:	f7fd ff1c 	bl	800c2d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800e4a2:	68b8      	ldr	r0, [r7, #8]
 800e4a4:	f7ff ffc2 	bl	800e42c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d020      	beq.n	800e4fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800e4bc:	68bc      	ldr	r4, [r7, #8]
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 fc80 	bl	800edc6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	6879      	ldr	r1, [r7, #4]
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7f9 fb96 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800e4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d005      	beq.n	800e4ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe fb31 	bl	800cb4a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	e004      	b.n	800e4f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fe fb1f 	bl	800cb32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800e4f8:	e7db      	b.n	800e4b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800e4fa:	697a      	ldr	r2, [r7, #20]
 800e4fc:	f107 0310 	add.w	r3, r7, #16
 800e500:	4611      	mov	r1, r2
 800e502:	4618      	mov	r0, r3
 800e504:	f7fe fff9 	bl	800d4fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800e508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d01d      	beq.n	800e54c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800e510:	68b8      	ldr	r0, [r7, #8]
 800e512:	f000 fc6b 	bl	800edec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 800e516:	4603      	mov	r3, r0
 800e518:	61fb      	str	r3, [r7, #28]
 800e51a:	f107 021c 	add.w	r2, r7, #28
 800e51e:	f107 0310 	add.w	r3, r7, #16
 800e522:	4611      	mov	r1, r2
 800e524:	4618      	mov	r0, r3
 800e526:	f000 fc72 	bl	800ee0e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d008      	beq.n	800e542 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800e530:	f107 0214 	add.w	r2, r7, #20
 800e534:	f107 0318 	add.w	r3, r7, #24
 800e538:	4619      	mov	r1, r3
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f000 fc7b 	bl	800ee36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 800e540:	e025      	b.n	800e58e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800e542:	f107 0310 	add.w	r3, r7, #16
 800e546:	4618      	mov	r0, r3
 800e548:	f000 f831 	bl	800e5ae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800e54c:	68bc      	ldr	r4, [r7, #8]
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	4618      	mov	r0, r3
 800e552:	f7ff ff8f 	bl	800e474 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800e556:	4603      	mov	r3, r0
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	4619      	mov	r1, r3
 800e55c:	4620      	mov	r0, r4
 800e55e:	f7f9 fb4e 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d008      	beq.n	800e57a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800e568:	f107 0214 	add.w	r2, r7, #20
 800e56c:	f107 0318 	add.w	r3, r7, #24
 800e570:	4619      	mov	r1, r3
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f000 fc5f 	bl	800ee36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 800e578:	e009      	b.n	800e58e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800e57a:	2300      	movs	r3, #0
 800e57c:	623b      	str	r3, [r7, #32]
 800e57e:	f107 0220 	add.w	r2, r7, #32
 800e582:	f107 0310 	add.w	r3, r7, #16
 800e586:	4619      	mov	r1, r3
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f7fb fa54 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	372c      	adds	r7, #44	; 0x2c
 800e592:	46bd      	mov	sp, r7
 800e594:	bd90      	pop	{r4, r7, pc}

0800e596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800e596:	b480      	push	{r7}
 800e598:	b083      	sub	sp, #12
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	330c      	adds	r3, #12
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	370c      	adds	r7, #12
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b082      	sub	sp, #8
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f004 fe37 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	601a      	str	r2, [r3, #0]
	return *this;
 800e5c6:	687b      	ldr	r3, [r7, #4]
      }
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f004 fe24 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	601a      	str	r2, [r3, #0]
	return *this;
 800e5e8:	687b      	ldr	r3, [r7, #4]
      }
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 800e5f2:	b590      	push	{r4, r7, lr}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681c      	ldr	r4, [r3, #0]
 800e600:	6838      	ldr	r0, [r7, #0]
 800e602:	f7ff f8b8 	bl	800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e606:	4603      	mov	r3, r0
 800e608:	4619      	mov	r1, r3
 800e60a:	4620      	mov	r0, r4
 800e60c:	f000 fc2c 	bl	800ee68 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 800e610:	4603      	mov	r3, r0
 800e612:	4618      	mov	r0, r3
 800e614:	370c      	adds	r7, #12
 800e616:	46bd      	mov	sp, r7
 800e618:	bd90      	pop	{r4, r7, pc}

0800e61a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800e61a:	b480      	push	{r7}
 800e61c:	b083      	sub	sp, #12
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4618      	mov	r0, r3
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3310      	adds	r3, #16
 800e63c:	4618      	mov	r0, r3
 800e63e:	f000 fc2a 	bl	800ee96 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 800e642:	4603      	mov	r3, r0
 800e644:	4618      	mov	r0, r3
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800e656:	6838      	ldr	r0, [r7, #0]
 800e658:	f000 fc29 	bl	800eeae <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>
	}
 800e65c:	bf00      	nop
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	61fb      	str	r3, [r7, #28]
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	61bb      	str	r3, [r7, #24]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e67c:	f7f6 ffab 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800e686:	69b8      	ldr	r0, [r7, #24]
 800e688:	f004 fd66 	bl	8013158 <_ZdlPv>
	    return;
 800e68c:	e005      	b.n	800e69a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	69b9      	ldr	r1, [r7, #24]
 800e692:	69f8      	ldr	r0, [r7, #28]
 800e694:	f000 fe0e 	bl	800f2b4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 800e698:	bf00      	nop
 800e69a:	bf00      	nop
 800e69c:	3720      	adds	r7, #32
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>:
 800e6a2:	b480      	push	{r7}
 800e6a4:	b083      	sub	sp, #12
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	6039      	str	r1, [r7, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	370c      	adds	r7, #12
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	f107 030c 	add.w	r3, r7, #12
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff f8f1 	bl	800d8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	3304      	adds	r3, #4
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	695b      	ldr	r3, [r3, #20]
 800e700:	4618      	mov	r0, r3
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	3310      	adds	r3, #16
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 fbc8 	bl	800eec2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800e732:	4603      	mov	r3, r0
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b08b      	sub	sp, #44	; 0x2c
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800e748:	68b8      	ldr	r0, [r7, #8]
 800e74a:	f7fd fe89 	bl	800c460 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 800e74e:	4603      	mov	r3, r0
 800e750:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800e752:	68b8      	ldr	r0, [r7, #8]
 800e754:	f7ff ffc2 	bl	800e6dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800e758:	4603      	mov	r3, r0
 800e75a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800e75c:	2301      	movs	r3, #1
 800e75e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d020      	beq.n	800e7aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800e76c:	68bc      	ldr	r4, [r7, #8]
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	4618      	mov	r0, r3
 800e772:	f000 fba6 	bl	800eec2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800e776:	4603      	mov	r3, r0
 800e778:	461a      	mov	r2, r3
 800e77a:	6879      	ldr	r1, [r7, #4]
 800e77c:	4620      	mov	r0, r4
 800e77e:	f7f9 fa3e 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800e782:	4603      	mov	r3, r0
 800e784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800e788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d005      	beq.n	800e79c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe faa7 	bl	800cce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 800e798:	4603      	mov	r3, r0
 800e79a:	e004      	b.n	800e7a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe fa95 	bl	800ccce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800e7a8:	e7db      	b.n	800e762 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	f107 0310 	add.w	r3, r7, #16
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7ff f87e 	bl	800d8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800e7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d01d      	beq.n	800e7fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800e7c0:	68b8      	ldr	r0, [r7, #8]
 800e7c2:	f000 fb91 	bl	800eee8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	61fb      	str	r3, [r7, #28]
 800e7ca:	f107 021c 	add.w	r2, r7, #28
 800e7ce:	f107 0310 	add.w	r3, r7, #16
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f000 fb98 	bl	800ef0a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d008      	beq.n	800e7f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800e7e0:	f107 0214 	add.w	r2, r7, #20
 800e7e4:	f107 0318 	add.w	r3, r7, #24
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f000 fba1 	bl	800ef32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 800e7f0:	e025      	b.n	800e83e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800e7f2:	f107 0310 	add.w	r3, r7, #16
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f000 f831 	bl	800e85e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800e7fc:	68bc      	ldr	r4, [r7, #8]
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff ff8f 	bl	800e724 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800e806:	4603      	mov	r3, r0
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	4619      	mov	r1, r3
 800e80c:	4620      	mov	r0, r4
 800e80e:	f7f9 f9f6 	bl	8007bfe <_ZNKSt4lessI3PinEclERKS0_S3_>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d008      	beq.n	800e82a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800e818:	f107 0214 	add.w	r2, r7, #20
 800e81c:	f107 0318 	add.w	r3, r7, #24
 800e820:	4619      	mov	r1, r3
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	f000 fb85 	bl	800ef32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 800e828:	e009      	b.n	800e83e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800e82a:	2300      	movs	r3, #0
 800e82c:	623b      	str	r3, [r7, #32]
 800e82e:	f107 0220 	add.w	r2, r7, #32
 800e832:	f107 0310 	add.w	r3, r7, #16
 800e836:	4619      	mov	r1, r3
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f7fb f8fc 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	372c      	adds	r7, #44	; 0x2c
 800e842:	46bd      	mov	sp, r7
 800e844:	bd90      	pop	{r4, r7, pc}

0800e846 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800e846:	b480      	push	{r7}
 800e848:	b083      	sub	sp, #12
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	330c      	adds	r3, #12
 800e852:	4618      	mov	r0, r3
 800e854:	370c      	adds	r7, #12
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800e85e:	b580      	push	{r7, lr}
 800e860:	b082      	sub	sp, #8
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f004 fcdf 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800e870:	4602      	mov	r2, r0
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	601a      	str	r2, [r3, #0]
	return *this;
 800e876:	687b      	ldr	r3, [r7, #4]
      }
 800e878:	4618      	mov	r0, r3
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f004 fccc 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800e892:	4602      	mov	r2, r0
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	601a      	str	r2, [r3, #0]
	return *this;
 800e898:	687b      	ldr	r3, [r7, #4]
      }
 800e89a:	4618      	mov	r0, r3
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 800e8a2:	b590      	push	{r4, r7, lr}
 800e8a4:	b083      	sub	sp, #12
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681c      	ldr	r4, [r3, #0]
 800e8b0:	6838      	ldr	r0, [r7, #0]
 800e8b2:	f7ff f93d 	bl	800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f000 fb52 	bl	800ef64 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd90      	pop	{r4, r7, pc}

0800e8ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800e8ca:	b480      	push	{r7}
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	3310      	adds	r3, #16
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 fb50 	bl	800ef92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800e906:	6838      	ldr	r0, [r7, #0]
 800e908:	f000 fb4f 	bl	800efaa <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>
	}
 800e90c:	bf00      	nop
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	61fb      	str	r3, [r7, #28]
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	61bb      	str	r3, [r7, #24]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e92c:	f7f6 fe53 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d003      	beq.n	800e93e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800e936:	69b8      	ldr	r0, [r7, #24]
 800e938:	f004 fc0e 	bl	8013158 <_ZdlPv>
	    return;
 800e93c:	e005      	b.n	800e94a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	69b9      	ldr	r1, [r7, #24]
 800e942:	69f8      	ldr	r0, [r7, #28]
 800e944:	f000 fd1d 	bl	800f382 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 800e948:	bf00      	nop
 800e94a:	bf00      	nop
 800e94c:	3720      	adds	r7, #32
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800e952:	b480      	push	{r7}
 800e954:	b083      	sub	sp, #12
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4618      	mov	r0, r3
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4618      	mov	r0, r3
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800e97e:	b480      	push	{r7}
 800e980:	b083      	sub	sp, #12
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4618      	mov	r0, r3
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>:
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	f107 030c 	add.w	r3, r7, #12
 800e9bc:	4611      	mov	r1, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7ff f9c6 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800e9ce:	b480      	push	{r7}
 800e9d0:	b083      	sub	sp, #12
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3304      	adds	r3, #4
 800e9da:	4618      	mov	r0, r3
 800e9dc:	370c      	adds	r7, #12
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e9e6:	b480      	push	{r7}
 800e9e8:	b083      	sub	sp, #12
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	370c      	adds	r7, #12
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800e9fe:	b480      	push	{r7}
 800ea00:	b083      	sub	sp, #12
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	3310      	adds	r3, #16
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr

0800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b082      	sub	sp, #8
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 facd 	bl	800efbe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 800ea24:	4603      	mov	r3, r0
 800ea26:	4618      	mov	r0, r3
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800ea2e:	b480      	push	{r7}
 800ea30:	b085      	sub	sp, #20
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	60f8      	str	r0, [r7, #12]
 800ea36:	60b9      	str	r1, [r7, #8]
 800ea38:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	881a      	ldrh	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	bf34      	ite	cc
 800ea46:	2301      	movcc	r3, #1
 800ea48:	2300      	movcs	r3, #0
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ea58:	b590      	push	{r4, r7, lr}
 800ea5a:	b08b      	sub	sp, #44	; 0x2c
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800ea64:	68b8      	ldr	r0, [r7, #8]
 800ea66:	f7fd fdd2 	bl	800c60e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800ea6e:	68b8      	ldr	r0, [r7, #8]
 800ea70:	f7ff ffad 	bl	800e9ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 800ea74:	4603      	mov	r3, r0
 800ea76:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d020      	beq.n	800eac6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800ea88:	68bc      	ldr	r4, [r7, #8]
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f000 fa96 	bl	800efbe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 800ea92:	4603      	mov	r3, r0
 800ea94:	461a      	mov	r2, r3
 800ea96:	6879      	ldr	r1, [r7, #4]
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f7ff ffc8 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800eaa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d005      	beq.n	800eab8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fe fa08 	bl	800cec4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800eab4:	4603      	mov	r3, r0
 800eab6:	e004      	b.n	800eac2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe f9f6 	bl	800ceac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800eac0:	4603      	mov	r3, r0
 800eac2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800eac4:	e7db      	b.n	800ea7e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 800eac6:	697a      	ldr	r2, [r7, #20]
 800eac8:	f107 0310 	add.w	r3, r7, #16
 800eacc:	4611      	mov	r1, r2
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff f93e 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800ead4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d01d      	beq.n	800eb18 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 800eadc:	68b8      	ldr	r0, [r7, #8]
 800eade:	f000 fa81 	bl	800efe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 800eae2:	4603      	mov	r3, r0
 800eae4:	61fb      	str	r3, [r7, #28]
 800eae6:	f107 021c 	add.w	r2, r7, #28
 800eaea:	f107 0310 	add.w	r3, r7, #16
 800eaee:	4611      	mov	r1, r2
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f000 fa88 	bl	800f006 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d008      	beq.n	800eb0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 800eafc:	f107 0214 	add.w	r2, r7, #20
 800eb00:	f107 0318 	add.w	r3, r7, #24
 800eb04:	4619      	mov	r1, r3
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f000 fa91 	bl	800f02e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 800eb0c:	e025      	b.n	800eb5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 800eb0e:	f107 0310 	add.w	r3, r7, #16
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 f831 	bl	800eb7a <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800eb18:	68bc      	ldr	r4, [r7, #8]
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7ff ff7a 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800eb22:	4603      	mov	r3, r0
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	4619      	mov	r1, r3
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f7ff ff80 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d008      	beq.n	800eb46 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 800eb34:	f107 0214 	add.w	r2, r7, #20
 800eb38:	f107 0318 	add.w	r3, r7, #24
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f000 fa75 	bl	800f02e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 800eb44:	e009      	b.n	800eb5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 800eb46:	2300      	movs	r3, #0
 800eb48:	623b      	str	r3, [r7, #32]
 800eb4a:	f107 0220 	add.w	r2, r7, #32
 800eb4e:	f107 0310 	add.w	r3, r7, #16
 800eb52:	4619      	mov	r1, r3
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f7fa ff6e 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	372c      	adds	r7, #44	; 0x2c
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd90      	pop	{r4, r7, pc}

0800eb62 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800eb62:	b480      	push	{r7}
 800eb64:	b083      	sub	sp, #12
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	330c      	adds	r3, #12
 800eb6e:	4618      	mov	r0, r3
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b082      	sub	sp, #8
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f004 fb51 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	601a      	str	r2, [r3, #0]
	return *this;
 800eb92:	687b      	ldr	r3, [r7, #4]
      }
 800eb94:	4618      	mov	r0, r3
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f004 fb3e 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	601a      	str	r2, [r3, #0]
	return *this;
 800ebb4:	687b      	ldr	r3, [r7, #4]
      }
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 800ebbe:	b590      	push	{r4, r7, lr}
 800ebc0:	b083      	sub	sp, #12
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
 800ebc6:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681c      	ldr	r4, [r3, #0]
 800ebcc:	6838      	ldr	r0, [r7, #0]
 800ebce:	f7ff f9fd 	bl	800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f000 fa42 	bl	800f060 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	4618      	mov	r0, r3
 800ebe0:	370c      	adds	r7, #12
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd90      	pop	{r4, r7, pc}

0800ebe6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800ebe6:	b480      	push	{r7}
 800ebe8:	b083      	sub	sp, #12
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	3310      	adds	r3, #16
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 fa40 	bl	800f08e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	4618      	mov	r0, r3
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800ec22:	6838      	ldr	r0, [r7, #0]
 800ec24:	f000 fa3f 	bl	800f0a6 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>
	}
 800ec28:	bf00      	nop
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b088      	sub	sp, #32
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	61fb      	str	r3, [r7, #28]
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	61bb      	str	r3, [r7, #24]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800ec48:	f7f6 fcc5 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800ec52:	69b8      	ldr	r0, [r7, #24]
 800ec54:	f004 fa80 	bl	8013158 <_ZdlPv>
	    return;
 800ec58:	e005      	b.n	800ec66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	69b9      	ldr	r1, [r7, #24]
 800ec5e:	69f8      	ldr	r0, [r7, #28]
 800ec60:	f000 fbf6 	bl	800f450 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800ec64:	bf00      	nop
 800ec66:	bf00      	nop
 800ec68:	3720      	adds	r7, #32
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 fa20 	bl	800f0bc <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	f107 030c 	add.w	r3, r7, #12
 800ec82:	4611      	mov	r1, r2
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fe fa9c 	bl	800d1c2 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 800ec8a:	4603      	mov	r3, r0
      }
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	68da      	ldr	r2, [r3, #12]
 800eca0:	f107 030c 	add.w	r3, r7, #12
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe f959 	bl	800cf5e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800ecb6:	b480      	push	{r7}
 800ecb8:	b083      	sub	sp, #12
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	bf0c      	ite	eq
 800eccc:	2301      	moveq	r3, #1
 800ecce:	2300      	movne	r3, #0
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	370c      	adds	r7, #12
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b084      	sub	sp, #16
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	60f8      	str	r0, [r7, #12]
 800ece6:	60b9      	str	r1, [r7, #8]
 800ece8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ecea:	68b8      	ldr	r0, [r7, #8]
 800ecec:	f000 f9f4 	bl	800f0d8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7fb fbd2 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	605a      	str	r2, [r3, #4]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f9e7 	bl	800f0ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 800ed20:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800ed22:	6838      	ldr	r0, [r7, #0]
 800ed24:	f7fe fa59 	bl	800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	68f9      	ldr	r1, [r7, #12]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f9ee 	bl	800f110 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 800ed34:	68fb      	ldr	r3, [r7, #12]
	}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3710      	adds	r7, #16
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() noexcept
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b082      	sub	sp, #8
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fa02 	bl	800f150 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>:
    destroy_at(_Tp* __location)
 800ed56:	b480      	push	{r7}
 800ed58:	b083      	sub	sp, #12
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
    }
 800ed5e:	bf00      	nop
 800ed60:	370c      	adds	r7, #12
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr

0800ed6a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b084      	sub	sp, #16
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
 800ed72:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7fa feb2 	bl	8009ade <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 800ed7a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800ed7c:	6838      	ldr	r0, [r7, #0]
 800ed7e:	f7fe facc 	bl	800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ed82:	4603      	mov	r3, r0
 800ed84:	461a      	mov	r2, r3
 800ed86:	68f9      	ldr	r1, [r7, #12]
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f9fe 	bl	800f18a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
	}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7fb f8b7 	bl	8009f16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 800eda8:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800edaa:	6838      	ldr	r0, [r7, #0]
 800edac:	f7fe fb2d 	bl	800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800edb0:	4603      	mov	r3, r0
 800edb2:	461a      	mov	r2, r3
 800edb4:	68f9      	ldr	r1, [r7, #12]
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fa07 	bl	800f1ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 800edbc:	68fb      	ldr	r3, [r7, #12]
	}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b084      	sub	sp, #16
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fa1b 	bl	800f20a <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 800edd4:	4602      	mov	r2, r0
 800edd6:	f107 030c 	add.w	r3, r7, #12
 800edda:	4611      	mov	r1, r2
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fe fcbe 	bl	800d75e <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 800ede2:	4603      	mov	r3, r0
      }
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	f107 030c 	add.w	r3, r7, #12
 800edfc:	4611      	mov	r1, r2
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fe fb7b 	bl	800d4fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800ee0e:	b480      	push	{r7}
 800ee10:	b083      	sub	sp, #12
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	bf0c      	ite	eq
 800ee24:	2301      	moveq	r3, #1
 800ee26:	2300      	movne	r3, #0
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr

0800ee36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b084      	sub	sp, #16
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	60f8      	str	r0, [r7, #12]
 800ee3e:	60b9      	str	r1, [r7, #8]
 800ee40:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ee42:	68b8      	ldr	r0, [r7, #8]
 800ee44:	f000 f9ef 	bl	800f226 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7fb fb26 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ee56:	4603      	mov	r3, r0
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	605a      	str	r2, [r3, #4]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	4618      	mov	r0, r3
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 f9e2 	bl	800f23c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 800ee78:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800ee7a:	6838      	ldr	r0, [r7, #0]
 800ee7c:	f7fe fc7b 	bl	800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ee80:	4603      	mov	r3, r0
 800ee82:	461a      	mov	r2, r3
 800ee84:	68f9      	ldr	r1, [r7, #12]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 f9e9 	bl	800f25e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
	}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b082      	sub	sp, #8
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 f9fd 	bl	800f29e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 800eea4:	4603      	mov	r3, r0
 800eea6:	4618      	mov	r0, r3
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800eeae:	b480      	push	{r7}
 800eeb0:	b083      	sub	sp, #12
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
    }
 800eeb6:	bf00      	nop
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b084      	sub	sp, #16
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 fa04 	bl	800f2d8 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 800eed0:	4602      	mov	r2, r0
 800eed2:	f107 030c 	add.w	r3, r7, #12
 800eed6:	4611      	mov	r1, r2
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fe fe1d 	bl	800db18 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 800eede:	4603      	mov	r3, r0
      }
 800eee0:	4618      	mov	r0, r3
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68da      	ldr	r2, [r3, #12]
 800eef4:	f107 030c 	add.w	r3, r7, #12
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fe fcda 	bl	800d8b4 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	4618      	mov	r0, r3
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800ef0a:	b480      	push	{r7}
 800ef0c:	b083      	sub	sp, #12
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
 800ef12:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	bf0c      	ite	eq
 800ef20:	2301      	moveq	r3, #1
 800ef22:	2300      	movne	r3, #0
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	4618      	mov	r0, r3
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	60b9      	str	r1, [r7, #8]
 800ef3c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ef3e:	68b8      	ldr	r0, [r7, #8]
 800ef40:	f000 f9d8 	bl	800f2f4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800ef44:	4603      	mov	r3, r0
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f7fb faa8 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ef52:	4603      	mov	r3, r0
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	605a      	str	r2, [r3, #4]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f9cb 	bl	800f30a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 800ef74:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800ef76:	6838      	ldr	r0, [r7, #0]
 800ef78:	f7fe fdda 	bl	800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	461a      	mov	r2, r3
 800ef80:	68f9      	ldr	r1, [r7, #12]
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f9d2 	bl	800f32c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 800ef88:	68fb      	ldr	r3, [r7, #12]
	}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b082      	sub	sp, #8
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f9e6 	bl	800f36c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 800efa0:	4603      	mov	r3, r0
 800efa2:	4618      	mov	r0, r3
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
    }
 800efb2:	bf00      	nop
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b084      	sub	sp, #16
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f9ed 	bl	800f3a6 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 800efcc:	4602      	mov	r2, r0
 800efce:	f107 030c 	add.w	r3, r7, #12
 800efd2:	4611      	mov	r1, r2
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7fe ffed 	bl	800dfb4 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 800efda:	4603      	mov	r3, r0
      }
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	68da      	ldr	r2, [r3, #12]
 800eff0:	f107 030c 	add.w	r3, r7, #12
 800eff4:	4611      	mov	r1, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fe feaa 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800f006:	b480      	push	{r7}
 800f008:	b083      	sub	sp, #12
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	429a      	cmp	r2, r3
 800f01a:	bf0c      	ite	eq
 800f01c:	2301      	moveq	r3, #1
 800f01e:	2300      	movne	r3, #0
 800f020:	b2db      	uxtb	r3, r3
 800f022:	4618      	mov	r0, r3
 800f024:	370c      	adds	r7, #12
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr

0800f02e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800f02e:	b580      	push	{r7, lr}
 800f030:	b084      	sub	sp, #16
 800f032:	af00      	add	r7, sp, #0
 800f034:	60f8      	str	r0, [r7, #12]
 800f036:	60b9      	str	r1, [r7, #8]
 800f038:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800f03a:	68b8      	ldr	r0, [r7, #8]
 800f03c:	f000 f9c1 	bl	800f3c2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800f040:	4603      	mov	r3, r0
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	601a      	str	r2, [r3, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7fb fa2a 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800f04e:	4603      	mov	r3, r0
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	605a      	str	r2, [r3, #4]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f9b4 	bl	800f3d8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 800f070:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800f072:	6838      	ldr	r0, [r7, #0]
 800f074:	f7fe ffaa 	bl	800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f078:	4603      	mov	r3, r0
 800f07a:	461a      	mov	r2, r3
 800f07c:	68f9      	ldr	r1, [r7, #12]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 f9bb 	bl	800f3fa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 800f084:	68fb      	ldr	r3, [r7, #12]
	}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f9cf 	bl	800f43a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 800f09c:	4603      	mov	r3, r0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b082      	sub	sp, #8
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7fc faae 	bl	800b610 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
    }
 800f0b4:	bf00      	nop
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr() const
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	3310      	adds	r3, #16
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 f9d2 	bl	800f472 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	370c      	adds	r7, #12
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr

0800f0ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b082      	sub	sp, #8
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7ff f8f7 	bl	800e2ea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2101      	movs	r1, #1
 800f100:	4618      	mov	r0, r3
 800f102:	f000 f9c2 	bl	800f48a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>
 800f106:	4603      	mov	r3, r0
 800f108:	4618      	mov	r0, r3
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800f110:	b5b0      	push	{r4, r5, r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	4619      	mov	r1, r3
 800f120:	2024      	movs	r0, #36	; 0x24
 800f122:	f7f6 fa60 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f7ff f8df 	bl	800e2ea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800f12c:	4604      	mov	r4, r0
 800f12e:	68b8      	ldr	r0, [r7, #8]
 800f130:	f7ff f8e6 	bl	800e300 <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 800f134:	4605      	mov	r5, r0
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7fe f84f 	bl	800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 800f13c:	4603      	mov	r3, r0
 800f13e:	461a      	mov	r2, r3
 800f140:	4629      	mov	r1, r5
 800f142:	4620      	mov	r0, r4
 800f144:	f000 f9dd 	bl	800f502 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 800f148:	bf00      	nop
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bdb0      	pop	{r4, r5, r7, pc}

0800f150 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() noexcept
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4618      	mov	r0, r3
 800f15c:	370c      	adds	r7, #12
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800f166:	b580      	push	{r7, lr}
 800f168:	b084      	sub	sp, #16
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	60b9      	str	r1, [r7, #8]
 800f170:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	4613      	mov	r3, r2
 800f176:	00db      	lsls	r3, r3, #3
 800f178:	4413      	add	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4619      	mov	r1, r3
 800f17e:	68b8      	ldr	r0, [r7, #8]
 800f180:	f003 ffec 	bl	801315c <_ZdlPvj>
      }
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800f18a:	b5b0      	push	{r4, r5, r7, lr}
 800f18c:	b084      	sub	sp, #16
 800f18e:	af00      	add	r7, sp, #0
 800f190:	60f8      	str	r0, [r7, #12]
 800f192:	60b9      	str	r1, [r7, #8]
 800f194:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	4619      	mov	r1, r3
 800f19a:	2024      	movs	r0, #36	; 0x24
 800f19c:	f7f6 fa23 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f7fb f9d6 	bl	800a552 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	68b8      	ldr	r0, [r7, #8]
 800f1aa:	f7f9 fc27 	bl	80089fc <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7fe f8b2 	bl	800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	4629      	mov	r1, r5
 800f1bc:	4620      	mov	r0, r4
 800f1be:	f000 f9cb 	bl	800f558 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 800f1c2:	bf00      	nop
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bdb0      	pop	{r4, r5, r7, pc}

0800f1ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800f1ca:	b5b0      	push	{r4, r5, r7, lr}
 800f1cc:	b084      	sub	sp, #16
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	60b9      	str	r1, [r7, #8]
 800f1d4:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	4619      	mov	r1, r3
 800f1da:	202c      	movs	r0, #44	; 0x2c
 800f1dc:	f7f6 fa03 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f7fb fa94 	bl	800a70e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	68b8      	ldr	r0, [r7, #8]
 800f1ea:	f7f9 fee0 	bl	8008fae <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7fe f90a 	bl	800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f000 f9d8 	bl	800f5b2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 800f202:	bf00      	nop
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bdb0      	pop	{r4, r5, r7, pc}

0800f20a <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	3310      	adds	r3, #16
 800f216:	4618      	mov	r0, r3
 800f218:	f000 f9dd 	bl	800f5d6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 800f21c:	4603      	mov	r3, r0
 800f21e:	4618      	mov	r0, r3
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f226:	b480      	push	{r7}
 800f228:	b083      	sub	sp, #12
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4618      	mov	r0, r3
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff f9e8 	bl	800e61a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2101      	movs	r1, #1
 800f24e:	4618      	mov	r0, r3
 800f250:	f000 f9cd 	bl	800f5ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>
 800f254:	4603      	mov	r3, r0
 800f256:	4618      	mov	r0, r3
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800f25e:	b5b0      	push	{r4, r5, r7, lr}
 800f260:	b084      	sub	sp, #16
 800f262:	af00      	add	r7, sp, #0
 800f264:	60f8      	str	r0, [r7, #12]
 800f266:	60b9      	str	r1, [r7, #8]
 800f268:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	4619      	mov	r1, r3
 800f26e:	2038      	movs	r0, #56	; 0x38
 800f270:	f7f6 f9b9 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7ff f9d0 	bl	800e61a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800f27a:	4604      	mov	r4, r0
 800f27c:	68b8      	ldr	r0, [r7, #8]
 800f27e:	f7ff f9d7 	bl	800e630 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 800f282:	4605      	mov	r5, r0
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7fe fa76 	bl	800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f28a:	4603      	mov	r3, r0
 800f28c:	461a      	mov	r2, r3
 800f28e:	4629      	mov	r1, r5
 800f290:	4620      	mov	r0, r4
 800f292:	f000 f9ec 	bl	800f66e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 800f296:	bf00      	nop
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bdb0      	pop	{r4, r5, r7, pc}

0800f29e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800f29e:	b480      	push	{r7}
 800f2a0:	b083      	sub	sp, #12
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	1a9b      	subs	r3, r3, r2
 800f2c8:	00db      	lsls	r3, r3, #3
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	68b8      	ldr	r0, [r7, #8]
 800f2ce:	f003 ff45 	bl	801315c <_ZdlPvj>
      }
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	3310      	adds	r3, #16
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f000 f9d4 	bl	800f692 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4618      	mov	r0, r3
 800f300:	370c      	adds	r7, #12
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b082      	sub	sp, #8
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff fad9 	bl	800e8ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800f318:	4603      	mov	r3, r0
 800f31a:	2101      	movs	r1, #1
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 f9c4 	bl	800f6aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>
 800f322:	4603      	mov	r3, r0
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800f32c:	b5b0      	push	{r4, r5, r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	4619      	mov	r1, r3
 800f33c:	2024      	movs	r0, #36	; 0x24
 800f33e:	f7f6 f952 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f7ff fac1 	bl	800e8ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800f348:	4604      	mov	r4, r0
 800f34a:	68b8      	ldr	r0, [r7, #8]
 800f34c:	f7ff fac8 	bl	800e8e0 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 800f350:	4605      	mov	r5, r0
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7fe fbec 	bl	800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f358:	4603      	mov	r3, r0
 800f35a:	461a      	mov	r2, r3
 800f35c:	4629      	mov	r1, r5
 800f35e:	4620      	mov	r0, r4
 800f360:	f000 f9df 	bl	800f722 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 800f364:	bf00      	nop
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bdb0      	pop	{r4, r5, r7, pc}

0800f36c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4618      	mov	r0, r3
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 800f382:	b580      	push	{r7, lr}
 800f384:	b084      	sub	sp, #16
 800f386:	af00      	add	r7, sp, #0
 800f388:	60f8      	str	r0, [r7, #12]
 800f38a:	60b9      	str	r1, [r7, #8]
 800f38c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	4613      	mov	r3, r2
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	4413      	add	r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4619      	mov	r1, r3
 800f39a:	68b8      	ldr	r0, [r7, #8]
 800f39c:	f003 fede 	bl	801315c <_ZdlPvj>
      }
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	3310      	adds	r3, #16
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 f9c7 	bl	800f746 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3708      	adds	r7, #8
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f3c2:	b480      	push	{r7}
 800f3c4:	b083      	sub	sp, #12
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7ff fc00 	bl	800ebe6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2101      	movs	r1, #1
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f000 f9b7 	bl	800f75e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3708      	adds	r7, #8
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800f3fa:	b5b0      	push	{r4, r5, r7, lr}
 800f3fc:	b084      	sub	sp, #16
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	60f8      	str	r0, [r7, #12]
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	4619      	mov	r1, r3
 800f40a:	202c      	movs	r0, #44	; 0x2c
 800f40c:	f7f6 f8eb 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f7ff fbe8 	bl	800ebe6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800f416:	4604      	mov	r4, r0
 800f418:	68b8      	ldr	r0, [r7, #8]
 800f41a:	f7ff fbef 	bl	800ebfc <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 800f41e:	4605      	mov	r5, r0
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7fe fdd3 	bl	800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f426:	4603      	mov	r3, r0
 800f428:	461a      	mov	r2, r3
 800f42a:	4629      	mov	r1, r5
 800f42c:	4620      	mov	r0, r4
 800f42e:	f000 fa01 	bl	800f834 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 800f432:	bf00      	nop
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bdb0      	pop	{r4, r5, r7, pc}

0800f43a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800f43a:	b480      	push	{r7}
 800f43c:	b083      	sub	sp, #12
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	4618      	mov	r0, r3
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	222c      	movs	r2, #44	; 0x2c
 800f460:	fb02 f303 	mul.w	r3, r2, r3
 800f464:	4619      	mov	r1, r3
 800f466:	68b8      	ldr	r0, [r7, #8]
 800f468:	f003 fe78 	bl	801315c <_ZdlPvj>
      }
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800f472:	b580      	push	{r7, lr}
 800f474:	b082      	sub	sp, #8
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f9ec 	bl	800f858 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 800f480:	4603      	mov	r3, r0
 800f482:	4618      	mov	r0, r3
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b084      	sub	sp, #16
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	6039      	str	r1, [r7, #0]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	60fb      	str	r3, [r7, #12]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800f49c:	f7f6 f89b 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d009      	beq.n	800f4ba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f4a6:	68ba      	ldr	r2, [r7, #8]
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	00db      	lsls	r3, r3, #3
 800f4ac:	4413      	add	r3, r2
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f003 fe55 	bl	8013160 <_Znwj>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	e006      	b.n	800f4c8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	68b9      	ldr	r1, [r7, #8]
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f000 fa18 	bl	800f8f4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	bf00      	nop
      { return __a.allocate(__n); }
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800f4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800f4da:	6838      	ldr	r0, [r7, #0]
 800f4dc:	f7fd fe7d 	bl	800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 800f4e0:	4605      	mov	r5, r0
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	2014      	movs	r0, #20
 800f4e8:	f7f6 f87d 	bl	80055e6 <_ZnwjPv>
 800f4ec:	4606      	mov	r6, r0
 800f4ee:	4634      	mov	r4, r6
 800f4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	6023      	str	r3, [r4, #0]
 800f4f8:	4633      	mov	r3, r6
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	370c      	adds	r7, #12
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f502 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f502:	b580      	push	{r7, lr}
 800f504:	b084      	sub	sp, #16
 800f506:	af00      	add	r7, sp, #0
 800f508:	60f8      	str	r0, [r7, #12]
 800f50a:	60b9      	str	r1, [r7, #8]
 800f50c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7fd fe63 	bl	800d1da <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 800f514:	4603      	mov	r3, r0
 800f516:	4619      	mov	r1, r3
 800f518:	68b8      	ldr	r0, [r7, #8]
 800f51a:	f7ff ffd9 	bl	800f4d0 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 800f51e:	bf00      	nop
 800f520:	3710      	adds	r7, #16
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <_ZSt12construct_atISt4pairIK3PinN10PWMservice8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800f526:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f528:	b083      	sub	sp, #12
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800f530:	6838      	ldr	r0, [r7, #0]
 800f532:	f7fd fef2 	bl	800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f536:	4605      	mov	r5, r0
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4619      	mov	r1, r3
 800f53c:	2014      	movs	r0, #20
 800f53e:	f7f6 f852 	bl	80055e6 <_ZnwjPv>
 800f542:	4606      	mov	r6, r0
 800f544:	4634      	mov	r4, r6
 800f546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f54a:	682b      	ldr	r3, [r5, #0]
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	4633      	mov	r3, r6
 800f550:	4618      	mov	r0, r3
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f558 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f7fd fed8 	bl	800d31a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f56a:	4603      	mov	r3, r0
 800f56c:	4619      	mov	r1, r3
 800f56e:	68b8      	ldr	r0, [r7, #8]
 800f570:	f7ff ffd9 	bl	800f526 <_ZSt12construct_atISt4pairIK3PinN10PWMservice8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 800f574:	bf00      	nop
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <_ZSt12construct_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800f57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800f586:	6838      	ldr	r0, [r7, #0]
 800f588:	f7fd ff3f 	bl	800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800f58c:	4605      	mov	r5, r0
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4619      	mov	r1, r3
 800f592:	201c      	movs	r0, #28
 800f594:	f7f6 f827 	bl	80055e6 <_ZnwjPv>
 800f598:	4606      	mov	r6, r0
 800f59a:	4634      	mov	r4, r6
 800f59c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f59e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f5a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f5a8:	4633      	mov	r3, r6
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f5b2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b084      	sub	sp, #16
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	60f8      	str	r0, [r7, #12]
 800f5ba:	60b9      	str	r1, [r7, #8]
 800f5bc:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7fd ff23 	bl	800d40a <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	68b8      	ldr	r0, [r7, #8]
 800f5ca:	f7ff ffd7 	bl	800f57c <_ZSt12construct_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 800f5ce:	bf00      	nop
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b082      	sub	sp, #8
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f945 	bl	800f86e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b084      	sub	sp, #16
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	6039      	str	r1, [r7, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	60fb      	str	r3, [r7, #12]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800f600:	f7f5 ffe9 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d009      	beq.n	800f61e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	4613      	mov	r3, r2
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	1a9b      	subs	r3, r3, r2
 800f612:	00db      	lsls	r3, r3, #3
 800f614:	4618      	mov	r0, r3
 800f616:	f003 fda3 	bl	8013160 <_Znwj>
 800f61a:	4603      	mov	r3, r0
 800f61c:	e006      	b.n	800f62c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f61e:	2200      	movs	r2, #0
 800f620:	68b9      	ldr	r1, [r7, #8]
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f000 f988 	bl	800f938 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>
 800f628:	4603      	mov	r3, r0
 800f62a:	bf00      	nop
      { return __a.allocate(__n); }
 800f62c:	4618      	mov	r0, r3
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800f634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800f63e:	6838      	ldr	r0, [r7, #0]
 800f640:	f7fe f899 	bl	800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f644:	4605      	mov	r5, r0
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4619      	mov	r1, r3
 800f64a:	2028      	movs	r0, #40	; 0x28
 800f64c:	f7f5 ffcb 	bl	80055e6 <_ZnwjPv>
 800f650:	4606      	mov	r6, r0
 800f652:	4634      	mov	r4, r6
 800f654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f65a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f65c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f660:	e884 0003 	stmia.w	r4, {r0, r1}
 800f664:	4633      	mov	r3, r6
 800f666:	4618      	mov	r0, r3
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f66e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f66e:	b580      	push	{r7, lr}
 800f670:	b084      	sub	sp, #16
 800f672:	af00      	add	r7, sp, #0
 800f674:	60f8      	str	r0, [r7, #12]
 800f676:	60b9      	str	r1, [r7, #8]
 800f678:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7fe f87b 	bl	800d776 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f680:	4603      	mov	r3, r0
 800f682:	4619      	mov	r1, r3
 800f684:	68b8      	ldr	r0, [r7, #8]
 800f686:	f7ff ffd5 	bl	800f634 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 800f68a:	bf00      	nop
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800f692:	b580      	push	{r7, lr}
 800f694:	b082      	sub	sp, #8
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 f8f2 	bl	800f884 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b084      	sub	sp, #16
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	6039      	str	r1, [r7, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800f6bc:	f7f5 ff8b 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d009      	beq.n	800f6da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	00db      	lsls	r3, r3, #3
 800f6cc:	4413      	add	r3, r2
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f003 fd45 	bl	8013160 <_Znwj>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	e006      	b.n	800f6e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f6da:	2200      	movs	r2, #0
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f000 f94c 	bl	800f97c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	bf00      	nop
      { return __a.allocate(__n); }
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3710      	adds	r7, #16
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800f6fa:	6838      	ldr	r0, [r7, #0]
 800f6fc:	f7fe fa18 	bl	800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f700:	4605      	mov	r5, r0
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4619      	mov	r1, r3
 800f706:	2014      	movs	r0, #20
 800f708:	f7f5 ff6d 	bl	80055e6 <_ZnwjPv>
 800f70c:	4606      	mov	r6, r0
 800f70e:	4634      	mov	r4, r6
 800f710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f714:	682b      	ldr	r3, [r5, #0]
 800f716:	6023      	str	r3, [r4, #0]
 800f718:	4633      	mov	r3, r6
 800f71a:	4618      	mov	r0, r3
 800f71c:	370c      	adds	r7, #12
 800f71e:	46bd      	mov	sp, r7
 800f720:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f722 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f722:	b580      	push	{r7, lr}
 800f724:	b084      	sub	sp, #16
 800f726:	af00      	add	r7, sp, #0
 800f728:	60f8      	str	r0, [r7, #12]
 800f72a:	60b9      	str	r1, [r7, #8]
 800f72c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f7fe f9fe 	bl	800db30 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f734:	4603      	mov	r3, r0
 800f736:	4619      	mov	r1, r3
 800f738:	68b8      	ldr	r0, [r7, #8]
 800f73a:	f7ff ffd9 	bl	800f6f0 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 800f73e:	bf00      	nop
 800f740:	3710      	adds	r7, #16
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800f746:	b580      	push	{r7, lr}
 800f748:	b082      	sub	sp, #8
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f8a3 	bl	800f89a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 800f754:	4603      	mov	r3, r0
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800f75e:	b580      	push	{r7, lr}
 800f760:	b084      	sub	sp, #16
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	6039      	str	r1, [r7, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800f770:	f7f5 ff31 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d008      	beq.n	800f78c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	222c      	movs	r2, #44	; 0x2c
 800f77e:	fb02 f303 	mul.w	r3, r2, r3
 800f782:	4618      	mov	r0, r3
 800f784:	f003 fcec 	bl	8013160 <_Znwj>
 800f788:	4603      	mov	r3, r0
 800f78a:	e006      	b.n	800f79a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f78c:	2200      	movs	r2, #0
 800f78e:	68b9      	ldr	r1, [r7, #8]
 800f790:	68f8      	ldr	r0, [r7, #12]
 800f792:	f000 f915 	bl	800f9c0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>
 800f796:	4603      	mov	r3, r0
 800f798:	bf00      	nop
      { return __a.allocate(__n); }
 800f79a:	4618      	mov	r0, r3
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>:
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b082      	sub	sp, #8
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	6039      	str	r1, [r7, #0]
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	801a      	strh	r2, [r3, #0]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	1d1a      	adds	r2, r3, #4
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	3304      	adds	r3, #4
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	f000 f875 	bl	800f8b0 <_ZNSt8functionIFvvEEC1ERKS1_>
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	7d1a      	ldrb	r2, [r3, #20]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	751a      	strb	r2, [r3, #20]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	881a      	ldrh	r2, [r3, #0]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	801a      	strh	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	1d1a      	adds	r2, r3, #4
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	f7ff ffd4 	bl	800f7a2 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3708      	adds	r7, #8
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}

0800f804 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800f804:	b5b0      	push	{r4, r5, r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800f80e:	6838      	ldr	r0, [r7, #0]
 800f810:	f7fe fbdc 	bl	800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f814:	4605      	mov	r5, r0
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4619      	mov	r1, r3
 800f81a:	201c      	movs	r0, #28
 800f81c:	f7f5 fee3 	bl	80055e6 <_ZnwjPv>
 800f820:	4604      	mov	r4, r0
 800f822:	4629      	mov	r1, r5
 800f824:	4620      	mov	r0, r4
 800f826:	f7ff ffd7 	bl	800f7d8 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>
 800f82a:	4623      	mov	r3, r4
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bdb0      	pop	{r4, r5, r7, pc}

0800f834 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7fe fbc3 	bl	800dfcc <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f846:	4603      	mov	r3, r0
 800f848:	4619      	mov	r1, r3
 800f84a:	68b8      	ldr	r0, [r7, #8]
 800f84c:	f7ff ffda 	bl	800f804 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 800f850:	bf00      	nop
 800f852:	3710      	adds	r7, #16
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() const noexcept
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4618      	mov	r0, r3
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800f86e:	b480      	push	{r7}
 800f870:	b083      	sub	sp, #12
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4618      	mov	r0, r3
 800f87a:	370c      	adds	r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4618      	mov	r0, r3
 800f890:	370c      	adds	r7, #12
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800f89a:	b480      	push	{r7}
 800f89c:	b083      	sub	sp, #12
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fb fd8d 	bl	800b3dc <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 800f8c2:	6838      	ldr	r0, [r7, #0]
 800f8c4:	f000 f89d 	bl	800fa02 <_ZNKSt8functionIFvvEEcvbEv>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00d      	beq.n	800f8ea <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	6839      	ldr	r1, [r7, #0]
 800f8d6:	2202      	movs	r2, #2
 800f8d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	68da      	ldr	r2, [r3, #12]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	689a      	ldr	r2, [r3, #8]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	609a      	str	r2, [r3, #8]
	}
    }
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f000 f88f 	bl	800fa24 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>
 800f906:	4602      	mov	r2, r0
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	4293      	cmp	r3, r2
 800f90c:	bf8c      	ite	hi
 800f90e:	2301      	movhi	r3, #1
 800f910:	2300      	movls	r3, #0
 800f912:	b2db      	uxtb	r3, r3
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f918:	f003 fce6 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f91c:	68ba      	ldr	r2, [r7, #8]
 800f91e:	4613      	mov	r3, r2
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	4413      	add	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4618      	mov	r0, r3
 800f928:	f003 fc1a 	bl	8013160 <_Znwj>
 800f92c:	4603      	mov	r3, r0
 800f92e:	bf00      	nop
      }
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f000 f87b 	bl	800fa40 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>
 800f94a:	4602      	mov	r2, r0
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	4293      	cmp	r3, r2
 800f950:	bf8c      	ite	hi
 800f952:	2301      	movhi	r3, #1
 800f954:	2300      	movls	r3, #0
 800f956:	b2db      	uxtb	r3, r3
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d001      	beq.n	800f960 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f95c:	f003 fcc4 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	4613      	mov	r3, r2
 800f964:	00db      	lsls	r3, r3, #3
 800f966:	1a9b      	subs	r3, r3, r2
 800f968:	00db      	lsls	r3, r3, #3
 800f96a:	4618      	mov	r0, r3
 800f96c:	f003 fbf8 	bl	8013160 <_Znwj>
 800f970:	4603      	mov	r3, r0
 800f972:	bf00      	nop
      }
 800f974:	4618      	mov	r0, r3
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f000 f867 	bl	800fa5c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>
 800f98e:	4602      	mov	r2, r0
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	4293      	cmp	r3, r2
 800f994:	bf8c      	ite	hi
 800f996:	2301      	movhi	r3, #1
 800f998:	2300      	movls	r3, #0
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f9a0:	f003 fca2 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	00db      	lsls	r3, r3, #3
 800f9aa:	4413      	add	r3, r2
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f003 fbd6 	bl	8013160 <_Znwj>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	bf00      	nop
      }
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3710      	adds	r7, #16
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 f853 	bl	800fa78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	bf8c      	ite	hi
 800f9da:	2301      	movhi	r3, #1
 800f9dc:	2300      	movls	r3, #0
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d001      	beq.n	800f9e8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f9e4:	f003 fc80 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	222c      	movs	r2, #44	; 0x2c
 800f9ec:	fb02 f303 	mul.w	r3, r2, r3
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f003 fbb5 	bl	8013160 <_Znwj>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	bf00      	nop
      }
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}

0800fa02 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 800fa02:	b580      	push	{r7, lr}
 800fa04:	b082      	sub	sp, #8
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fb fd06 	bl	800b41e <_ZNKSt14_Function_base8_M_emptyEv>
 800fa12:	4603      	mov	r3, r0
 800fa14:	f083 0301 	eor.w	r3, r3, #1
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
	...

0800fa24 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800fa2c:	4b03      	ldr	r3, [pc, #12]	; (800fa3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv+0x18>)
      }
 800fa2e:	4618      	mov	r0, r3
 800fa30:	370c      	adds	r7, #12
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	038e38e3 	.word	0x038e38e3

0800fa40 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800fa48:	4b03      	ldr	r3, [pc, #12]	; (800fa58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop
 800fa58:	02492492 	.word	0x02492492

0800fa5c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800fa64:	4b03      	ldr	r3, [pc, #12]	; (800fa74 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800fa66:	4618      	mov	r0, r3
 800fa68:	370c      	adds	r7, #12
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	038e38e3 	.word	0x038e38e3

0800fa78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800fa80:	4b03      	ldr	r3, [pc, #12]	; (800fa90 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800fa82:	4618      	mov	r0, r3
 800fa84:	370c      	adds	r7, #12
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	02e8ba2e 	.word	0x02e8ba2e

0800fa94 <_Z41__static_initialization_and_destruction_0ii>:
 ***********************************************/
#ifdef HAL_EXTI_MODULE_ENABLED

map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
	{PE0.gpio_pin, Instance(EXTI0_IRQn)}
};
 800fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa96:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800fa9a:	af02      	add	r7, sp, #8
 800fa9c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800faa0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800faa4:	6018      	str	r0, [r3, #0]
 800faa6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800faaa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800faae:	6019      	str	r1, [r3, #0]
 800fab0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fab4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b01      	cmp	r3, #1
 800fabc:	f040 8299 	bne.w	800fff2 <_Z41__static_initialization_and_destruction_0ii+0x55e>
 800fac0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fac4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800face:	4293      	cmp	r3, r2
 800fad0:	f040 828f 	bne.w	800fff2 <_Z41__static_initialization_and_destruction_0ii+0x55e>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 800fad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fad8:	4a42      	ldr	r2, [pc, #264]	; (800fbe4 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800fada:	4943      	ldr	r1, [pc, #268]	; (800fbe8 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f7 fcd4 	bl	800748a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PC6, PC7}, {&htim8}},
 800fae2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fae6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800faea:	4a40      	ldr	r2, [pc, #256]	; (800fbec <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800faec:	601a      	str	r2, [r3, #0]
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 800faee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800faf2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800faf6:	f107 0314 	add.w	r3, r7, #20
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fb fdb3 	bl	800b666 <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>
 800fb00:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fb04:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800fb08:	f107 0214 	add.w	r2, r7, #20
 800fb0c:	601a      	str	r2, [r3, #0]
 800fb0e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fb12:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800fb16:	2201      	movs	r2, #1
 800fb18:	605a      	str	r2, [r3, #4]
 800fb1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fb fdb7 	bl	800b692 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>
 800fb24:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800fb28:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fb2c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800fb30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	460b      	mov	r3, r1
 800fb38:	ca06      	ldmia	r2, {r1, r2}
 800fb3a:	482d      	ldr	r0, [pc, #180]	; (800fbf0 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800fb3c:	f7fb fdc0 	bl	800b6c0 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>
 800fb40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fb fdb0 	bl	800b6aa <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
PWMservice::TimerInitData init_data_timer1 = PWMservice::TimerInitData(TIM1, 2750, 1000);
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb52:	f640 22be 	movw	r2, #2750	; 0xabe
 800fb56:	4927      	ldr	r1, [pc, #156]	; (800fbf4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800fb58:	4827      	ldr	r0, [pc, #156]	; (800fbf8 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800fb5a:	f7f6 fee1 	bl	8006920 <_ZN10PWMservice13TimerInitDataC1EP11TIM_TypeDefmmm>
PWMservice::TimerInitData init_data_timer15 = PWMservice::TimerInitData(TIM15, 0, 65535);
 800fb5e:	2300      	movs	r3, #0
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb66:	2200      	movs	r2, #0
 800fb68:	4924      	ldr	r1, [pc, #144]	; (800fbfc <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800fb6a:	4825      	ldr	r0, [pc, #148]	; (800fc00 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800fb6c:	f7f6 fed8 	bl	8006920 <_ZN10PWMservice13TimerInitDataC1EP11TIM_TypeDefmmm>
		TimerPeripheral(&htim15, init_data_timer15)};
 800fb70:	4c24      	ldr	r4, [pc, #144]	; (800fc04 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800fb72:	2517      	movs	r5, #23
 800fb74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fb78:	491f      	ldr	r1, [pc, #124]	; (800fbf8 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7f6 ff01 	bl	8006982 <_ZN10PWMservice13TimerInitDataC1ERKS0_>
 800fb80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fb84:	461a      	mov	r2, r3
 800fb86:	4920      	ldr	r1, [pc, #128]	; (800fc08 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f7f6 ff2b 	bl	80069e4 <_ZN10PWMservice15TimerPeripheralC1EP17TIM_HandleTypeDefNS_13TimerInitDataE>
 800fb8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7f6 ff18 	bl	80069c8 <_ZN10PWMservice13TimerInitDataD1Ev>
 800fb98:	3420      	adds	r4, #32
 800fb9a:	1e6e      	subs	r6, r5, #1
 800fb9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fba0:	4917      	ldr	r1, [pc, #92]	; (800fc00 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7f6 feed 	bl	8006982 <_ZN10PWMservice13TimerInitDataC1ERKS0_>
 800fba8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fbac:	461a      	mov	r2, r3
 800fbae:	4917      	ldr	r1, [pc, #92]	; (800fc0c <_Z41__static_initialization_and_destruction_0ii+0x178>)
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f7f6 ff17 	bl	80069e4 <_ZN10PWMservice15TimerPeripheralC1EP17TIM_HandleTypeDefNS_13TimerInitDataE>
 800fbb6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7f6 ff04 	bl	80069c8 <_ZN10PWMservice13TimerInitDataD1Ev>
 800fbc0:	f104 0520 	add.w	r5, r4, #32
 800fbc4:	1e74      	subs	r4, r6, #1
 800fbc6:	2c00      	cmp	r4, #0
 800fbc8:	db22      	blt.n	800fc10 <_Z41__static_initialization_and_destruction_0ii+0x17c>
 800fbca:	4628      	mov	r0, r5
 800fbcc:	2320      	movs	r3, #32
 800fbce:	461a      	mov	r2, r3
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	f003 fc4b 	bl	801346c <memset>
 800fbd6:	4628      	mov	r0, r5
 800fbd8:	f7fb fc88 	bl	800b4ec <_ZN10PWMservice15TimerPeripheralC1Ev>
 800fbdc:	3520      	adds	r5, #32
 800fbde:	3c01      	subs	r4, #1
 800fbe0:	e7f1      	b.n	800fbc6 <_Z41__static_initialization_and_destruction_0ii+0x132>
 800fbe2:	bf00      	nop
 800fbe4:	24000788 	.word	0x24000788
 800fbe8:	24000780 	.word	0x24000780
 800fbec:	2400048c 	.word	0x2400048c
 800fbf0:	240008c0 	.word	0x240008c0
 800fbf4:	40010000 	.word	0x40010000
 800fbf8:	240008d8 	.word	0x240008d8
 800fbfc:	40014000 	.word	0x40014000
 800fc00:	240008f4 	.word	0x240008f4
 800fc04:	24000910 	.word	0x24000910
 800fc08:	240003f4 	.word	0x240003f4
 800fc0c:	240004d8 	.word	0x240004d8
		{PE14, PWMservice::Instance(&timer_peripherals[0], TIM_CHANNEL_4, NORMAL)}
 800fc10:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800fc14:	2300      	movs	r3, #0
 800fc16:	220c      	movs	r2, #12
 800fc18:	49ca      	ldr	r1, [pc, #808]	; (800ff44 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 800fc1a:	f7f6 ff0a 	bl	8006a32 <_ZN10PWMservice8InstanceC1EPNS_15TimerPeripheralEmNS_4ModeE>
map<Pin, PWMservice::Instance> PWMservice::available_instances = {
 800fc1e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800fc22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fc26:	49c8      	ldr	r1, [pc, #800]	; (800ff48 <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fb fd9a 	bl	800b762 <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 800fc2e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fc32:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800fc36:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800fc3a:	601a      	str	r2, [r3, #0]
 800fc3c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fc40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800fc44:	2201      	movs	r2, #1
 800fc46:	605a      	str	r2, [r3, #4]
 800fc48:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fb fda5 	bl	800b79c <_ZNSaISt4pairIK3PinN10PWMservice8InstanceEEEC1Ev>
 800fc52:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800fc56:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fc5a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800fc5e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	460b      	mov	r3, r1
 800fc66:	ca06      	ldmia	r2, {r1, r2}
 800fc68:	48b8      	ldr	r0, [pc, #736]	; (800ff4c <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 800fc6a:	f7fb fdae 	bl	800b7ca <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 800fc6e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fb fd9e 	bl	800b7b4 <_ZNSaISt4pairIK3PinN10PWMservice8InstanceEEED1Ev>
map<Pin, PWMservice::Instance> PWMservice::available_instances_negated = {};
 800fc78:	4bb5      	ldr	r3, [pc, #724]	; (800ff50 <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	6053      	str	r3, [r2, #4]
 800fc82:	6093      	str	r3, [r2, #8]
 800fc84:	60d3      	str	r3, [r2, #12]
 800fc86:	6113      	str	r3, [r2, #16]
 800fc88:	6153      	str	r3, [r2, #20]
 800fc8a:	48b1      	ldr	r0, [pc, #708]	; (800ff50 <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 800fc8c:	f7fb fc62 	bl	800b554 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>
map<pair<Pin, Pin>, PWMservice::Instance> PWMservice::available_instances_dual = {
 800fc90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800fc94:	4aaf      	ldr	r2, [pc, #700]	; (800ff54 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 800fc96:	49b0      	ldr	r1, [pc, #704]	; (800ff58 <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7f7 fbf6 	bl	800748a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE9, PE8}, PWMservice::Instance(&timer_peripherals[0], TIM_CHANNEL_1, DUAL)},
 800fc9e:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 800fca2:	2302      	movs	r3, #2
 800fca4:	2200      	movs	r2, #0
 800fca6:	49a7      	ldr	r1, [pc, #668]	; (800ff44 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 800fca8:	f7f6 fec3 	bl	8006a32 <_ZN10PWMservice8InstanceC1EPNS_15TimerPeripheralEmNS_4ModeE>
map<pair<Pin, Pin>, PWMservice::Instance> PWMservice::available_instances_dual = {
 800fcac:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800fcb0:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800fcb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7fb fdeb 	bl	800b894 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 800fcbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcc2:	4aa6      	ldr	r2, [pc, #664]	; (800ff5c <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 800fcc4:	49a6      	ldr	r1, [pc, #664]	; (800ff60 <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7f7 fbdf 	bl	800748a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE11, PE10}, PWMservice::Instance(&timer_peripherals[0], TIM_CHANNEL_2, DUAL)},
 800fccc:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800fcd0:	2302      	movs	r3, #2
 800fcd2:	2204      	movs	r2, #4
 800fcd4:	499b      	ldr	r1, [pc, #620]	; (800ff44 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 800fcd6:	f7f6 feac 	bl	8006a32 <_ZN10PWMservice8InstanceC1EPNS_15TimerPeripheralEmNS_4ModeE>
map<pair<Pin, Pin>, PWMservice::Instance> PWMservice::available_instances_dual = {
 800fcda:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800fcde:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800fce2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fce6:	331c      	adds	r3, #28
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7fb fdd3 	bl	800b894 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 800fcee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fcf2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800fcf6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800fcfa:	601a      	str	r2, [r3, #0]
 800fcfc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fd00:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800fd04:	2202      	movs	r2, #2
 800fd06:	605a      	str	r2, [r3, #4]
 800fd08:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fb fddb 	bl	800b8c8 <_ZNSaISt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEEC1Ev>
 800fd12:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800fd16:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fd1a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 800fd1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	460b      	mov	r3, r1
 800fd26:	ca06      	ldmia	r2, {r1, r2}
 800fd28:	488e      	ldr	r0, [pc, #568]	; (800ff64 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 800fd2a:	f7fb fde4 	bl	800b8f6 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>
 800fd2e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7fb fdd4 	bl	800b8e0 <_ZNSaISt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEED1Ev>
		{PA0, InputCapture::Instance(PA0, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2)}
 800fd38:	4a8b      	ldr	r2, [pc, #556]	; (800ff68 <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 800fd3a:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 800fd3e:	2304      	movs	r3, #4
 800fd40:	9301      	str	r3, [sp, #4]
 800fd42:	2300      	movs	r3, #0
 800fd44:	9300      	str	r3, [sp, #0]
 800fd46:	4b89      	ldr	r3, [pc, #548]	; (800ff6c <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 800fd48:	ca06      	ldmia	r2, {r1, r2}
 800fd4a:	f002 f803 	bl	8011d54 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 800fd4e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800fd52:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800fd56:	4984      	ldr	r1, [pc, #528]	; (800ff68 <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fb fe1d 	bl	800b998 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 800fd5e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800fd62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800fd66:	2301      	movs	r3, #1
 800fd68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800fd6c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fb fe33 	bl	800b9dc <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 800fd76:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800fd7a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	4613      	mov	r3, r2
 800fd82:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800fd86:	ca06      	ldmia	r2, {r1, r2}
 800fd88:	4879      	ldr	r0, [pc, #484]	; (800ff70 <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 800fd8a:	f7fb fe3e 	bl	800ba0a <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 800fd8e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fb fe2e 	bl	800b9f4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
LowPowerTimer lptim1 = LowPowerTimer(&hlptim1, LPTIM1_PERIOD);
 800fd98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800fd9c:	4975      	ldr	r1, [pc, #468]	; (800ff74 <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 800fd9e:	4876      	ldr	r0, [pc, #472]	; (800ff78 <_Z41__static_initialization_and_destruction_0ii+0x4e4>)
 800fda0:	f7fb fb68 	bl	800b474 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim2 = LowPowerTimer(&hlptim2, LPTIM2_PERIOD);
 800fda4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800fda8:	4974      	ldr	r1, [pc, #464]	; (800ff7c <_Z41__static_initialization_and_destruction_0ii+0x4e8>)
 800fdaa:	4875      	ldr	r0, [pc, #468]	; (800ff80 <_Z41__static_initialization_and_destruction_0ii+0x4ec>)
 800fdac:	f7fb fb62 	bl	800b474 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim3 = LowPowerTimer(&hlptim3, LPTIM3_PERIOD);
 800fdb0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800fdb4:	4973      	ldr	r1, [pc, #460]	; (800ff84 <_Z41__static_initialization_and_destruction_0ii+0x4f0>)
 800fdb6:	4874      	ldr	r0, [pc, #464]	; (800ff88 <_Z41__static_initialization_and_destruction_0ii+0x4f4>)
 800fdb8:	f7fb fb5c 	bl	800b474 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
vector<uint32_t> channels1 = {};
 800fdbc:	4b73      	ldr	r3, [pc, #460]	; (800ff8c <_Z41__static_initialization_and_destruction_0ii+0x4f8>)
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	6013      	str	r3, [r2, #0]
 800fdc4:	6053      	str	r3, [r2, #4]
 800fdc6:	6093      	str	r3, [r2, #8]
 800fdc8:	4870      	ldr	r0, [pc, #448]	; (800ff8c <_Z41__static_initialization_and_destruction_0ii+0x4f8>)
 800fdca:	f7fb fb46 	bl	800b45a <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels2 = {};
 800fdce:	4b70      	ldr	r3, [pc, #448]	; (800ff90 <_Z41__static_initialization_and_destruction_0ii+0x4fc>)
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	6013      	str	r3, [r2, #0]
 800fdd6:	6053      	str	r3, [r2, #4]
 800fdd8:	6093      	str	r3, [r2, #8]
 800fdda:	486d      	ldr	r0, [pc, #436]	; (800ff90 <_Z41__static_initialization_and_destruction_0ii+0x4fc>)
 800fddc:	f7fb fb3d 	bl	800b45a <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels3 = {};
 800fde0:	4b6c      	ldr	r3, [pc, #432]	; (800ff94 <_Z41__static_initialization_and_destruction_0ii+0x500>)
 800fde2:	461a      	mov	r2, r3
 800fde4:	2300      	movs	r3, #0
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	6053      	str	r3, [r2, #4]
 800fdea:	6093      	str	r3, [r2, #8]
 800fdec:	4869      	ldr	r0, [pc, #420]	; (800ff94 <_Z41__static_initialization_and_destruction_0ii+0x500>)
 800fdee:	f7fb fb34 	bl	800b45a <_ZNSt6vectorImSaImEEC1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 800fdf2:	4b66      	ldr	r3, [pc, #408]	; (800ff8c <_Z41__static_initialization_and_destruction_0ii+0x4f8>)
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4966      	ldr	r1, [pc, #408]	; (800ff98 <_Z41__static_initialization_and_destruction_0ii+0x504>)
 800fdfe:	4867      	ldr	r0, [pc, #412]	; (800ff9c <_Z41__static_initialization_and_destruction_0ii+0x508>)
 800fe00:	f000 f9b5 	bl	801016e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 800fe04:	4b62      	ldr	r3, [pc, #392]	; (800ff90 <_Z41__static_initialization_and_destruction_0ii+0x4fc>)
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4964      	ldr	r1, [pc, #400]	; (800ffa0 <_Z41__static_initialization_and_destruction_0ii+0x50c>)
 800fe10:	4864      	ldr	r0, [pc, #400]	; (800ffa4 <_Z41__static_initialization_and_destruction_0ii+0x510>)
 800fe12:	f000 f9ac 	bl	801016e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 800fe16:	4b5f      	ldr	r3, [pc, #380]	; (800ff94 <_Z41__static_initialization_and_destruction_0ii+0x500>)
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 800fe1e:	2208      	movs	r2, #8
 800fe20:	4961      	ldr	r1, [pc, #388]	; (800ffa8 <_Z41__static_initialization_and_destruction_0ii+0x514>)
 800fe22:	4862      	ldr	r0, [pc, #392]	; (800ffac <_Z41__static_initialization_and_destruction_0ii+0x518>)
 800fe24:	f000 f9a3 	bl	801016e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
};
 800fe28:	4c61      	ldr	r4, [pc, #388]	; (800ffb0 <_Z41__static_initialization_and_destruction_0ii+0x51c>)
 800fe2a:	4b5c      	ldr	r3, [pc, #368]	; (800ff9c <_Z41__static_initialization_and_destruction_0ii+0x508>)
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	4b52      	ldr	r3, [pc, #328]	; (800ff78 <_Z41__static_initialization_and_destruction_0ii+0x4e4>)
 800fe30:	4a60      	ldr	r2, [pc, #384]	; (800ffb4 <_Z41__static_initialization_and_destruction_0ii+0x520>)
 800fe32:	4961      	ldr	r1, [pc, #388]	; (800ffb8 <_Z41__static_initialization_and_destruction_0ii+0x524>)
 800fe34:	4620      	mov	r0, r4
 800fe36:	f000 f9d4 	bl	80101e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 800fe3a:	342c      	adds	r4, #44	; 0x2c
 800fe3c:	4b59      	ldr	r3, [pc, #356]	; (800ffa4 <_Z41__static_initialization_and_destruction_0ii+0x510>)
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	4b4f      	ldr	r3, [pc, #316]	; (800ff80 <_Z41__static_initialization_and_destruction_0ii+0x4ec>)
 800fe42:	4a5e      	ldr	r2, [pc, #376]	; (800ffbc <_Z41__static_initialization_and_destruction_0ii+0x528>)
 800fe44:	495e      	ldr	r1, [pc, #376]	; (800ffc0 <_Z41__static_initialization_and_destruction_0ii+0x52c>)
 800fe46:	4620      	mov	r0, r4
 800fe48:	f000 f9cb 	bl	80101e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 800fe4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800fe50:	4b56      	ldr	r3, [pc, #344]	; (800ffac <_Z41__static_initialization_and_destruction_0ii+0x518>)
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	4b4c      	ldr	r3, [pc, #304]	; (800ff88 <_Z41__static_initialization_and_destruction_0ii+0x4f4>)
 800fe56:	4a5b      	ldr	r2, [pc, #364]	; (800ffc4 <_Z41__static_initialization_and_destruction_0ii+0x530>)
 800fe58:	495b      	ldr	r1, [pc, #364]	; (800ffc8 <_Z41__static_initialization_and_destruction_0ii+0x534>)
 800fe5a:	f000 f9c2 	bl	80101e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
		{PF11, Instance(&peripherals[0], ADC_CHANNEL_2)},
 800fe5e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800fe62:	4a5a      	ldr	r2, [pc, #360]	; (800ffcc <_Z41__static_initialization_and_destruction_0ii+0x538>)
 800fe64:	4952      	ldr	r1, [pc, #328]	; (800ffb0 <_Z41__static_initialization_and_destruction_0ii+0x51c>)
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 f9de 	bl	8010228 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 800fe6c:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800fe70:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800fe74:	4956      	ldr	r1, [pc, #344]	; (800ffd0 <_Z41__static_initialization_and_destruction_0ii+0x53c>)
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fb fe18 	bl	800baac <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PA6, Instance(&peripherals[0], ADC_CHANNEL_3)}
 800fe7c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800fe80:	4a54      	ldr	r2, [pc, #336]	; (800ffd4 <_Z41__static_initialization_and_destruction_0ii+0x540>)
 800fe82:	494b      	ldr	r1, [pc, #300]	; (800ffb0 <_Z41__static_initialization_and_destruction_0ii+0x51c>)
 800fe84:	4618      	mov	r0, r3
 800fe86:	f000 f9cf 	bl	8010228 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 800fe8a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800fe8e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800fe92:	3314      	adds	r3, #20
 800fe94:	4950      	ldr	r1, [pc, #320]	; (800ffd8 <_Z41__static_initialization_and_destruction_0ii+0x544>)
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fb fe08 	bl	800baac <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 800fe9c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800fea0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800fea4:	2302      	movs	r3, #2
 800fea6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800feaa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fb fe19 	bl	800bae6 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 800feb4:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 800feb8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800febc:	9300      	str	r3, [sp, #0]
 800febe:	4613      	mov	r3, r2
 800fec0:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800fec4:	ca06      	ldmia	r2, {r1, r2}
 800fec6:	4845      	ldr	r0, [pc, #276]	; (800ffdc <_Z41__static_initialization_and_destruction_0ii+0x548>)
 800fec8:	f7fb fe24 	bl	800bb14 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 800fecc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fb fe14 	bl	800bafe <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
	{PE0.gpio_pin, Instance(EXTI0_IRQn)}
 800fed6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800feda:	2106      	movs	r1, #6
 800fedc:	4618      	mov	r0, r3
 800fede:	f000 fbac 	bl	801063a <_ZN17ExternalInterrupt8InstanceC1E9IRQn_Type>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 800fee2:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800fee6:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800feea:	493d      	ldr	r1, [pc, #244]	; (800ffe0 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 800feec:	4618      	mov	r0, r3
 800feee:	f7fb fe88 	bl	800bc02 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>
 800fef2:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800fef6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800fefa:	2301      	movs	r3, #1
 800fefc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800ff00:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fb fe98 	bl	800bc3a <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 800ff0a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800ff0e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	4613      	mov	r3, r2
 800ff16:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800ff1a:	ca06      	ldmia	r2, {r1, r2}
 800ff1c:	4831      	ldr	r0, [pc, #196]	; (800ffe4 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 800ff1e:	f7fb fea3 	bl	800bc68 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 800ff22:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fb fe93 	bl	800bc52 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
};
 800ff2c:	f507 74ee 	add.w	r4, r7, #476	; 0x1dc
 800ff30:	341c      	adds	r4, #28
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 800ff32:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800ff36:	429c      	cmp	r4, r3
 800ff38:	d056      	beq.n	800ffe8 <_Z41__static_initialization_and_destruction_0ii+0x554>
};
 800ff3a:	3c1c      	subs	r4, #28
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f7fb fb67 	bl	800b610 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 800ff42:	e7f6      	b.n	800ff32 <_Z41__static_initialization_and_destruction_0ii+0x49e>
 800ff44:	24000910 	.word	0x24000910
 800ff48:	240006c8 	.word	0x240006c8
 800ff4c:	24000c10 	.word	0x24000c10
 800ff50:	24000c28 	.word	0x24000c28
 800ff54:	24000698 	.word	0x24000698
 800ff58:	240006a0 	.word	0x240006a0
 800ff5c:	240006a8 	.word	0x240006a8
 800ff60:	240006b0 	.word	0x240006b0
 800ff64:	24000c40 	.word	0x24000c40
 800ff68:	240005f0 	.word	0x240005f0
 800ff6c:	24000440 	.word	0x24000440
 800ff70:	24000c58 	.word	0x24000c58
 800ff74:	24000348 	.word	0x24000348
 800ff78:	24000cd0 	.word	0x24000cd0
 800ff7c:	24000380 	.word	0x24000380
 800ff80:	24000cd8 	.word	0x24000cd8
 800ff84:	240003b8 	.word	0x240003b8
 800ff88:	24000ce0 	.word	0x24000ce0
 800ff8c:	24000ce8 	.word	0x24000ce8
 800ff90:	24000cf4 	.word	0x24000cf4
 800ff94:	24000d00 	.word	0x24000d00
 800ff98:	40022000 	.word	0x40022000
 800ff9c:	24000d0c 	.word	0x24000d0c
 800ffa0:	40022100 	.word	0x40022100
 800ffa4:	24000d24 	.word	0x24000d24
 800ffa8:	58026000 	.word	0x58026000
 800ffac:	24000d3c 	.word	0x24000d3c
 800ffb0:	24000d54 	.word	0x24000d54
 800ffb4:	24000c70 	.word	0x24000c70
 800ffb8:	24000090 	.word	0x24000090
 800ffbc:	24000c90 	.word	0x24000c90
 800ffc0:	24000100 	.word	0x24000100
 800ffc4:	24000cb0 	.word	0x24000cb0
 800ffc8:	24000170 	.word	0x24000170
 800ffcc:	08600004 	.word	0x08600004
 800ffd0:	24000658 	.word	0x24000658
 800ffd4:	0c900008 	.word	0x0c900008
 800ffd8:	24000620 	.word	0x24000620
 800ffdc:	24000dd8 	.word	0x24000dd8
 800ffe0:	2400088c 	.word	0x2400088c
 800ffe4:	24000df0 	.word	0x24000df0
	{PE0.gpio_pin, Instance(EXTI0_IRQn)}
 800ffe8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fb fb01 	bl	800b5f4 <_ZN17ExternalInterrupt8InstanceD1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 800fff2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fff6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d147      	bne.n	8010090 <_Z41__static_initialization_and_destruction_0ii+0x5fc>
 8010000:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010004:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801000e:	4293      	cmp	r3, r2
 8010010:	d13e      	bne.n	8010090 <_Z41__static_initialization_and_destruction_0ii+0x5fc>
 8010012:	4822      	ldr	r0, [pc, #136]	; (801009c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8010014:	f7fb fb0a 	bl	800b62c <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>
map<Pin, ADC::Instance> ADC::available_instances = {
 8010018:	4821      	ldr	r0, [pc, #132]	; (80100a0 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 801001a:	f7fb fade 	bl	800b5da <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
ADC::Peripheral ADC::peripherals[3] = {
 801001e:	4c21      	ldr	r4, [pc, #132]	; (80100a4 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8010020:	4b21      	ldr	r3, [pc, #132]	; (80100a8 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8010022:	429c      	cmp	r4, r3
 8010024:	d004      	beq.n	8010030 <_Z41__static_initialization_and_destruction_0ii+0x59c>
 8010026:	3c2c      	subs	r4, #44	; 0x2c
 8010028:	4620      	mov	r0, r4
 801002a:	f7fb fac8 	bl	800b5be <_ZN3ADC10PeripheralD1Ev>
 801002e:	e7f7      	b.n	8010020 <_Z41__static_initialization_and_destruction_0ii+0x58c>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 8010030:	481e      	ldr	r0, [pc, #120]	; (80100ac <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8010032:	f7fb fab6 	bl	800b5a2 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 8010036:	481e      	ldr	r0, [pc, #120]	; (80100b0 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8010038:	f7fb fab3 	bl	800b5a2 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 801003c:	481d      	ldr	r0, [pc, #116]	; (80100b4 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 801003e:	f7fb fab0 	bl	800b5a2 <_ZN3ADC8InitDataD1Ev>
vector<uint32_t> channels3 = {};
 8010042:	481d      	ldr	r0, [pc, #116]	; (80100b8 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8010044:	f7f7 f810 	bl	8007068 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels2 = {};
 8010048:	481c      	ldr	r0, [pc, #112]	; (80100bc <_Z41__static_initialization_and_destruction_0ii+0x628>)
 801004a:	f7f7 f80d 	bl	8007068 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels1 = {};
 801004e:	481c      	ldr	r0, [pc, #112]	; (80100c0 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8010050:	f7f7 f80a 	bl	8007068 <_ZNSt6vectorImSaImEED1Ev>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 8010054:	481b      	ldr	r0, [pc, #108]	; (80100c4 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8010056:	f7fb fa97 	bl	800b588 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<pair<Pin, Pin>, PWMservice::Instance> PWMservice::available_instances_dual = {
 801005a:	481b      	ldr	r0, [pc, #108]	; (80100c8 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 801005c:	f7fb fa87 	bl	800b56e <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
map<Pin, PWMservice::Instance> PWMservice::available_instances_negated = {};
 8010060:	481a      	ldr	r0, [pc, #104]	; (80100cc <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8010062:	f7fb fa51 	bl	800b508 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<Pin, PWMservice::Instance> PWMservice::available_instances = {
 8010066:	481a      	ldr	r0, [pc, #104]	; (80100d0 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8010068:	f7fb fa4e 	bl	800b508 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
PWMservice::TimerPeripheral PWMservice::timer_peripherals[H723_TIMERS] = {
 801006c:	4c19      	ldr	r4, [pc, #100]	; (80100d4 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 801006e:	4b1a      	ldr	r3, [pc, #104]	; (80100d8 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8010070:	429c      	cmp	r4, r3
 8010072:	d004      	beq.n	801007e <_Z41__static_initialization_and_destruction_0ii+0x5ea>
 8010074:	3c20      	subs	r4, #32
 8010076:	4620      	mov	r0, r4
 8010078:	f7f6 fd8c 	bl	8006b94 <_ZN10PWMservice15TimerPeripheralD1Ev>
 801007c:	e7f7      	b.n	801006e <_Z41__static_initialization_and_destruction_0ii+0x5da>
PWMservice::TimerInitData init_data_timer15 = PWMservice::TimerInitData(TIM15, 0, 65535);
 801007e:	4817      	ldr	r0, [pc, #92]	; (80100dc <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8010080:	f7f6 fca2 	bl	80069c8 <_ZN10PWMservice13TimerInitDataD1Ev>
PWMservice::TimerInitData init_data_timer1 = PWMservice::TimerInitData(TIM1, 2750, 1000);
 8010084:	4816      	ldr	r0, [pc, #88]	; (80100e0 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 8010086:	f7f6 fc9f 	bl	80069c8 <_ZN10PWMservice13TimerInitDataD1Ev>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 801008a:	4816      	ldr	r0, [pc, #88]	; (80100e4 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 801008c:	f7fb fa13 	bl	800b4b6 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
};
 8010090:	bf00      	nop
 8010092:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8010096:	46bd      	mov	sp, r7
 8010098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801009a:	bf00      	nop
 801009c:	24000df0 	.word	0x24000df0
 80100a0:	24000dd8 	.word	0x24000dd8
 80100a4:	24000dd8 	.word	0x24000dd8
 80100a8:	24000d54 	.word	0x24000d54
 80100ac:	24000d3c 	.word	0x24000d3c
 80100b0:	24000d24 	.word	0x24000d24
 80100b4:	24000d0c 	.word	0x24000d0c
 80100b8:	24000d00 	.word	0x24000d00
 80100bc:	24000cf4 	.word	0x24000cf4
 80100c0:	24000ce8 	.word	0x24000ce8
 80100c4:	24000c58 	.word	0x24000c58
 80100c8:	24000c40 	.word	0x24000c40
 80100cc:	24000c28 	.word	0x24000c28
 80100d0:	24000c10 	.word	0x24000c10
 80100d4:	24000c10 	.word	0x24000c10
 80100d8:	24000910 	.word	0x24000910
 80100dc:	240008f4 	.word	0x240008f4
 80100e0:	240008d8 	.word	0x240008d8
 80100e4:	240008c0 	.word	0x240008c0

080100e8 <_GLOBAL__sub_I__ZN7Encoder13pin_timer_mapE>:
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80100f0:	2001      	movs	r0, #1
 80100f2:	f7ff fccf 	bl	800fa94 <_Z41__static_initialization_and_destruction_0ii>
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <_GLOBAL__sub_D__ZN7Encoder13pin_timer_mapE>:
 80100f8:	b580      	push	{r7, lr}
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010100:	2000      	movs	r0, #0
 8010102:	f7ff fcc7 	bl	800fa94 <_Z41__static_initialization_and_destruction_0ii>
 8010106:	bd80      	pop	{r7, pc}

08010108 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 f8b1 	bl	8010278 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4618      	mov	r0, r3
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4618      	mov	r0, r3
 801012c:	f000 f88f 	bl	801024e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4618      	mov	r0, r3
 8010134:	3708      	adds	r7, #8
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 801013a:	b580      	push	{r7, lr}
 801013c:	b082      	sub	sp, #8
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff ffeb 	bl	8010120 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4618      	mov	r0, r3
 8010160:	f000 f895 	bl	801028e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4618      	mov	r0, r3
 8010168:	3708      	adds	r7, #8
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>:
extern ADC_HandleTypeDef hadc3;

forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, ADC::Instance> ADC::active_instances = {};

ADC::InitData::InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels) :
 801016e:	b580      	push	{r7, lr}
 8010170:	b084      	sub	sp, #16
 8010172:	af00      	add	r7, sp, #0
 8010174:	60f8      	str	r0, [r7, #12]
 8010176:	60b9      	str	r1, [r7, #8]
 8010178:	607a      	str	r2, [r7, #4]
 801017a:	603b      	str	r3, [r7, #0]
		adc(adc), resolution(resolution), external_trigger(external_trigger), channels(channels) {}
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	68ba      	ldr	r2, [r7, #8]
 8010180:	601a      	str	r2, [r3, #0]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	605a      	str	r2, [r3, #4]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	609a      	str	r2, [r3, #8]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	330c      	adds	r3, #12
 8010192:	69b9      	ldr	r1, [r7, #24]
 8010194:	4618      	mov	r0, r3
 8010196:	f7f7 f846 	bl	8007226 <_ZNSt6vectorImSaImEEC1ERKS1_>
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	4618      	mov	r0, r3
 801019e:	3710      	adds	r7, #16
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <_ZN3ADC8InitDataC1ERKS0_>:
	struct InitData {
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	601a      	str	r2, [r3, #0]
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	685a      	ldr	r2, [r3, #4]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	605a      	str	r2, [r3, #4]
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	689a      	ldr	r2, [r3, #8]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	609a      	str	r2, [r3, #8]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f103 020c 	add.w	r2, r3, #12
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	330c      	adds	r3, #12
 80101d0:	4619      	mov	r1, r3
 80101d2:	4610      	mov	r0, r2
 80101d4:	f7f7 f827 	bl	8007226 <_ZNSt6vectorImSaImEEC1ERKS1_>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4618      	mov	r0, r3
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>:

ADC::Peripheral::Peripheral(ADC_HandleTypeDef* handle, uint16_t* dma_stream, LowPowerTimer& timer, InitData& init_data) :
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b084      	sub	sp, #16
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	60f8      	str	r0, [r7, #12]
 80101ea:	60b9      	str	r1, [r7, #8]
 80101ec:	607a      	str	r2, [r7, #4]
 80101ee:	603b      	str	r3, [r7, #0]
	handle(handle), dma_stream(dma_stream), timer(timer), init_data(init_data) {}
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	601a      	str	r2, [r3, #0]
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	605a      	str	r2, [r3, #4]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	3308      	adds	r3, #8
 8010202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010206:	e883 0003 	stmia.w	r3, {r0, r1}
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	3310      	adds	r3, #16
 801020e:	69b9      	ldr	r1, [r7, #24]
 8010210:	4618      	mov	r0, r3
 8010212:	f7ff ffc7 	bl	80101a4 <_ZN3ADC8InitDataC1ERKS0_>
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2200      	movs	r2, #0
 801021a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	4618      	mov	r0, r3
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>:

bool ADC::Peripheral::is_registered() {
	return init_data.channels.size();
}

ADC::Instance::Instance(ADC::Peripheral* peripheral, uint32_t channel) :
 8010228:	b480      	push	{r7}
 801022a:	b085      	sub	sp, #20
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
		peripheral(peripheral), channel(channel) {}
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	605a      	str	r2, [r3, #4]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801024e:	b580      	push	{r7, lr}
 8010250:	b082      	sub	sp, #8
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 f82e 	bl	80102b8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4618      	mov	r0, r3
 8010260:	f7f7 fad4 	bl	800780c <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7f6 fad1 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4618      	mov	r0, r3
 8010284:	370c      	adds	r7, #12
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801028e:	b580      	push	{r7, lr}
 8010290:	b082      	sub	sp, #8
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 f839 	bl	801030e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801029c:	4603      	mov	r3, r0
 801029e:	4619      	mov	r1, r3
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f000 f815 	bl	80102d0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff ff2d 	bl	8010108 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4618      	mov	r0, r3
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 f830 	bl	8010326 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4618      	mov	r0, r3
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d012      	beq.n	8010306 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 80102e0:	6838      	ldr	r0, [r7, #0]
 80102e2:	f000 f82b 	bl	801033c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80102e6:	4603      	mov	r3, r0
 80102e8:	4619      	mov	r1, r3
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7ff fff0 	bl	80102d0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 80102f0:	6838      	ldr	r0, [r7, #0]
 80102f2:	f000 f82f 	bl	8010354 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80102f6:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 f836 	bl	801036c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8010304:	e7e9      	b.n	80102da <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8010306:	bf00      	nop
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801030e:	b480      	push	{r7}
 8010310:	b083      	sub	sp, #12
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	4618      	mov	r0, r3
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	4618      	mov	r0, r3
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 f816 	bl	80103aa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f827 	bl	80103d4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8010386:	bf00      	nop
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	3310      	adds	r3, #16
 801039a:	4618      	mov	r0, r3
 801039c:	f000 f82c 	bl	80103f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 80103a0:	4603      	mov	r3, r0
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80103aa:	b590      	push	{r4, r7, lr}
 80103ac:	b083      	sub	sp, #12
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 f82b 	bl	8010410 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80103ba:	4604      	mov	r4, r0
 80103bc:	6838      	ldr	r0, [r7, #0]
 80103be:	f7ff ffe6 	bl	801038e <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 80103c2:	4603      	mov	r3, r0
 80103c4:	4619      	mov	r1, r3
 80103c6:	4620      	mov	r0, r4
 80103c8:	f000 f82d 	bl	8010426 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 80103cc:	bf00      	nop
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd90      	pop	{r4, r7, pc}

080103d4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 f816 	bl	8010410 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2201      	movs	r2, #1
 80103e8:	6839      	ldr	r1, [r7, #0]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f000 f827 	bl	801043e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>
 80103f0:	bf00      	nop
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 f83b 	bl	801047c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 8010406:	4603      	mov	r3, r0
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4618      	mov	r0, r3
 801041c:	370c      	adds	r7, #12
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr

08010426 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8010426:	b580      	push	{r7, lr}
 8010428:	b082      	sub	sp, #8
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8010430:	6838      	ldr	r0, [r7, #0]
 8010432:	f000 f82e 	bl	8010492 <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>
	}
 8010436:	bf00      	nop
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801043e:	b580      	push	{r7, lr}
 8010440:	b088      	sub	sp, #32
 8010442:	af00      	add	r7, sp, #0
 8010444:	60f8      	str	r0, [r7, #12]
 8010446:	60b9      	str	r1, [r7, #8]
 8010448:	607a      	str	r2, [r7, #4]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	61fb      	str	r3, [r7, #28]
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	61bb      	str	r3, [r7, #24]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8010456:	f7f5 f8be 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d003      	beq.n	8010468 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8010460:	69b8      	ldr	r0, [r7, #24]
 8010462:	f002 fe79 	bl	8013158 <_ZdlPv>
	    return;
 8010466:	e005      	b.n	8010474 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	69b9      	ldr	r1, [r7, #24]
 801046c:	69f8      	ldr	r0, [r7, #28]
 801046e:	f000 f81a 	bl	80104a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8010472:	bf00      	nop
 8010474:	bf00      	nop
 8010476:	3720      	adds	r7, #32
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4618      	mov	r0, r3
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr

08010492 <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8010492:	b480      	push	{r7}
 8010494:	b083      	sub	sp, #12
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
    }
 801049a:	bf00      	nop
 801049c:	370c      	adds	r7, #12
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr

080104a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b084      	sub	sp, #16
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	60f8      	str	r0, [r7, #12]
 80104ae:	60b9      	str	r1, [r7, #8]
 80104b0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	015b      	lsls	r3, r3, #5
 80104b6:	4619      	mov	r1, r3
 80104b8:	68b8      	ldr	r0, [r7, #8]
 80104ba:	f002 fe4f 	bl	801315c <_ZdlPvj>
      }
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <_Z41__static_initialization_and_destruction_0ii>:
	  	  if (HAL_ADC_ConfigChannel(&adc_handle, &sConfig) != HAL_OK) {
	  		  //TODO: Error handler
	  	  }
	  	  counter++;
	  }
}
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b0c6      	sub	sp, #280	; 0x118
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80104ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80104d2:	6018      	str	r0, [r3, #0]
 80104d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80104d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80104dc:	6019      	str	r1, [r3, #0]
 80104de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80104e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d142      	bne.n	8010572 <_Z41__static_initialization_and_destruction_0ii+0xae>
 80104ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80104f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d139      	bne.n	8010572 <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 80104fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010506:	4a28      	ldr	r2, [pc, #160]	; (80105a8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8010508:	4618      	mov	r0, r3
 801050a:	4611      	mov	r1, r2
 801050c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010510:	461a      	mov	r2, r3
 8010512:	f002 ff83 	bl	801341c <memcpy>
 8010516:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801051a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801051e:	f107 0214 	add.w	r2, r7, #20
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010528:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801052c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010530:	605a      	str	r2, [r3, #4]
 8010532:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8010536:	4618      	mov	r0, r3
 8010538:	f7f6 fdc1 	bl	80070be <_ZNSaIhEC1Ev>
 801053c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8010540:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8010544:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8010548:	ca06      	ldmia	r2, {r1, r2}
 801054a:	4818      	ldr	r0, [pc, #96]	; (80105ac <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 801054c:	f7f6 fdce 	bl	80070ec <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8010550:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8010554:	4618      	mov	r0, r3
 8010556:	f7f6 fdbe 	bl	80070d6 <_ZNSaIhED1Ev>
map<uint8_t, ADC::Instance> ADC::active_instances = {};
 801055a:	4b15      	ldr	r3, [pc, #84]	; (80105b0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801055c:	461a      	mov	r2, r3
 801055e:	2300      	movs	r3, #0
 8010560:	6013      	str	r3, [r2, #0]
 8010562:	6053      	str	r3, [r2, #4]
 8010564:	6093      	str	r3, [r2, #8]
 8010566:	60d3      	str	r3, [r2, #12]
 8010568:	6113      	str	r3, [r2, #16]
 801056a:	6153      	str	r3, [r2, #20]
 801056c:	4810      	ldr	r0, [pc, #64]	; (80105b0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801056e:	f7ff fde4 	bl	801013a <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
 8010572:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d10e      	bne.n	801059e <_Z41__static_initialization_and_destruction_0ii+0xda>
 8010580:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010584:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801058e:	4293      	cmp	r3, r2
 8010590:	d105      	bne.n	801059e <_Z41__static_initialization_and_destruction_0ii+0xda>
 8010592:	4807      	ldr	r0, [pc, #28]	; (80105b0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8010594:	f7ff fdde 	bl	8010154 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8010598:	4804      	ldr	r0, [pc, #16]	; (80105ac <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 801059a:	f7f6 fdd5 	bl	8007148 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 801059e:	bf00      	nop
 80105a0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	08013a70 	.word	0x08013a70
 80105ac:	24000e08 	.word	0x24000e08
 80105b0:	24000e0c 	.word	0x24000e0c

080105b4 <_GLOBAL__sub_I__ZN3ADC10id_managerE>:
 80105b4:	b580      	push	{r7, lr}
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105bc:	2001      	movs	r0, #1
 80105be:	f7ff ff81 	bl	80104c4 <_Z41__static_initialization_and_destruction_0ii>
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <_GLOBAL__sub_D__ZN3ADC10id_managerE>:
 80105c4:	b580      	push	{r7, lr}
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105cc:	2000      	movs	r0, #0
 80105ce:	f7ff ff79 	bl	80104c4 <_Z41__static_initialization_and_destruction_0ii>
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 f880 	bl	80106e2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	4618      	mov	r0, r3
 80105e6:	3708      	adds	r7, #8
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>:
      _Rb_tree() = default;
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f85e 	bl	80106b8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4618      	mov	r0, r3
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>:
      map() = default;
 8010606:	b580      	push	{r7, lr}
 8010608:	b082      	sub	sp, #8
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4618      	mov	r0, r3
 8010612:	f7ff ffeb 	bl	80105ec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>:
      ~map() = default;
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4618      	mov	r0, r3
 801062c:	f000 f864 	bl	80106f8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <_ZN17ExternalInterrupt8InstanceC1E9IRQn_Type>:
#include "EXTI/EXTI.hpp"

forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};

ExternalInterrupt::Instance::Instance(IRQn_Type interrupt_request_number) :
 801063a:	b580      	push	{r7, lr}
 801063c:	b082      	sub	sp, #8
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
 8010642:	460b      	mov	r3, r1
 8010644:	807b      	strh	r3, [r7, #2]
		interrupt_request_number(interrupt_request_number) {}
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	887a      	ldrh	r2, [r7, #2]
 801064a:	801a      	strh	r2, [r3, #0]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	3304      	adds	r3, #4
 8010650:	2100      	movs	r1, #0
 8010652:	4618      	mov	r0, r3
 8010654:	f000 f822 	bl	801069c <_ZNSt8functionIFvvEEC1EDn>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2201      	movs	r2, #1
 801065c:	751a      	strb	r2, [r3, #20]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	4618      	mov	r0, r3
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	4603      	mov	r3, r0
 8010670:	80fb      	strh	r3, [r7, #6]
	ExternalInterrupt::Instance& exti = ExternalInterrupt::instances[GPIO_Pin];
 8010672:	1dbb      	adds	r3, r7, #6
 8010674:	4619      	mov	r1, r3
 8010676:	4808      	ldr	r0, [pc, #32]	; (8010698 <HAL_GPIO_EXTI_Callback+0x30>)
 8010678:	f000 f854 	bl	8010724 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801067c:	60f8      	str	r0, [r7, #12]
	if (exti.is_on) {
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	7d1b      	ldrb	r3, [r3, #20]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d004      	beq.n	8010690 <HAL_GPIO_EXTI_Callback+0x28>
		exti.action();
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	3304      	adds	r3, #4
 801068a:	4618      	mov	r0, r3
 801068c:	f000 f8a6 	bl	80107dc <_ZNKSt8functionIFvvEEclEv>
	}
}
 8010690:	bf00      	nop
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	24000df0 	.word	0x24000df0

0801069c <_ZNSt8functionIFvvEEC1EDn>:
      function(nullptr_t) noexcept
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fa fe97 	bl	800b3dc <_ZNSt14_Function_baseC1Ev>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f000 f93a 	bl	801093a <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7f7 f89f 	bl	800780c <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	3304      	adds	r3, #4
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7f6 f89c 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4618      	mov	r0, r3
 80106dc:	3708      	adds	r7, #8
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80106e2:	b480      	push	{r7}
 80106e4:	b083      	sub	sp, #12
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4618      	mov	r0, r3
 80106ee:	370c      	adds	r7, #12
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr

080106f8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 f945 	bl	8010990 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8010706:	4603      	mov	r3, r0
 8010708:	4619      	mov	r1, r3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 f921 	bl	8010952 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	4618      	mov	r0, r3
 8010714:	f7ff ff5e 	bl	80105d4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
	...

08010724 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b08b      	sub	sp, #44	; 0x2c
 8010728:	af02      	add	r7, sp, #8
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801072e:	6839      	ldr	r1, [r7, #0]
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f000 f939 	bl	80109a8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 8010736:	4603      	mov	r3, r0
 8010738:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 f8c0 	bl	80108c0 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>
 8010740:	4603      	mov	r3, r0
 8010742:	60fb      	str	r3, [r7, #12]
 8010744:	f107 020c 	add.w	r2, r7, #12
 8010748:	f107 0308 	add.w	r3, r7, #8
 801074c:	4611      	mov	r1, r2
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe fc59 	bl	800f006 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d112      	bne.n	8010780 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 f933 	bl	80109c6 <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8010760:	f107 0308 	add.w	r3, r7, #8
 8010764:	4618      	mov	r0, r3
 8010766:	f000 f8b8 	bl	80108da <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 801076a:	4603      	mov	r3, r0
 801076c:	461a      	mov	r2, r3
 801076e:	f107 0310 	add.w	r3, r7, #16
 8010772:	6839      	ldr	r1, [r7, #0]
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe f95a 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d001      	beq.n	8010784 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 8010780:	2301      	movs	r3, #1
 8010782:	e000      	b.n	8010786 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 8010784:	2300      	movs	r3, #0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d01b      	beq.n	80107c2 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801078a:	687c      	ldr	r4, [r7, #4]
 801078c:	f107 0208 	add.w	r2, r7, #8
 8010790:	f107 0314 	add.w	r3, r7, #20
 8010794:	4611      	mov	r1, r2
 8010796:	4618      	mov	r0, r3
 8010798:	f7fc fb45 	bl	800ce26 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 801079c:	f107 0318 	add.w	r3, r7, #24
 80107a0:	6839      	ldr	r1, [r7, #0]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f000 f91c 	bl	80109e0 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80107a8:	f107 0218 	add.w	r2, r7, #24
 80107ac:	f107 031c 	add.w	r3, r7, #28
 80107b0:	9300      	str	r3, [sp, #0]
 80107b2:	4613      	mov	r3, r2
 80107b4:	4a08      	ldr	r2, [pc, #32]	; (80107d8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 80107b6:	6979      	ldr	r1, [r7, #20]
 80107b8:	4620      	mov	r0, r4
 80107ba:	f000 f920 	bl	80109fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 80107be:	4603      	mov	r3, r0
 80107c0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80107c2:	f107 0308 	add.w	r3, r7, #8
 80107c6:	4618      	mov	r0, r3
 80107c8:	f000 f887 	bl	80108da <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 80107cc:	4603      	mov	r3, r0
 80107ce:	3304      	adds	r3, #4
      }
 80107d0:	4618      	mov	r0, r3
 80107d2:	3724      	adds	r7, #36	; 0x24
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd90      	pop	{r4, r7, pc}
 80107d8:	08013e84 	.word	0x08013e84

080107dc <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fa fe19 	bl	800b41e <_ZNKSt14_Function_base8_M_emptyEv>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d001      	beq.n	80107f6 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 80107f2:	f002 fd7f 	bl	80132f4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	4610      	mov	r0, r2
 80107fe:	4798      	blx	r3
 8010800:	bf00      	nop
    }
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>:
      operator[](const key_type& __k)
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b08b      	sub	sp, #44	; 0x2c
 801080c:	af02      	add	r7, sp, #8
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010812:	6839      	ldr	r1, [r7, #0]
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f000 f930 	bl	8010a7a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>
 801081a:	4603      	mov	r3, r0
 801081c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 f93a 	bl	8010a98 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>
 8010824:	4603      	mov	r3, r0
 8010826:	60fb      	str	r3, [r7, #12]
 8010828:	f107 020c 	add.w	r2, r7, #12
 801082c:	f107 0308 	add.w	r3, r7, #8
 8010830:	4611      	mov	r1, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f000 f93d 	bl	8010ab2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d112      	bne.n	8010864 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x5c>
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f000 f94b 	bl	8010ada <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>
 8010844:	f107 0308 	add.w	r3, r7, #8
 8010848:	4618      	mov	r0, r3
 801084a:	f000 f953 	bl	8010af4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 801084e:	4603      	mov	r3, r0
 8010850:	461a      	mov	r2, r3
 8010852:	f107 0310 	add.w	r3, r7, #16
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	4618      	mov	r0, r3
 801085a:	f7f7 f94a 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d001      	beq.n	8010868 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x60>
 8010864:	2301      	movs	r3, #1
 8010866:	e000      	b.n	801086a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x62>
 8010868:	2300      	movs	r3, #0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d01b      	beq.n	80108a6 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801086e:	687c      	ldr	r4, [r7, #4]
 8010870:	f107 0208 	add.w	r2, r7, #8
 8010874:	f107 0314 	add.w	r3, r7, #20
 8010878:	4611      	mov	r1, r2
 801087a:	4618      	mov	r0, r3
 801087c:	f000 f948 	bl	8010b10 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 8010880:	f107 0318 	add.w	r3, r7, #24
 8010884:	6839      	ldr	r1, [r7, #0]
 8010886:	4618      	mov	r0, r3
 8010888:	f7f7 f948 	bl	8007b1c <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801088c:	f107 0218 	add.w	r2, r7, #24
 8010890:	f107 031c 	add.w	r3, r7, #28
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	4613      	mov	r3, r2
 8010898:	4a08      	ldr	r2, [pc, #32]	; (80108bc <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0xb4>)
 801089a:	6979      	ldr	r1, [r7, #20]
 801089c:	4620      	mov	r0, r4
 801089e:	f000 f947 	bl	8010b30 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 80108a2:	4603      	mov	r3, r0
 80108a4:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80108a6:	f107 0308 	add.w	r3, r7, #8
 80108aa:	4618      	mov	r0, r3
 80108ac:	f000 f922 	bl	8010af4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 80108b0:	4603      	mov	r3, r0
 80108b2:	3304      	adds	r3, #4
      }
 80108b4:	4618      	mov	r0, r3
 80108b6:	3724      	adds	r7, #36	; 0x24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd90      	pop	{r4, r7, pc}
 80108bc:	08013e84 	.word	0x08013e84

080108c0 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fc fa9a 	bl	800ce04 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 80108d0:	4603      	mov	r3, r0
 80108d2:	4618      	mov	r0, r3
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80108da:	b580      	push	{r7, lr}
 80108dc:	b082      	sub	sp, #8
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fe f988 	bl	800ebfc <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 80108ec:	4603      	mov	r3, r0
 80108ee:	4618      	mov	r0, r3
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>:
      contains(const key_type& __x) const
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6839      	ldr	r1, [r7, #0]
 8010904:	4618      	mov	r0, r3
 8010906:	f000 f951 	bl	8010bac <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>
 801090a:	4603      	mov	r3, r0
 801090c:	60bb      	str	r3, [r7, #8]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4618      	mov	r0, r3
 8010912:	f000 f987 	bl	8010c24 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 8010916:	4603      	mov	r3, r0
 8010918:	60fb      	str	r3, [r7, #12]
 801091a:	f107 020c 	add.w	r2, r7, #12
 801091e:	f107 0308 	add.w	r3, r7, #8
 8010922:	4611      	mov	r1, r2
 8010924:	4618      	mov	r0, r3
 8010926:	f000 f98e 	bl	8010c46 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 801092a:	4603      	mov	r3, r0
 801092c:	f083 0301 	eor.w	r3, r3, #1
 8010930:	b2db      	uxtb	r3, r3
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801093a:	b580      	push	{r7, lr}
 801093c:	b082      	sub	sp, #8
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 f993 	bl	8010c6e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	4618      	mov	r0, r3
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010952:	b580      	push	{r7, lr}
 8010954:	b084      	sub	sp, #16
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
 801095a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d012      	beq.n	8010988 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 8010962:	6838      	ldr	r0, [r7, #0]
 8010964:	f000 f98e 	bl	8010c84 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010968:	4603      	mov	r3, r0
 801096a:	4619      	mov	r1, r3
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7ff fff0 	bl	8010952 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8010972:	6838      	ldr	r0, [r7, #0]
 8010974:	f000 f992 	bl	8010c9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8010978:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801097a:	6839      	ldr	r1, [r7, #0]
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f000 f999 	bl	8010cb4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8010986:	e7e9      	b.n	801095c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 8010988:	bf00      	nop
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	689b      	ldr	r3, [r3, #8]
 801099c:	4618      	mov	r0, r3
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 f98d 	bl	8010cd6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 80109bc:	4603      	mov	r3, r0
 80109be:	4618      	mov	r0, r3
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 80109c6:	b590      	push	{r4, r7, lr}
 80109c8:	b083      	sub	sp, #12
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4618      	mov	r0, r3
 80109d2:	f000 f997 	bl	8010d04 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 80109d6:	bf00      	nop
 80109d8:	4620      	mov	r0, r4
 80109da:	370c      	adds	r7, #12
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd90      	pop	{r4, r7, pc}

080109e0 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6839      	ldr	r1, [r7, #0]
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 f993 	bl	8010d1a <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	4618      	mov	r0, r3
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80109fe:	b5b0      	push	{r4, r5, r7, lr}
 8010a00:	b088      	sub	sp, #32
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	60f8      	str	r0, [r7, #12]
 8010a06:	60b9      	str	r1, [r7, #8]
 8010a08:	607a      	str	r2, [r7, #4]
 8010a0a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f7f7 fe1e 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010a12:	4604      	mov	r4, r0
 8010a14:	6838      	ldr	r0, [r7, #0]
 8010a16:	f000 f98f 	bl	8010d38 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010a1a:	4605      	mov	r5, r0
 8010a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a1e:	f7f7 fe2c 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a22:	4603      	mov	r3, r0
 8010a24:	462a      	mov	r2, r5
 8010a26:	4621      	mov	r1, r4
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f000 f990 	bl	8010d4e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8010a2e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8010a30:	69f8      	ldr	r0, [r7, #28]
 8010a32:	f7fe fac4 	bl	800efbe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8010a36:	4603      	mov	r3, r0
 8010a38:	f107 0010 	add.w	r0, r7, #16
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	68f9      	ldr	r1, [r7, #12]
 8010a40:	f7fd f995 	bl	800dd6e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d007      	beq.n	8010a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8010a4a:	6939      	ldr	r1, [r7, #16]
 8010a4c:	697a      	ldr	r2, [r7, #20]
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f000 f99f 	bl	8010d94 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8010a56:	4603      	mov	r3, r0
 8010a58:	e00b      	b.n	8010a72 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8010a5a:	69f9      	ldr	r1, [r7, #28]
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f7fc fa3d 	bl	800cedc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8010a62:	693a      	ldr	r2, [r7, #16]
 8010a64:	f107 0318 	add.w	r3, r7, #24
 8010a68:	4611      	mov	r1, r2
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fd f970 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8010a70:	69bb      	ldr	r3, [r7, #24]
      }
 8010a72:	4618      	mov	r0, r3
 8010a74:	3720      	adds	r7, #32
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bdb0      	pop	{r4, r5, r7, pc}

08010a7a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b082      	sub	sp, #8
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6839      	ldr	r1, [r7, #0]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 f9c0 	bl	8010e0e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	4618      	mov	r0, r3
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 f9ca 	bl	8010e3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3708      	adds	r7, #8
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010ab2:	b480      	push	{r7}
 8010ab4:	b083      	sub	sp, #12
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
 8010aba:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	bf0c      	ite	eq
 8010ac8:	2301      	moveq	r3, #1
 8010aca:	2300      	movne	r3, #0
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	4618      	mov	r0, r3
 8010ad0:	370c      	adds	r7, #12
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>:
      key_comp() const
 8010ada:	b590      	push	{r4, r7, lr}
 8010adc:	b083      	sub	sp, #12
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f000 f9ba 	bl	8010e5e <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>
 8010aea:	bf00      	nop
 8010aec:	4620      	mov	r0, r4
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd90      	pop	{r4, r7, pc}

08010af4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4618      	mov	r0, r3
 8010b02:	f000 f9b7 	bl	8010e74 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8010b06:	4603      	mov	r3, r0
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8010b10:	b480      	push	{r7}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	601a      	str	r2, [r3, #0]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4618      	mov	r0, r3
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010b30:	b5b0      	push	{r4, r5, r7, lr}
 8010b32:	b088      	sub	sp, #32
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
 8010b3c:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7f7 fd85 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010b44:	4604      	mov	r4, r0
 8010b46:	6838      	ldr	r0, [r7, #0]
 8010b48:	f7f7 fd8c 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010b4c:	4605      	mov	r5, r0
 8010b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b50:	f7f7 fd93 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010b54:	4603      	mov	r3, r0
 8010b56:	462a      	mov	r2, r5
 8010b58:	4621      	mov	r1, r4
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f000 f998 	bl	8010e90 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8010b60:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8010b62:	69f8      	ldr	r0, [r7, #28]
 8010b64:	f000 fada 	bl	801111c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	f107 0010 	add.w	r0, r7, #16
 8010b6e:	68ba      	ldr	r2, [r7, #8]
 8010b70:	68f9      	ldr	r1, [r7, #12]
 8010b72:	f000 f9b0 	bl	8010ed6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
	    if (__res.second)
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d007      	beq.n	8010b8c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8010b7c:	6939      	ldr	r1, [r7, #16]
 8010b7e:	697a      	ldr	r2, [r7, #20]
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	f000 fadd 	bl	8011142 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	e00b      	b.n	8010ba4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 8010b8c:	69f9      	ldr	r1, [r7, #28]
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f000 f890 	bl	8010cb4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 8010b94:	693a      	ldr	r2, [r7, #16]
 8010b96:	f107 0318 	add.w	r3, r7, #24
 8010b9a:	4611      	mov	r1, r2
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f000 fb0d 	bl	80111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8010ba2:	69bb      	ldr	r3, [r7, #24]
      }
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3720      	adds	r7, #32
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bdb0      	pop	{r4, r5, r7, pc}

08010bac <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010bac:	b590      	push	{r4, r7, lr}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 fb0f 	bl	80111da <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 fb17 	bl	80111f2 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	4621      	mov	r1, r4
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 fb1d 	bl	801120a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 f825 	bl	8010c24 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	60fb      	str	r3, [r7, #12]
 8010bde:	f107 020c 	add.w	r2, r7, #12
 8010be2:	f107 0308 	add.w	r3, r7, #8
 8010be6:	4611      	mov	r1, r2
 8010be8:	4618      	mov	r0, r3
 8010bea:	f000 f82c 	bl	8010c46 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 8010bee:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d10d      	bne.n	8010c10 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8010bf4:	687c      	ldr	r4, [r7, #4]
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f000 fb37 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	461a      	mov	r2, r3
 8010c02:	6839      	ldr	r1, [r7, #0]
 8010c04:	4620      	mov	r0, r4
 8010c06:	f7f6 ff74 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d004      	beq.n	8010c1a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f807 	bl	8010c24 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 8010c16:	4603      	mov	r3, r0
 8010c18:	e000      	b.n	8010c1c <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x70>
 8010c1a:	68bb      	ldr	r3, [r7, #8]
    }
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3714      	adds	r7, #20
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd90      	pop	{r4, r7, pc}

08010c24 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	1d1a      	adds	r2, r3, #4
 8010c30:	f107 030c 	add.w	r3, r7, #12
 8010c34:	4611      	mov	r1, r2
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 fb24 	bl	8011284 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010c46:	b480      	push	{r7}
 8010c48:	b083      	sub	sp, #12
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	bf0c      	ite	eq
 8010c5c:	2301      	moveq	r3, #1
 8010c5e:	2300      	movne	r3, #0
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	4618      	mov	r0, r3
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	4618      	mov	r0, r3
 8010c92:	370c      	adds	r7, #12
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr

08010c9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	370c      	adds	r7, #12
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr

08010cb4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8010cbe:	6839      	ldr	r1, [r7, #0]
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 faee 	bl	80112a2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8010cc6:	6839      	ldr	r1, [r7, #0]
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 faff 	bl	80112cc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8010cce:	bf00      	nop
 8010cd0:	3708      	adds	r7, #8
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8010cd6:	b590      	push	{r4, r7, lr}
 8010cd8:	b083      	sub	sp, #12
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
 8010cde:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7fb fc94 	bl	800c60e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f7fd fe70 	bl	800e9ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	4621      	mov	r1, r4
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 fafb 	bl	80112f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	370c      	adds	r7, #12
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd90      	pop	{r4, r7, pc}

08010d04 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8010d0c:	bf00      	nop
 8010d0e:	4618      	mov	r0, r3
 8010d10:	370c      	adds	r7, #12
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr

08010d1a <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b082      	sub	sp, #8
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
 8010d22:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6839      	ldr	r1, [r7, #0]
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f000 fb12 	bl	8011352 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	4618      	mov	r0, r3
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4618      	mov	r0, r3
 8010d44:	370c      	adds	r7, #12
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8010d4e:	b5b0      	push	{r4, r5, r7, lr}
 8010d50:	b088      	sub	sp, #32
 8010d52:	af02      	add	r7, sp, #8
 8010d54:	60f8      	str	r0, [r7, #12]
 8010d56:	60b9      	str	r1, [r7, #8]
 8010d58:	607a      	str	r2, [r7, #4]
 8010d5a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8010d5c:	68f8      	ldr	r0, [r7, #12]
 8010d5e:	f7fe fb3b 	bl	800f3d8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8010d62:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010d64:	68b8      	ldr	r0, [r7, #8]
 8010d66:	f7f7 fc72 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7ff ffe3 	bl	8010d38 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010d72:	4605      	mov	r5, r0
 8010d74:	6838      	ldr	r0, [r7, #0]
 8010d76:	f7f7 fc80 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	9300      	str	r3, [sp, #0]
 8010d7e:	462b      	mov	r3, r5
 8010d80:	4622      	mov	r2, r4
 8010d82:	6979      	ldr	r1, [r7, #20]
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f000 faf3 	bl	8011370 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8010d8a:	697b      	ldr	r3, [r7, #20]
	}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bdb0      	pop	{r4, r5, r7, pc}

08010d94 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010d94:	b5b0      	push	{r4, r5, r7, lr}
 8010d96:	b086      	sub	sp, #24
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	607a      	str	r2, [r7, #4]
 8010da0:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d117      	bne.n	8010dd8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f7fd fe10 	bl	800e9ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8010dae:	4602      	mov	r2, r0
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d010      	beq.n	8010dd8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8010db6:	68fc      	ldr	r4, [r7, #12]
 8010db8:	6838      	ldr	r0, [r7, #0]
 8010dba:	f7fe f900 	bl	800efbe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7fd fe28 	bl	800ea16 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	461a      	mov	r2, r3
 8010dca:	4629      	mov	r1, r5
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f7fd fe2e 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d001      	beq.n	8010ddc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e000      	b.n	8010dde <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8010ddc:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010dde:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8010de4:	7df8      	ldrb	r0, [r7, #23]
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	6839      	ldr	r1, [r7, #0]
 8010dea:	f002 fa22 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	695b      	ldr	r3, [r3, #20]
 8010df2:	1c5a      	adds	r2, r3, #1
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8010df8:	f107 0310 	add.w	r3, r7, #16
 8010dfc:	6839      	ldr	r1, [r7, #0]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fc ffa6 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8010e04:	693b      	ldr	r3, [r7, #16]
    }
 8010e06:	4618      	mov	r0, r3
 8010e08:	3718      	adds	r7, #24
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bdb0      	pop	{r4, r5, r7, pc}

08010e0e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8010e0e:	b590      	push	{r4, r7, lr}
 8010e10:	b083      	sub	sp, #12
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
 8010e16:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff fdb9 	bl	8010990 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8010e1e:	4604      	mov	r4, r0
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 fad2 	bl	80113ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010e26:	4602      	mov	r2, r0
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fad8 	bl	80113e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>
 8010e32:	4603      	mov	r3, r0
 8010e34:	4618      	mov	r0, r3
 8010e36:	370c      	adds	r7, #12
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd90      	pop	{r4, r7, pc}

08010e3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	1d1a      	adds	r2, r3, #4
 8010e48:	f107 030c 	add.w	r3, r7, #12
 8010e4c:	4611      	mov	r1, r2
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f000 f9b4 	bl	80111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>:
      key_comp() const
 8010e5e:	b480      	push	{r7}
 8010e60:	b083      	sub	sp, #12
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8010e66:	bf00      	nop
 8010e68:	4618      	mov	r0, r3
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr()
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	3310      	adds	r3, #16
 8010e80:	4618      	mov	r0, r3
 8010e82:	f000 fadf 	bl	8011444 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 8010e86:	4603      	mov	r3, r0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8010e90:	b5b0      	push	{r4, r5, r7, lr}
 8010e92:	b088      	sub	sp, #32
 8010e94:	af02      	add	r7, sp, #8
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	607a      	str	r2, [r7, #4]
 8010e9c:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	f000 fadc 	bl	801145c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>
 8010ea4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010ea6:	68b8      	ldr	r0, [r7, #8]
 8010ea8:	f7f7 fbd1 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010eac:	4604      	mov	r4, r0
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7f7 fbd8 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010eb4:	4605      	mov	r5, r0
 8010eb6:	6838      	ldr	r0, [r7, #0]
 8010eb8:	f7f7 fbdf 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	462b      	mov	r3, r5
 8010ec2:	4622      	mov	r2, r4
 8010ec4:	6979      	ldr	r1, [r7, #20]
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f000 fad9 	bl	801147e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8010ecc:	697b      	ldr	r3, [r7, #20]
	}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3718      	adds	r7, #24
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bdb0      	pop	{r4, r5, r7, pc}

08010ed6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010ed6:	b590      	push	{r4, r7, lr}
 8010ed8:	b08d      	sub	sp, #52	; 0x34
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	60f8      	str	r0, [r7, #12]
 8010ede:	60b9      	str	r1, [r7, #8]
 8010ee0:	607a      	str	r2, [r7, #4]
 8010ee2:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8010ee4:	1d3b      	adds	r3, r7, #4
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 faf6 	bl	80114d8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>
 8010eec:	4603      	mov	r3, r0
 8010eee:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8010ef0:	69bc      	ldr	r4, [r7, #24]
 8010ef2:	68b8      	ldr	r0, [r7, #8]
 8010ef4:	f000 fa69 	bl	80113ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	429c      	cmp	r4, r3
 8010efc:	bf0c      	ite	eq
 8010efe:	2301      	moveq	r3, #1
 8010f00:	2300      	movne	r3, #0
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d030      	beq.n	8010f6a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8010f08:	68b8      	ldr	r0, [r7, #8]
 8010f0a:	f000 faf6 	bl	80114fa <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>
 8010f0e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d013      	beq.n	8010f3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8010f14:	68bc      	ldr	r4, [r7, #8]
 8010f16:	68b8      	ldr	r0, [r7, #8]
 8010f18:	f000 fafb 	bl	8011512 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f000 f9a3 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010f26:	4603      	mov	r3, r0
 8010f28:	683a      	ldr	r2, [r7, #0]
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f7f6 fde0 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8010f32:	4603      	mov	r3, r0
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d001      	beq.n	8010f3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8010f38:	2301      	movs	r3, #1
 8010f3a:	e000      	b.n	8010f3e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8010f3c:	2300      	movs	r3, #0
	  if (size() > 0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d00c      	beq.n	8010f5c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8010f42:	2300      	movs	r3, #0
 8010f44:	61fb      	str	r3, [r7, #28]
 8010f46:	68b8      	ldr	r0, [r7, #8]
 8010f48:	f000 fae3 	bl	8011512 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	f107 031c 	add.w	r3, r7, #28
 8010f52:	4619      	mov	r1, r3
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f7f8 fc8c 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010f5a:	e0db      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	683a      	ldr	r2, [r7, #0]
 8010f60:	68b9      	ldr	r1, [r7, #8]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f000 fae1 	bl	801152a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8010f68:	e0d4      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8010f6a:	68bc      	ldr	r4, [r7, #8]
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 f97c 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010f74:	4603      	mov	r3, r0
 8010f76:	461a      	mov	r2, r3
 8010f78:	6839      	ldr	r1, [r7, #0]
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f7f6 fdb9 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d057      	beq.n	8011036 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8010f8a:	69bc      	ldr	r4, [r7, #24]
 8010f8c:	68b8      	ldr	r0, [r7, #8]
 8010f8e:	f000 fb51 	bl	8011634 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010f92:	4603      	mov	r3, r0
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	429c      	cmp	r4, r3
 8010f98:	bf0c      	ite	eq
 8010f9a:	2301      	moveq	r3, #1
 8010f9c:	2300      	movne	r3, #0
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d00d      	beq.n	8010fc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8010fa4:	68b8      	ldr	r0, [r7, #8]
 8010fa6:	f000 fb45 	bl	8011634 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010faa:	4604      	mov	r4, r0
 8010fac:	68b8      	ldr	r0, [r7, #8]
 8010fae:	f000 fb41 	bl	8011634 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f7f8 fd01 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010fbe:	e0a9      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8010fc0:	68bc      	ldr	r4, [r7, #8]
 8010fc2:	f107 0314 	add.w	r3, r7, #20
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f000 fb40 	bl	801164c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f000 f94b 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	4619      	mov	r1, r3
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f7f6 fd88 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d01f      	beq.n	8011028 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ff fe4a 	bl	8010c84 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	bf0c      	ite	eq
 8010ff6:	2301      	moveq	r3, #1
 8010ff8:	2300      	movne	r3, #0
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00a      	beq.n	8011016 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8011000:	2300      	movs	r3, #0
 8011002:	623b      	str	r3, [r7, #32]
 8011004:	f107 0214 	add.w	r2, r7, #20
 8011008:	f107 0320 	add.w	r3, r7, #32
 801100c:	4619      	mov	r1, r3
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f7f8 fc2f 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011014:	e07e      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8011016:	f107 0218 	add.w	r2, r7, #24
 801101a:	f107 0318 	add.w	r3, r7, #24
 801101e:	4619      	mov	r1, r3
 8011020:	68f8      	ldr	r0, [r7, #12]
 8011022:	f7f8 fccd 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011026:	e075      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	683a      	ldr	r2, [r7, #0]
 801102c:	68b9      	ldr	r1, [r7, #8]
 801102e:	4618      	mov	r0, r3
 8011030:	f000 fa7b 	bl	801152a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8011034:	e06e      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8011036:	68bc      	ldr	r4, [r7, #8]
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	4618      	mov	r0, r3
 801103c:	f000 f916 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011040:	4603      	mov	r3, r0
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	4619      	mov	r1, r3
 8011046:	4620      	mov	r0, r4
 8011048:	f7f6 fd53 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d056      	beq.n	8011100 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8011056:	69bc      	ldr	r4, [r7, #24]
 8011058:	68b8      	ldr	r0, [r7, #8]
 801105a:	f000 fa5a 	bl	8011512 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801105e:	4603      	mov	r3, r0
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	429c      	cmp	r4, r3
 8011064:	bf0c      	ite	eq
 8011066:	2301      	moveq	r3, #1
 8011068:	2300      	movne	r3, #0
 801106a:	b2db      	uxtb	r3, r3
 801106c:	2b00      	cmp	r3, #0
 801106e:	d00c      	beq.n	801108a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8011070:	2300      	movs	r3, #0
 8011072:	627b      	str	r3, [r7, #36]	; 0x24
 8011074:	68b8      	ldr	r0, [r7, #8]
 8011076:	f000 fa4c 	bl	8011512 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801107a:	4602      	mov	r2, r0
 801107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011080:	4619      	mov	r1, r3
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f7f8 fbf5 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011088:	e044      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801108a:	68bc      	ldr	r4, [r7, #8]
 801108c:	f107 0310 	add.w	r3, r7, #16
 8011090:	4618      	mov	r0, r3
 8011092:	f000 faec 	bl	801166e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>
 8011096:	4603      	mov	r3, r0
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4618      	mov	r0, r3
 801109c:	f000 f8e6 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80110a0:	4603      	mov	r3, r0
 80110a2:	461a      	mov	r2, r3
 80110a4:	6839      	ldr	r1, [r7, #0]
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7f6 fd23 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d01f      	beq.n	80110f2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff fde5 	bl	8010c84 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	bf0c      	ite	eq
 80110c0:	2301      	moveq	r3, #1
 80110c2:	2300      	movne	r3, #0
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00a      	beq.n	80110e0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 80110ca:	2300      	movs	r3, #0
 80110cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80110ce:	f107 0218 	add.w	r2, r7, #24
 80110d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110d6:	4619      	mov	r1, r3
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	f7f8 fbca 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80110de:	e019      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80110e0:	f107 0210 	add.w	r2, r7, #16
 80110e4:	f107 0310 	add.w	r3, r7, #16
 80110e8:	4619      	mov	r1, r3
 80110ea:	68f8      	ldr	r0, [r7, #12]
 80110ec:	f7f8 fc68 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80110f0:	e010      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	683a      	ldr	r2, [r7, #0]
 80110f6:	68b9      	ldr	r1, [r7, #8]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f000 fa16 	bl	801152a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 80110fe:	e009      	b.n	8011114 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8011100:	2300      	movs	r3, #0
 8011102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011104:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011108:	f107 0318 	add.w	r3, r7, #24
 801110c:	4619      	mov	r1, r3
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f7f8 fc91 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	3734      	adds	r7, #52	; 0x34
 8011118:	46bd      	mov	sp, r7
 801111a:	bd90      	pop	{r4, r7, pc}

0801111c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 fab3 	bl	8011690 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 801112a:	4602      	mov	r2, r0
 801112c:	f107 030c 	add.w	r3, r7, #12
 8011130:	4611      	mov	r1, r2
 8011132:	4618      	mov	r0, r3
 8011134:	f000 faba 	bl	80116ac <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>
 8011138:	4603      	mov	r3, r0
      }
 801113a:	4618      	mov	r0, r3
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011142:	b5b0      	push	{r4, r5, r7, lr}
 8011144:	b086      	sub	sp, #24
 8011146:	af00      	add	r7, sp, #0
 8011148:	60f8      	str	r0, [r7, #12]
 801114a:	60b9      	str	r1, [r7, #8]
 801114c:	607a      	str	r2, [r7, #4]
 801114e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d117      	bne.n	8011186 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011156:	68f8      	ldr	r0, [r7, #12]
 8011158:	f000 f937 	bl	80113ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801115c:	4602      	mov	r2, r0
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4293      	cmp	r3, r2
 8011162:	d010      	beq.n	8011186 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8011164:	68fc      	ldr	r4, [r7, #12]
 8011166:	6838      	ldr	r0, [r7, #0]
 8011168:	f7ff ffd8 	bl	801111c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801116c:	4605      	mov	r5, r0
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f000 f87c 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011174:	4603      	mov	r3, r0
 8011176:	461a      	mov	r2, r3
 8011178:	4629      	mov	r1, r5
 801117a:	4620      	mov	r0, r4
 801117c:	f7f6 fcb9 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d001      	beq.n	801118a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8011186:	2301      	movs	r3, #1
 8011188:	e000      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 801118a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801118c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8011192:	7df8      	ldrb	r0, [r7, #23]
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	6839      	ldr	r1, [r7, #0]
 8011198:	f002 f84b 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	695b      	ldr	r3, [r3, #20]
 80111a0:	1c5a      	adds	r2, r3, #1
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80111a6:	f107 0310 	add.w	r3, r7, #16
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	4618      	mov	r0, r3
 80111ae:	f000 f805 	bl	80111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 80111b2:	693b      	ldr	r3, [r7, #16]
    }
 80111b4:	4618      	mov	r0, r3
 80111b6:	3718      	adds	r7, #24
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bdb0      	pop	{r4, r5, r7, pc}

080111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	601a      	str	r2, [r3, #0]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4618      	mov	r0, r3
 80111d0:	370c      	adds	r7, #12
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr

080111da <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80111da:	b480      	push	{r7}
 80111dc:	b083      	sub	sp, #12
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	689b      	ldr	r3, [r3, #8]
      }
 80111e6:	4618      	mov	r0, r3
 80111e8:	370c      	adds	r7, #12
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr

080111f2 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80111f2:	b480      	push	{r7}
 80111f4:	b083      	sub	sp, #12
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	3304      	adds	r3, #4
 80111fe:	4618      	mov	r0, r3
 8011200:	370c      	adds	r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr

0801120a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801120a:	b590      	push	{r4, r7, lr}
 801120c:	b087      	sub	sp, #28
 801120e:	af00      	add	r7, sp, #0
 8011210:	60f8      	str	r0, [r7, #12]
 8011212:	60b9      	str	r1, [r7, #8]
 8011214:	607a      	str	r2, [r7, #4]
 8011216:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d01b      	beq.n	8011256 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801121e:	68fc      	ldr	r4, [r7, #12]
 8011220:	68b8      	ldr	r0, [r7, #8]
 8011222:	f7ff ff7b 	bl	801111c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8011226:	4603      	mov	r3, r0
 8011228:	683a      	ldr	r2, [r7, #0]
 801122a:	4619      	mov	r1, r3
 801122c:	4620      	mov	r0, r4
 801122e:	f7f6 fc60 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8011232:	4603      	mov	r3, r0
 8011234:	f083 0301 	eor.w	r3, r3, #1
 8011238:	b2db      	uxtb	r3, r3
 801123a:	2b00      	cmp	r3, #0
 801123c:	d006      	beq.n	801124c <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	607b      	str	r3, [r7, #4]
 8011242:	68b8      	ldr	r0, [r7, #8]
 8011244:	f000 fa3e 	bl	80116c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011248:	60b8      	str	r0, [r7, #8]
 801124a:	e7e5      	b.n	8011218 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801124c:	68b8      	ldr	r0, [r7, #8]
 801124e:	f000 fa45 	bl	80116dc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011252:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011254:	e7e0      	b.n	8011218 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8011256:	f107 0314 	add.w	r3, r7, #20
 801125a:	6879      	ldr	r1, [r7, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	f000 f811 	bl	8011284 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 8011262:	697b      	ldr	r3, [r7, #20]
    }
 8011264:	4618      	mov	r0, r3
 8011266:	371c      	adds	r7, #28
 8011268:	46bd      	mov	sp, r7
 801126a:	bd90      	pop	{r4, r7, pc}

0801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff ff51 	bl	801111c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801127a:	4603      	mov	r3, r0
 801127c:	4618      	mov	r0, r3
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	683a      	ldr	r2, [r7, #0]
 8011292:	601a      	str	r2, [r3, #0]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4618      	mov	r0, r3
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80112a2:	b590      	push	{r4, r7, lr}
 80112a4:	b083      	sub	sp, #12
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	6078      	str	r0, [r7, #4]
 80112aa:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 fa21 	bl	80116f4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 80112b2:	4604      	mov	r4, r0
 80112b4:	6838      	ldr	r0, [r7, #0]
 80112b6:	f7ff fddd 	bl	8010e74 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 80112ba:	4603      	mov	r3, r0
 80112bc:	4619      	mov	r1, r3
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 fa23 	bl	801170a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>
      }
 80112c4:	bf00      	nop
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd90      	pop	{r4, r7, pc}

080112cc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 fa0c 	bl	80116f4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 80112dc:	4603      	mov	r3, r0
 80112de:	2201      	movs	r2, #1
 80112e0:	6839      	ldr	r1, [r7, #0]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f000 fa1d 	bl	8011722 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>
 80112e8:	bf00      	nop
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b087      	sub	sp, #28
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
 80112fc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d01b      	beq.n	801133c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011304:	68fc      	ldr	r4, [r7, #12]
 8011306:	68b8      	ldr	r0, [r7, #8]
 8011308:	f7fd fe59 	bl	800efbe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801130c:	4603      	mov	r3, r0
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	4619      	mov	r1, r3
 8011312:	4620      	mov	r0, r4
 8011314:	f7fd fb8b 	bl	800ea2e <_ZNKSt4lessItEclERKtS2_>
 8011318:	4603      	mov	r3, r0
 801131a:	f083 0301 	eor.w	r3, r3, #1
 801131e:	b2db      	uxtb	r3, r3
 8011320:	2b00      	cmp	r3, #0
 8011322:	d006      	beq.n	8011332 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	607b      	str	r3, [r7, #4]
 8011328:	68b8      	ldr	r0, [r7, #8]
 801132a:	f7fb fdcb 	bl	800cec4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801132e:	60b8      	str	r0, [r7, #8]
 8011330:	e7e5      	b.n	80112fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8011332:	68b8      	ldr	r0, [r7, #8]
 8011334:	f7fb fdba 	bl	800ceac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011338:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801133a:	e7e0      	b.n	80112fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801133c:	f107 0314 	add.w	r3, r7, #20
 8011340:	6879      	ldr	r1, [r7, #4]
 8011342:	4618      	mov	r0, r3
 8011344:	f7fc fd04 	bl	800dd50 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8011348:	697b      	ldr	r3, [r7, #20]
    }
 801134a:	4618      	mov	r0, r3
 801134c:	371c      	adds	r7, #28
 801134e:	46bd      	mov	sp, r7
 8011350:	bd90      	pop	{r4, r7, pc}

08011352 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8011352:	b480      	push	{r7}
 8011354:	b083      	sub	sp, #12
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	601a      	str	r2, [r3, #0]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	4618      	mov	r0, r3
 8011366:	370c      	adds	r7, #12
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr

08011370 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8011370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011374:	b086      	sub	sp, #24
 8011376:	af02      	add	r7, sp, #8
 8011378:	60f8      	str	r0, [r7, #12]
 801137a:	60b9      	str	r1, [r7, #8]
 801137c:	607a      	str	r2, [r7, #4]
 801137e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	4619      	mov	r1, r3
 8011384:	202c      	movs	r0, #44	; 0x2c
 8011386:	f7f4 f92e 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7fd fc2b 	bl	800ebe6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8011390:	4604      	mov	r4, r0
 8011392:	68b8      	ldr	r0, [r7, #8]
 8011394:	f7fd fc32 	bl	800ebfc <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8011398:	4605      	mov	r5, r0
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7f7 f957 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80113a0:	4606      	mov	r6, r0
 80113a2:	6838      	ldr	r0, [r7, #0]
 80113a4:	f7ff fcc8 	bl	8010d38 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80113a8:	4680      	mov	r8, r0
 80113aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113ac:	f7f7 f965 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80113b0:	4603      	mov	r3, r0
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	4643      	mov	r3, r8
 80113b6:	4632      	mov	r2, r6
 80113b8:	4629      	mov	r1, r5
 80113ba:	4620      	mov	r0, r4
 80113bc:	f000 fa0a 	bl	80117d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 80113c0:	bf00      	nop
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80113ca:	b480      	push	{r7}
 80113cc:	b083      	sub	sp, #12
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	3304      	adds	r3, #4
 80113d6:	4618      	mov	r0, r3
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr

080113e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80113e2:	b590      	push	{r4, r7, lr}
 80113e4:	b087      	sub	sp, #28
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	60f8      	str	r0, [r7, #12]
 80113ea:	60b9      	str	r1, [r7, #8]
 80113ec:	607a      	str	r2, [r7, #4]
 80113ee:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d01b      	beq.n	801142e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80113f6:	68fc      	ldr	r4, [r7, #12]
 80113f8:	68b8      	ldr	r0, [r7, #8]
 80113fa:	f7ff fe8f 	bl	801111c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80113fe:	4603      	mov	r3, r0
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	4619      	mov	r1, r3
 8011404:	4620      	mov	r0, r4
 8011406:	f7f6 fb74 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 801140a:	4603      	mov	r3, r0
 801140c:	f083 0301 	eor.w	r3, r3, #1
 8011410:	b2db      	uxtb	r3, r3
 8011412:	2b00      	cmp	r3, #0
 8011414:	d006      	beq.n	8011424 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	607b      	str	r3, [r7, #4]
 801141a:	68b8      	ldr	r0, [r7, #8]
 801141c:	f7ff fc3e 	bl	8010c9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8011420:	60b8      	str	r0, [r7, #8]
 8011422:	e7e5      	b.n	80113f0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8011424:	68b8      	ldr	r0, [r7, #8]
 8011426:	f7ff fc2d 	bl	8010c84 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801142a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801142c:	e7e0      	b.n	80113f0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801142e:	f107 0314 	add.w	r3, r7, #20
 8011432:	6879      	ldr	r1, [r7, #4]
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff fec1 	bl	80111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801143a:	697b      	ldr	r3, [r7, #20]
    }
 801143c:	4618      	mov	r0, r3
 801143e:	371c      	adds	r7, #28
 8011440:	46bd      	mov	sp, r7
 8011442:	bd90      	pop	{r4, r7, pc}

08011444 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() noexcept
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f000 f9dd 	bl	801180c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 8011452:	4603      	mov	r3, r0
 8011454:	4618      	mov	r0, r3
 8011456:	3708      	adds	r7, #8
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 f945 	bl	80116f4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801146a:	4603      	mov	r3, r0
 801146c:	2101      	movs	r1, #1
 801146e:	4618      	mov	r0, r3
 8011470:	f000 f9d7 	bl	8011822 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>
 8011474:	4603      	mov	r3, r0
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801147e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af02      	add	r7, sp, #8
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]
 801148c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	4619      	mov	r1, r3
 8011492:	201c      	movs	r0, #28
 8011494:	f7f4 f8a7 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f000 f92b 	bl	80116f4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801149e:	4604      	mov	r4, r0
 80114a0:	68b8      	ldr	r0, [r7, #8]
 80114a2:	f7ff fce7 	bl	8010e74 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 80114a6:	4605      	mov	r5, r0
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7f7 f8d0 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80114ae:	4606      	mov	r6, r0
 80114b0:	6838      	ldr	r0, [r7, #0]
 80114b2:	f7f7 f8d7 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80114b6:	4680      	mov	r8, r0
 80114b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114ba:	f7f7 f8de 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80114be:	4603      	mov	r3, r0
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	4643      	mov	r3, r8
 80114c4:	4632      	mov	r2, r6
 80114c6:	4629      	mov	r1, r5
 80114c8:	4620      	mov	r0, r4
 80114ca:	f000 f9f7 	bl	80118bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 80114ce:	bf00      	nop
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114d8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	f107 030c 	add.w	r3, r7, #12
 80114e8:	4611      	mov	r1, r2
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7ff fe66 	bl	80111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80114fa:	b480      	push	{r7}
 80114fc:	b083      	sub	sp, #12
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	695b      	ldr	r3, [r3, #20]
 8011506:	4618      	mov	r0, r3
 8011508:	370c      	adds	r7, #12
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr

08011512 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8011512:	b480      	push	{r7}
 8011514:	b083      	sub	sp, #12
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	3310      	adds	r3, #16
 801151e:	4618      	mov	r0, r3
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801152a:	b590      	push	{r4, r7, lr}
 801152c:	b08b      	sub	sp, #44	; 0x2c
 801152e:	af00      	add	r7, sp, #0
 8011530:	60f8      	str	r0, [r7, #12]
 8011532:	60b9      	str	r1, [r7, #8]
 8011534:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8011536:	68b8      	ldr	r0, [r7, #8]
 8011538:	f7ff fa2a 	bl	8010990 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801153c:	4603      	mov	r3, r0
 801153e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8011540:	68b8      	ldr	r0, [r7, #8]
 8011542:	f7ff ff42 	bl	80113ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8011546:	4603      	mov	r3, r0
 8011548:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801154a:	2301      	movs	r3, #1
 801154c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d020      	beq.n	8011598 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801155a:	68bc      	ldr	r4, [r7, #8]
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	4618      	mov	r0, r3
 8011560:	f7ff fddc 	bl	801111c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8011564:	4603      	mov	r3, r0
 8011566:	461a      	mov	r2, r3
 8011568:	6879      	ldr	r1, [r7, #4]
 801156a:	4620      	mov	r0, r4
 801156c:	f7f6 fac1 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8011570:	4603      	mov	r3, r0
 8011572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8011576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801157a:	2b00      	cmp	r3, #0
 801157c:	d005      	beq.n	801158a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fb8b 	bl	8010c9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8011586:	4603      	mov	r3, r0
 8011588:	e004      	b.n	8011594 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	4618      	mov	r0, r3
 801158e:	f7ff fb79 	bl	8010c84 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011592:	4603      	mov	r3, r0
 8011594:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8011596:	e7db      	b.n	8011550 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8011598:	697a      	ldr	r2, [r7, #20]
 801159a:	f107 0310 	add.w	r3, r7, #16
 801159e:	4611      	mov	r1, r2
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7ff fe0b 	bl	80111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80115a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d01d      	beq.n	80115ea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 80115ae:	68b8      	ldr	r0, [r7, #8]
 80115b0:	f000 f9a0 	bl	80118f4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>
 80115b4:	4603      	mov	r3, r0
 80115b6:	61fb      	str	r3, [r7, #28]
 80115b8:	f107 021c 	add.w	r2, r7, #28
 80115bc:	f107 0310 	add.w	r3, r7, #16
 80115c0:	4611      	mov	r1, r2
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7ff fa75 	bl	8010ab2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d008      	beq.n	80115e0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 80115ce:	f107 0214 	add.w	r2, r7, #20
 80115d2:	f107 0318 	add.w	r3, r7, #24
 80115d6:	4619      	mov	r1, r3
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f000 f99c 	bl	8011916 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 80115de:	e025      	b.n	801162c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80115e0:	f107 0310 	add.w	r3, r7, #16
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 f831 	bl	801164c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80115ea:	68bc      	ldr	r4, [r7, #8]
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7ff fe3c 	bl	801126c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80115f4:	4603      	mov	r3, r0
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	4619      	mov	r1, r3
 80115fa:	4620      	mov	r0, r4
 80115fc:	f7f6 fa79 	bl	8007af2 <_ZNKSt4lessIhEclERKhS2_>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d008      	beq.n	8011618 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8011606:	f107 0214 	add.w	r2, r7, #20
 801160a:	f107 0318 	add.w	r3, r7, #24
 801160e:	4619      	mov	r1, r3
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f000 f980 	bl	8011916 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 8011616:	e009      	b.n	801162c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8011618:	2300      	movs	r3, #0
 801161a:	623b      	str	r3, [r7, #32]
 801161c:	f107 0220 	add.w	r2, r7, #32
 8011620:	f107 0310 	add.w	r3, r7, #16
 8011624:	4619      	mov	r1, r3
 8011626:	68f8      	ldr	r0, [r7, #12]
 8011628:	f7f8 fa05 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	372c      	adds	r7, #44	; 0x2c
 8011630:	46bd      	mov	sp, r7
 8011632:	bd90      	pop	{r4, r7, pc}

08011634 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	330c      	adds	r3, #12
 8011640:	4618      	mov	r0, r3
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr

0801164c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4618      	mov	r0, r3
 801165a:	f001 fde8 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801165e:	4602      	mov	r2, r0
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	601a      	str	r2, [r3, #0]
	return *this;
 8011664:	687b      	ldr	r3, [r7, #4]
      }
 8011666:	4618      	mov	r0, r3
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801166e:	b580      	push	{r7, lr}
 8011670:	b082      	sub	sp, #8
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4618      	mov	r0, r3
 801167c:	f001 fdd5 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8011680:	4602      	mov	r2, r0
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	601a      	str	r2, [r3, #0]
	return *this;
 8011686:	687b      	ldr	r3, [r7, #4]
      }
 8011688:	4618      	mov	r0, r3
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr() const
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3310      	adds	r3, #16
 801169c:	4618      	mov	r0, r3
 801169e:	f000 f953 	bl	8011948 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 80116a2:	4603      	mov	r3, r0
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>:
      operator()(const _Pair& __x) const
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	4618      	mov	r0, r3
 80116ba:	370c      	adds	r7, #12
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr

080116c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80116c4:	b480      	push	{r7}
 80116c6:	b083      	sub	sp, #12
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	689b      	ldr	r3, [r3, #8]
 80116d0:	4618      	mov	r0, r3
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr

080116dc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80116dc:	b480      	push	{r7}
 80116de:	b083      	sub	sp, #12
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	4618      	mov	r0, r3
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr

080116f4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	4618      	mov	r0, r3
 8011700:	370c      	adds	r7, #12
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr

0801170a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801170a:	b580      	push	{r7, lr}
 801170c:	b082      	sub	sp, #8
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
 8011712:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8011714:	6838      	ldr	r0, [r7, #0]
 8011716:	f000 f923 	bl	8011960 <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>
	}
 801171a:	bf00      	nop
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011722:	b580      	push	{r7, lr}
 8011724:	b088      	sub	sp, #32
 8011726:	af00      	add	r7, sp, #0
 8011728:	60f8      	str	r0, [r7, #12]
 801172a:	60b9      	str	r1, [r7, #8]
 801172c:	607a      	str	r2, [r7, #4]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	61fb      	str	r3, [r7, #28]
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	61bb      	str	r3, [r7, #24]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801173a:	f7f3 ff4c 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d003      	beq.n	801174c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 8011744:	69b8      	ldr	r0, [r7, #24]
 8011746:	f001 fd07 	bl	8013158 <_ZdlPv>
	    return;
 801174a:	e005      	b.n	8011758 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801174c:	697a      	ldr	r2, [r7, #20]
 801174e:	69b9      	ldr	r1, [r7, #24]
 8011750:	69f8      	ldr	r0, [r7, #28]
 8011752:	f000 f9b7 	bl	8011ac4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 8011756:	bf00      	nop
 8011758:	bf00      	nop
 801175a:	3720      	adds	r7, #32
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	4611      	mov	r1, r2
 8011770:	4618      	mov	r0, r3
 8011772:	f000 f8ff 	bl	8011974 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	4618      	mov	r0, r3
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011780:	b5b0      	push	{r4, r5, r7, lr}
 8011782:	b088      	sub	sp, #32
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
 801178c:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801178e:	68b8      	ldr	r0, [r7, #8]
 8011790:	f7f6 ff5d 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7ff facf 	bl	8010d38 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801179a:	4602      	mov	r2, r0
 801179c:	f107 0318 	add.w	r3, r7, #24
 80117a0:	4611      	mov	r1, r2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7ff ffdc 	bl	8011760 <_ZNSt5tupleIJRKtEEC1EOS2_>
 80117a8:	f107 0418 	add.w	r4, r7, #24
 80117ac:	6838      	ldr	r0, [r7, #0]
 80117ae:	f7f6 ff64 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	4619      	mov	r1, r3
 80117b6:	201c      	movs	r0, #28
 80117b8:	f7f3 ff15 	bl	80055e6 <_ZnwjPv>
 80117bc:	4605      	mov	r5, r0
 80117be:	7f3b      	ldrb	r3, [r7, #28]
 80117c0:	4622      	mov	r2, r4
 80117c2:	7d39      	ldrb	r1, [r7, #20]
 80117c4:	4628      	mov	r0, r5
 80117c6:	f000 f923 	bl	8011a10 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80117ca:	462b      	mov	r3, r5
 80117cc:	4618      	mov	r0, r3
 80117ce:	3720      	adds	r7, #32
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bdb0      	pop	{r4, r5, r7, pc}

080117d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80117d4:	b5b0      	push	{r4, r5, r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]
 80117e0:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7f6 ff33 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80117e8:	4604      	mov	r4, r0
 80117ea:	6838      	ldr	r0, [r7, #0]
 80117ec:	f7ff faa4 	bl	8010d38 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80117f0:	4605      	mov	r5, r0
 80117f2:	6a38      	ldr	r0, [r7, #32]
 80117f4:	f7f6 ff41 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80117f8:	4603      	mov	r3, r0
 80117fa:	462a      	mov	r2, r5
 80117fc:	4621      	mov	r1, r4
 80117fe:	68b8      	ldr	r0, [r7, #8]
 8011800:	f7ff ffbe 	bl	8011780 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8011804:	bf00      	nop
 8011806:	3710      	adds	r7, #16
 8011808:	46bd      	mov	sp, r7
 801180a:	bdb0      	pop	{r4, r5, r7, pc}

0801180c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() noexcept
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4618      	mov	r0, r3
 8011818:	370c      	adds	r7, #12
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr

08011822 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8011822:	b580      	push	{r7, lr}
 8011824:	b084      	sub	sp, #16
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	6039      	str	r1, [r7, #0]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	60fb      	str	r3, [r7, #12]
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8011834:	f7f3 fecf 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d009      	beq.n	8011852 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801183e:	68ba      	ldr	r2, [r7, #8]
 8011840:	4613      	mov	r3, r2
 8011842:	00db      	lsls	r3, r3, #3
 8011844:	1a9b      	subs	r3, r3, r2
 8011846:	009b      	lsls	r3, r3, #2
 8011848:	4618      	mov	r0, r3
 801184a:	f001 fc89 	bl	8013160 <_Znwj>
 801184e:	4603      	mov	r3, r0
 8011850:	e006      	b.n	8011860 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8011852:	2200      	movs	r2, #0
 8011854:	68b9      	ldr	r1, [r7, #8]
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f000 f96b 	bl	8011b32 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>
 801185c:	4603      	mov	r3, r0
 801185e:	bf00      	nop
      { return __a.allocate(__n); }
 8011860:	4618      	mov	r0, r3
 8011862:	3710      	adds	r7, #16
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011868:	b5b0      	push	{r4, r5, r7, lr}
 801186a:	b088      	sub	sp, #32
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	607a      	str	r2, [r7, #4]
 8011874:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011876:	68b8      	ldr	r0, [r7, #8]
 8011878:	f7f6 fee9 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7f6 fef1 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011882:	4602      	mov	r2, r0
 8011884:	f107 0318 	add.w	r3, r7, #24
 8011888:	4611      	mov	r1, r2
 801188a:	4618      	mov	r0, r3
 801188c:	f7f8 fdb3 	bl	800a3f6 <_ZNSt5tupleIJRKhEEC1EOS2_>
 8011890:	f107 0418 	add.w	r4, r7, #24
 8011894:	6838      	ldr	r0, [r7, #0]
 8011896:	f7f6 fef0 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	4619      	mov	r1, r3
 801189e:	200c      	movs	r0, #12
 80118a0:	f7f3 fea1 	bl	80055e6 <_ZnwjPv>
 80118a4:	4605      	mov	r5, r0
 80118a6:	7f3b      	ldrb	r3, [r7, #28]
 80118a8:	4622      	mov	r2, r4
 80118aa:	7d39      	ldrb	r1, [r7, #20]
 80118ac:	4628      	mov	r0, r5
 80118ae:	f000 f8df 	bl	8011a70 <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 80118b2:	462b      	mov	r3, r5
 80118b4:	4618      	mov	r0, r3
 80118b6:	3720      	adds	r7, #32
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bdb0      	pop	{r4, r5, r7, pc}

080118bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80118bc:	b5b0      	push	{r4, r5, r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
 80118c8:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7f6 febf 	bl	800864e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80118d0:	4604      	mov	r4, r0
 80118d2:	6838      	ldr	r0, [r7, #0]
 80118d4:	f7f6 fec6 	bl	8008664 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80118d8:	4605      	mov	r5, r0
 80118da:	6a38      	ldr	r0, [r7, #32]
 80118dc:	f7f6 fecd 	bl	800867a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80118e0:	4603      	mov	r3, r0
 80118e2:	462a      	mov	r2, r5
 80118e4:	4621      	mov	r1, r4
 80118e6:	68b8      	ldr	r0, [r7, #8]
 80118e8:	f7ff ffbe 	bl	8011868 <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 80118ec:	bf00      	nop
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bdb0      	pop	{r4, r5, r7, pc}

080118f4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	68da      	ldr	r2, [r3, #12]
 8011900:	f107 030c 	add.w	r3, r7, #12
 8011904:	4611      	mov	r1, r2
 8011906:	4618      	mov	r0, r3
 8011908:	f7ff fc58 	bl	80111bc <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	4618      	mov	r0, r3
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8011916:	b580      	push	{r7, lr}
 8011918:	b084      	sub	sp, #16
 801191a:	af00      	add	r7, sp, #0
 801191c:	60f8      	str	r0, [r7, #12]
 801191e:	60b9      	str	r1, [r7, #8]
 8011920:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8011922:	68b8      	ldr	r0, [r7, #8]
 8011924:	f000 f8b8 	bl	8011a98 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8011928:	4603      	mov	r3, r0
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	601a      	str	r2, [r3, #0]
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7f8 fdb6 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8011936:	4603      	mov	r3, r0
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	605a      	str	r2, [r3, #4]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	4618      	mov	r0, r3
 8011942:	3710      	adds	r7, #16
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f000 f8ac 	bl	8011aae <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 8011956:	4603      	mov	r3, r0
 8011958:	4618      	mov	r0, r3
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>:
    destroy_at(_Tp* __location)
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
    }
 8011968:	bf00      	nop
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011974:	b590      	push	{r4, r7, lr}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801197e:	687c      	ldr	r4, [r7, #4]
 8011980:	6838      	ldr	r0, [r7, #0]
 8011982:	f000 f8b1 	bl	8011ae8 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8011986:	4603      	mov	r3, r0
 8011988:	4618      	mov	r0, r3
 801198a:	f000 f8ba 	bl	8011b02 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 801198e:	4603      	mov	r3, r0
 8011990:	4619      	mov	r1, r3
 8011992:	4620      	mov	r0, r4
 8011994:	f7ff fcdd 	bl	8011352 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	4618      	mov	r0, r3
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd90      	pop	{r4, r7, pc}

080119a2 <_ZN17ExternalInterrupt8InstanceC1Ev>:
	public:
		IRQn_Type interrupt_request_number;
		function<void()> action = nullptr;
		bool is_on = true;

		Instance() = default;
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b082      	sub	sp, #8
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	3304      	adds	r3, #4
 80119ae:	2100      	movs	r1, #0
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fe fe73 	bl	801069c <_ZNSt8functionIFvvEEC1EDn>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2201      	movs	r2, #1
 80119ba:	751a      	strb	r2, [r3, #20]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	4618      	mov	r0, r3
 80119c0:	3708      	adds	r7, #8
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}

080119c6 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b084      	sub	sp, #16
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	60f8      	str	r0, [r7, #12]
 80119ce:	60b9      	str	r1, [r7, #8]
 80119d0:	607a      	str	r2, [r7, #4]
 80119d2:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80119d4:	68b8      	ldr	r0, [r7, #8]
 80119d6:	f000 f89f 	bl	8011b18 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80119da:	4603      	mov	r3, r0
 80119dc:	4618      	mov	r0, r3
 80119de:	f000 f890 	bl	8011b02 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80119e2:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80119e4:	881a      	ldrh	r2, [r3, #0]
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	801a      	strh	r2, [r3, #0]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	3304      	adds	r3, #4
 80119ee:	2200      	movs	r2, #0
 80119f0:	601a      	str	r2, [r3, #0]
 80119f2:	605a      	str	r2, [r3, #4]
 80119f4:	609a      	str	r2, [r3, #8]
 80119f6:	60da      	str	r2, [r3, #12]
 80119f8:	611a      	str	r2, [r3, #16]
 80119fa:	615a      	str	r2, [r3, #20]
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	3304      	adds	r3, #4
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7ff ffce 	bl	80119a2 <_ZN17ExternalInterrupt8InstanceC1Ev>
      { }
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3710      	adds	r7, #16
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8011a10:	b5b0      	push	{r4, r5, r7, lr}
 8011a12:	b086      	sub	sp, #24
 8011a14:	af02      	add	r7, sp, #8
 8011a16:	60f8      	str	r0, [r7, #12]
 8011a18:	7239      	strb	r1, [r7, #8]
 8011a1a:	607a      	str	r2, [r7, #4]
 8011a1c:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8011a1e:	463a      	mov	r2, r7
 8011a20:	f88d 4000 	strb.w	r4, [sp]
 8011a24:	462b      	mov	r3, r5
 8011a26:	6879      	ldr	r1, [r7, #4]
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f7ff ffcc 	bl	80119c6 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	4618      	mov	r0, r3
 8011a32:	3710      	adds	r7, #16
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bdb0      	pop	{r4, r5, r7, pc}

08011a38 <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	607a      	str	r2, [r7, #4]
 8011a44:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8011a46:	68b8      	ldr	r0, [r7, #8]
 8011a48:	f7f9 f999 	bl	800ad7e <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7f7 fd75 	bl	800953e <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a54:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8011a56:	781a      	ldrb	r2, [r3, #0]
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	701a      	strb	r2, [r3, #0]
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	3304      	adds	r3, #4
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f3 fde0 	bl	8005626 <_ZN3PinC1Ev>
      { }
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3710      	adds	r7, #16
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 8011a70:	b5b0      	push	{r4, r5, r7, lr}
 8011a72:	b086      	sub	sp, #24
 8011a74:	af02      	add	r7, sp, #8
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	7239      	strb	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8011a7e:	463a      	mov	r2, r7
 8011a80:	f88d 4000 	strb.w	r4, [sp]
 8011a84:	462b      	mov	r3, r5
 8011a86:	6879      	ldr	r1, [r7, #4]
 8011a88:	68f8      	ldr	r0, [r7, #12]
 8011a8a:	f7ff ffd5 	bl	8011a38 <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	4618      	mov	r0, r3
 8011a92:	3710      	adds	r7, #16
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bdb0      	pop	{r4, r5, r7, pc}

08011a98 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011a98:	b480      	push	{r7}
 8011a9a:	b083      	sub	sp, #12
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr

08011aae <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() const noexcept
 8011aae:	b480      	push	{r7}
 8011ab0:	b083      	sub	sp, #12
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	370c      	adds	r7, #12
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr

08011ac4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b084      	sub	sp, #16
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	00db      	lsls	r3, r3, #3
 8011ad6:	1a9b      	subs	r3, r3, r2
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	4619      	mov	r1, r3
 8011adc:	68b8      	ldr	r0, [r7, #8]
 8011ade:	f001 fb3d 	bl	801315c <_ZdlPvj>
      }
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b082      	sub	sp, #8
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 f83f 	bl	8011b76 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 8011af8:	4603      	mov	r3, r0
 8011afa:	4618      	mov	r0, r3
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011b02:	b480      	push	{r7}
 8011b04:	b083      	sub	sp, #12
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	370c      	adds	r7, #12
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr

08011b18 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f000 f833 	bl	8011b8e <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3708      	adds	r7, #8
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b084      	sub	sp, #16
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	60f8      	str	r0, [r7, #12]
 8011b3a:	60b9      	str	r1, [r7, #8]
 8011b3c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8011b3e:	68f8      	ldr	r0, [r7, #12]
 8011b40:	f000 f832 	bl	8011ba8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>
 8011b44:	4602      	mov	r2, r0
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	bf8c      	ite	hi
 8011b4c:	2301      	movhi	r3, #1
 8011b4e:	2300      	movls	r3, #0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8011b56:	f001 fbc7 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	00db      	lsls	r3, r3, #3
 8011b60:	1a9b      	subs	r3, r3, r2
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	4618      	mov	r0, r3
 8011b66:	f001 fafb 	bl	8013160 <_Znwj>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	bf00      	nop
      }
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011b76:	b480      	push	{r7}
 8011b78:	b083      	sub	sp, #12
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	4618      	mov	r0, r3
 8011b84:	370c      	adds	r7, #12
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr

08011b8e <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b082      	sub	sp, #8
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff ffa6 	bl	8011ae8 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
	...

08011ba8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011bb0:	4b03      	ldr	r3, [pc, #12]	; (8011bc0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv+0x18>)
      }
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	370c      	adds	r7, #12
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop
 8011bc0:	04924924 	.word	0x04924924

08011bc4 <_Z41__static_initialization_and_destruction_0ii>:
		return nullopt; //TODO: error handler
	}

	Pin& pin = service_ids[id];
	return HAL_GPIO_ReadPin(GPIO_PORT, pin.gpio_pin);
}
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b0c6      	sub	sp, #280	; 0x118
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011bce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011bd2:	6018      	str	r0, [r3, #0]
 8011bd4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011bd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8011bdc:	6019      	str	r1, [r3, #0]
 8011bde:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011be2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d142      	bne.n	8011c72 <_Z41__static_initialization_and_destruction_0ii+0xae>
 8011bec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011bf0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d139      	bne.n	8011c72 <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8011bfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c06:	4a28      	ldr	r2, [pc, #160]	; (8011ca8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8011c08:	4618      	mov	r0, r3
 8011c0a:	4611      	mov	r1, r2
 8011c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c10:	461a      	mov	r2, r3
 8011c12:	f001 fc03 	bl	801341c <memcpy>
 8011c16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c1e:	f107 0214 	add.w	r2, r7, #20
 8011c22:	601a      	str	r2, [r3, #0]
 8011c24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011c30:	605a      	str	r2, [r3, #4]
 8011c32:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7f5 fa41 	bl	80070be <_ZNSaIhEC1Ev>
 8011c3c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8011c40:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8011c44:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011c48:	ca06      	ldmia	r2, {r1, r2}
 8011c4a:	4818      	ldr	r0, [pc, #96]	; (8011cac <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8011c4c:	f7f5 fa4e 	bl	80070ec <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8011c50:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7f5 fa3e 	bl	80070d6 <_ZNSaIhED1Ev>
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};
 8011c5a:	4b15      	ldr	r3, [pc, #84]	; (8011cb0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	2300      	movs	r3, #0
 8011c60:	6013      	str	r3, [r2, #0]
 8011c62:	6053      	str	r3, [r2, #4]
 8011c64:	6093      	str	r3, [r2, #8]
 8011c66:	60d3      	str	r3, [r2, #12]
 8011c68:	6113      	str	r3, [r2, #16]
 8011c6a:	6153      	str	r3, [r2, #20]
 8011c6c:	4810      	ldr	r0, [pc, #64]	; (8011cb0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8011c6e:	f7fe fcca 	bl	8010606 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 8011c72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d10e      	bne.n	8011c9e <_Z41__static_initialization_and_destruction_0ii+0xda>
 8011c80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	d105      	bne.n	8011c9e <_Z41__static_initialization_and_destruction_0ii+0xda>
 8011c92:	4807      	ldr	r0, [pc, #28]	; (8011cb0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8011c94:	f7fe fcc4 	bl	8010620 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8011c98:	4804      	ldr	r0, [pc, #16]	; (8011cac <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8011c9a:	f7f5 fa55 	bl	8007148 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 8011c9e:	bf00      	nop
 8011ca0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	08013b70 	.word	0x08013b70
 8011cac:	24000e24 	.word	0x24000e24
 8011cb0:	24000e28 	.word	0x24000e28

08011cb4 <_GLOBAL__sub_I__ZN17ExternalInterrupt10id_managerE>:
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011cbc:	2001      	movs	r0, #1
 8011cbe:	f7ff ff81 	bl	8011bc4 <_Z41__static_initialization_and_destruction_0ii>
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <_GLOBAL__sub_D__ZN17ExternalInterrupt10id_managerE>:
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011ccc:	2000      	movs	r0, #0
 8011cce:	f7ff ff79 	bl	8011bc4 <_Z41__static_initialization_and_destruction_0ii>
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 f86d 	bl	8011dbc <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3708      	adds	r7, #8
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f000 f84b 	bl	8011d92 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3708      	adds	r7, #8
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}

08011d06 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 8011d06:	b580      	push	{r7, lr}
 8011d08:	b082      	sub	sp, #8
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	6078      	str	r0, [r7, #4]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7ff ffeb 	bl	8011cec <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f000 f851 	bl	8011dd2 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	4618      	mov	r0, r3
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>:
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b082      	sub	sp, #8
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 f8ac 	bl	8011ea2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>:
	{HAL_TIM_ACTIVE_CHANNEL_4, TIM_CHANNEL_4},
	{HAL_TIM_ACTIVE_CHANNEL_5, TIM_CHANNEL_5},
	{HAL_TIM_ACTIVE_CHANNEL_6, TIM_CHANNEL_6}
};

InputCapture::Instance::Instance(Pin pin, TIM_HandleTypeDef* timer, uint32_t channel_rising, uint32_t channel_falling) :
 8011d54:	b480      	push	{r7}
 8011d56:	b085      	sub	sp, #20
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	1d38      	adds	r0, r7, #4
 8011d5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8011d62:	603b      	str	r3, [r7, #0]
	pin(pin),
	timer(timer),
	channel_rising(channel_rising),
	channel_falling(channel_falling)
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	3304      	adds	r3, #4
 8011d68:	1d3a      	adds	r2, r7, #4
 8011d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	683a      	ldr	r2, [r7, #0]
 8011d76:	60da      	str	r2, [r3, #12]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	69ba      	ldr	r2, [r7, #24]
 8011d7c:	611a      	str	r2, [r3, #16]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	69fa      	ldr	r2, [r7, #28]
 8011d82:	615a      	str	r2, [r3, #20]
	{ }
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	4618      	mov	r0, r3
 8011d88:	3714      	adds	r7, #20
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr

08011d92 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b082      	sub	sp, #8
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f000 f896 	bl	8011ecc <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f5 fd32 	bl	800780c <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	3304      	adds	r3, #4
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7f4 fd2f 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	4618      	mov	r0, r3
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011dbc:	b480      	push	{r7}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b082      	sub	sp, #8
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 f8a1 	bl	8011f22 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8011de0:	4603      	mov	r3, r0
 8011de2:	4619      	mov	r1, r3
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 f87d 	bl	8011ee4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7ff ff71 	bl	8011cd4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	4618      	mov	r0, r3
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <_ZNSaISt4pairIKmmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f000 f898 	bl	8011f3a <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <_ZNSaISt4pairIKmmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	370c      	adds	r7, #12
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>:
      map(initializer_list<value_type> __l,
 8011e2a:	b5b0      	push	{r4, r5, r7, lr}
 8011e2c:	b086      	sub	sp, #24
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	60f8      	str	r0, [r7, #12]
 8011e32:	1d38      	adds	r0, r7, #4
 8011e34:	e880 0006 	stmia.w	r0, {r1, r2}
 8011e38:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8011e3a:	68fc      	ldr	r4, [r7, #12]
 8011e3c:	f107 0314 	add.w	r3, r7, #20
 8011e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e42:	4618      	mov	r0, r3
 8011e44:	f000 f884 	bl	8011f50 <_ZNSaISt4pairIKmmEEC1ERKS2_>
 8011e48:	f107 0314 	add.w	r3, r7, #20
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	6839      	ldr	r1, [r7, #0]
 8011e50:	4620      	mov	r0, r4
 8011e52:	f000 f88b 	bl	8011f6c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>
 8011e56:	f107 0314 	add.w	r3, r7, #20
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7ff ffda 	bl	8011e14 <_ZNSaISt4pairIKmmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8011e60:	68fc      	ldr	r4, [r7, #12]
 8011e62:	1d3b      	adds	r3, r7, #4
 8011e64:	4618      	mov	r0, r3
 8011e66:	f000 f89f 	bl	8011fa8 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	1d3b      	adds	r3, r7, #4
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f000 f8a6 	bl	8011fc0 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>
 8011e74:	4603      	mov	r3, r0
 8011e76:	461a      	mov	r2, r3
 8011e78:	4629      	mov	r1, r5
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f000 f8b2 	bl	8011fe4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	4618      	mov	r0, r3
 8011e84:	3718      	adds	r7, #24
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bdb0      	pop	{r4, r5, r7, pc}

08011e8a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 f8d2 	bl	801203c <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3708      	adds	r7, #8
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b082      	sub	sp, #8
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f000 f8f0 	bl	8012090 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f000 f8cc 	bl	8012052 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7ff ffe4 	bl	8011e8a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 f92e 	bl	8012136 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	4618      	mov	r0, r3
 8011ede:	3708      	adds	r7, #8
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d012      	beq.n	8011f1a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8011ef4:	6838      	ldr	r0, [r7, #0]
 8011ef6:	f000 f929 	bl	801214c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011efa:	4603      	mov	r3, r0
 8011efc:	4619      	mov	r1, r3
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7ff fff0 	bl	8011ee4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8011f04:	6838      	ldr	r0, [r7, #0]
 8011f06:	f000 f92d 	bl	8012164 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8011f0a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f934 	bl	801217c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011f18:	e7e9      	b.n	8011eee <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8011f1a:	bf00      	nop
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8011f22:	b480      	push	{r7}
 8011f24:	b083      	sub	sp, #12
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	370c      	adds	r7, #12
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr

08011f3a <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011f3a:	b480      	push	{r7}
 8011f3c:	b083      	sub	sp, #12
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	4618      	mov	r0, r3
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <_ZNSaISt4pairIKmmEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8011f5a:	6839      	ldr	r1, [r7, #0]
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 f91e 	bl	801219e <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4618      	mov	r0, r3
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>:
      _Rb_tree(const _Compare& __comp,
 8011f6c:	b590      	push	{r4, r7, lr}
 8011f6e:	b087      	sub	sp, #28
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8011f78:	68fc      	ldr	r4, [r7, #12]
 8011f7a:	f107 0314 	add.w	r3, r7, #20
 8011f7e:	6879      	ldr	r1, [r7, #4]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f000 f918 	bl	80121b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>
 8011f86:	f107 0314 	add.w	r3, r7, #20
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	68b9      	ldr	r1, [r7, #8]
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f000 f91e 	bl	80121d0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>
 8011f94:	f107 0314 	add.w	r3, r7, #20
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f000 f84f 	bl	801203c <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	371c      	adds	r7, #28
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd90      	pop	{r4, r7, pc}

08011fa8 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	370c      	adds	r7, #12
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr

08011fc0 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8011fc0:	b590      	push	{r4, r7, lr}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff ffed 	bl	8011fa8 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 8011fce:	4604      	mov	r4, r0
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 f91a 	bl	801220a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	4423      	add	r3, r4
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd90      	pop	{r4, r7, pc}

08011fe4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8011ff0:	f107 0314 	add.w	r3, r7, #20
 8011ff4:	68f9      	ldr	r1, [r7, #12]
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f000 f913 	bl	8012222 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>
	  for (; __first != __last; ++__first)
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	429a      	cmp	r2, r3
 8012002:	d017      	beq.n	8012034 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8012004:	68f8      	ldr	r0, [r7, #12]
 8012006:	f000 f91b 	bl	8012240 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>
 801200a:	4603      	mov	r3, r0
 801200c:	61fb      	str	r3, [r7, #28]
 801200e:	f107 021c 	add.w	r2, r7, #28
 8012012:	f107 0318 	add.w	r3, r7, #24
 8012016:	4611      	mov	r1, r2
 8012018:	4618      	mov	r0, r3
 801201a:	f000 f87c 	bl	8012116 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 801201e:	f107 0314 	add.w	r3, r7, #20
 8012022:	68ba      	ldr	r2, [r7, #8]
 8012024:	69b9      	ldr	r1, [r7, #24]
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f000 f91b 	bl	8012262 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>
	  for (; __first != __last; ++__first)
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	3308      	adds	r3, #8
 8012030:	60bb      	str	r3, [r7, #8]
 8012032:	e7e3      	b.n	8011ffc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x18>
	}
 8012034:	bf00      	nop
 8012036:	3720      	adds	r7, #32
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801203c:	b480      	push	{r7}
 801203e:	b083      	sub	sp, #12
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	4618      	mov	r0, r3
 8012048:	370c      	adds	r7, #12
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr

08012052 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012052:	b580      	push	{r7, lr}
 8012054:	b084      	sub	sp, #16
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
 801205a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d012      	beq.n	8012088 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	  _M_erase(_S_right(__x));
 8012062:	6838      	ldr	r0, [r7, #0]
 8012064:	f000 f930 	bl	80122c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012068:	4603      	mov	r3, r0
 801206a:	4619      	mov	r1, r3
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7ff fff0 	bl	8012052 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 8012072:	6838      	ldr	r0, [r7, #0]
 8012074:	f000 f934 	bl	80122e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012078:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801207a:	6839      	ldr	r1, [r7, #0]
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 f93b 	bl	80122f8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012086:	e7e9      	b.n	801205c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
    }
 8012088:	bf00      	nop
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	689b      	ldr	r3, [r3, #8]
 801209c:	4618      	mov	r0, r3
 801209e:	370c      	adds	r7, #12
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	3310      	adds	r3, #16
 80120b4:	4618      	mov	r0, r3
 80120b6:	f000 f930 	bl	801231a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>
 80120ba:	4603      	mov	r3, r0
 80120bc:	4618      	mov	r0, r3
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681a      	ldr	r2, [r3, #0]
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	bf0c      	ite	eq
 80120da:	2301      	moveq	r3, #1
 80120dc:	2300      	movne	r3, #0
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	4618      	mov	r0, r3
 80120e2:	370c      	adds	r7, #12
 80120e4:	46bd      	mov	sp, r7
 80120e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ea:	4770      	bx	lr

080120ec <_ZNKSt4lessImEclERKmS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80120ec:	b480      	push	{r7}
 80120ee:	b085      	sub	sp, #20
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	429a      	cmp	r2, r3
 8012102:	bf34      	ite	cc
 8012104:	2301      	movcc	r3, #1
 8012106:	2300      	movcs	r3, #0
 8012108:	b2db      	uxtb	r3, r3
 801210a:	4618      	mov	r0, r3
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr

08012116 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8012116:	b480      	push	{r7}
 8012118:	b083      	sub	sp, #12
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
 801211e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	601a      	str	r2, [r3, #0]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	4618      	mov	r0, r3
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr

08012136 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
 8012136:	b480      	push	{r7}
 8012138:	b083      	sub	sp, #12
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr

0801214c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	4618      	mov	r0, r3
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	689b      	ldr	r3, [r3, #8]
 8012170:	4618      	mov	r0, r3
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 fa25 	bl	80125d8 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 801218e:	6839      	ldr	r1, [r7, #0]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 fa36 	bl	8012602 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8012196:	bf00      	nop
 8012198:	3708      	adds	r7, #8
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801219e:	b480      	push	{r7}
 80121a0:	b083      	sub	sp, #12
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	6039      	str	r1, [r7, #0]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	4618      	mov	r0, r3
 80121ac:	370c      	adds	r7, #12
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr

080121b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80121b6:	b580      	push	{r7, lr}
 80121b8:	b082      	sub	sp, #8
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
 80121be:	6039      	str	r1, [r7, #0]
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f000 fa30 	bl	8012626 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	3708      	adds	r7, #8
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b084      	sub	sp, #16
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 fa2d 	bl	801263c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80121e2:	4603      	mov	r3, r0
 80121e4:	4619      	mov	r1, r3
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f000 fa33 	bl	8012652 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	68b9      	ldr	r1, [r7, #8]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 fa3c 	bl	801266e <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	3304      	adds	r3, #4
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7f4 fb08 	bl	8006810 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	4618      	mov	r0, r3
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 801220a:	b480      	push	{r7}
 801220c:	b083      	sub	sp, #12
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	4618      	mov	r0, r3
 8012218:	370c      	adds	r7, #12
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr

08012222 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>:
	_Alloc_node(_Rb_tree& __t)
 8012222:	b480      	push	{r7}
 8012224:	b083      	sub	sp, #12
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
 801222a:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	683a      	ldr	r2, [r7, #0]
 8012230:	601a      	str	r2, [r3, #0]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	4618      	mov	r0, r3
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	1d1a      	adds	r2, r3, #4
 801224c:	f107 030c 	add.w	r3, r7, #12
 8012250:	4611      	mov	r1, r2
 8012252:	4618      	mov	r0, r3
 8012254:	f000 f9b1 	bl	80125ba <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	4618      	mov	r0, r3
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012262:	b5b0      	push	{r4, r5, r7, lr}
 8012264:	b08a      	sub	sp, #40	; 0x28
 8012266:	af02      	add	r7, sp, #8
 8012268:	60f8      	str	r0, [r7, #12]
 801226a:	60b9      	str	r1, [r7, #8]
 801226c:	607a      	str	r2, [r7, #4]
 801226e:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8012270:	f107 0318 	add.w	r3, r7, #24
 8012274:	6879      	ldr	r1, [r7, #4]
 8012276:	4618      	mov	r0, r3
 8012278:	f000 fa05 	bl	8012686 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 801227c:	4603      	mov	r3, r0
 801227e:	f107 0010 	add.w	r0, r7, #16
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	68f9      	ldr	r1, [r7, #12]
 8012286:	f000 f862 	bl	801234e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>
      if (__res.second)
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d00f      	beq.n	80122b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8012290:	693c      	ldr	r4, [r7, #16]
 8012292:	697d      	ldr	r5, [r7, #20]
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 fa02 	bl	801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801229a:	4602      	mov	r2, r0
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	4613      	mov	r3, r2
 80122a2:	462a      	mov	r2, r5
 80122a4:	4621      	mov	r1, r4
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f000 fa04 	bl	80126b4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>
 80122ac:	4603      	mov	r3, r0
			  __node_gen);
 80122ae:	e007      	b.n	80122c0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80122b0:	693a      	ldr	r2, [r7, #16]
 80122b2:	f107 031c 	add.w	r3, r7, #28
 80122b6:	4611      	mov	r1, r2
 80122b8:	4618      	mov	r0, r3
 80122ba:	f000 f97e 	bl	80125ba <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 80122be:	69fb      	ldr	r3, [r7, #28]
    }
 80122c0:	4618      	mov	r0, r3
 80122c2:	3720      	adds	r7, #32
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bdb0      	pop	{r4, r5, r7, pc}

080122c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	4618      	mov	r0, r3
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	4618      	mov	r0, r3
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8012302:	6839      	ldr	r1, [r7, #0]
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 fa1e 	bl	8012746 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 801230a:	6839      	ldr	r1, [r7, #0]
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 fa2f 	bl	8012770 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 8012312:	bf00      	nop
 8012314:	3708      	adds	r7, #8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 801231a:	b580      	push	{r7, lr}
 801231c:	b082      	sub	sp, #8
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 fa36 	bl	8012794 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>
 8012328:	4603      	mov	r3, r0
 801232a:	4618      	mov	r0, r3
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr()
 8012332:	b580      	push	{r7, lr}
 8012334:	b082      	sub	sp, #8
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	3310      	adds	r3, #16
 801233e:	4618      	mov	r0, r3
 8012340:	f000 fa3f 	bl	80127c2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 8012344:	4603      	mov	r3, r0
 8012346:	4618      	mov	r0, r3
 8012348:	3708      	adds	r7, #8
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801234e:	b590      	push	{r4, r7, lr}
 8012350:	b08d      	sub	sp, #52	; 0x34
 8012352:	af00      	add	r7, sp, #0
 8012354:	60f8      	str	r0, [r7, #12]
 8012356:	60b9      	str	r1, [r7, #8]
 8012358:	607a      	str	r2, [r7, #4]
 801235a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801235c:	1d3b      	adds	r3, r7, #4
 801235e:	4618      	mov	r0, r3
 8012360:	f000 fa4c 	bl	80127fc <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>
 8012364:	4603      	mov	r3, r0
 8012366:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8012368:	69bc      	ldr	r4, [r7, #24]
 801236a:	68b8      	ldr	r0, [r7, #8]
 801236c:	f000 fa1d 	bl	80127aa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8012370:	4603      	mov	r3, r0
 8012372:	429c      	cmp	r4, r3
 8012374:	bf0c      	ite	eq
 8012376:	2301      	moveq	r3, #1
 8012378:	2300      	movne	r3, #0
 801237a:	b2db      	uxtb	r3, r3
 801237c:	2b00      	cmp	r3, #0
 801237e:	d030      	beq.n	80123e2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 8012380:	68b8      	ldr	r0, [r7, #8]
 8012382:	f000 fa4c 	bl	801281e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>
 8012386:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8012388:	2b00      	cmp	r3, #0
 801238a:	d013      	beq.n	80123b4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 801238c:	68bc      	ldr	r4, [r7, #8]
 801238e:	68b8      	ldr	r0, [r7, #8]
 8012390:	f000 fa51 	bl	8012836 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8012394:	4603      	mov	r3, r0
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4618      	mov	r0, r3
 801239a:	f000 fa58 	bl	801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801239e:	4603      	mov	r3, r0
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	4619      	mov	r1, r3
 80123a4:	4620      	mov	r0, r4
 80123a6:	f7ff fea1 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d001      	beq.n	80123b4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 80123b0:	2301      	movs	r3, #1
 80123b2:	e000      	b.n	80123b6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 80123b4:	2300      	movs	r3, #0
	  if (size() > 0
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00c      	beq.n	80123d4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80123ba:	2300      	movs	r3, #0
 80123bc:	61fb      	str	r3, [r7, #28]
 80123be:	68b8      	ldr	r0, [r7, #8]
 80123c0:	f000 fa39 	bl	8012836 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 80123c4:	4602      	mov	r2, r0
 80123c6:	f107 031c 	add.w	r3, r7, #28
 80123ca:	4619      	mov	r1, r3
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f7f7 fa50 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80123d2:	e0db      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	68b9      	ldr	r1, [r7, #8]
 80123da:	4618      	mov	r0, r3
 80123dc:	f000 fa43 	bl	8012866 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 80123e0:	e0d4      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80123e2:	68bc      	ldr	r4, [r7, #8]
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f000 fa31 	bl	801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80123ec:	4603      	mov	r3, r0
 80123ee:	461a      	mov	r2, r3
 80123f0:	6839      	ldr	r1, [r7, #0]
 80123f2:	4620      	mov	r0, r4
 80123f4:	f7ff fe7a 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d057      	beq.n	80124ae <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 80123fe:	69bb      	ldr	r3, [r7, #24]
 8012400:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8012402:	69bc      	ldr	r4, [r7, #24]
 8012404:	68b8      	ldr	r0, [r7, #8]
 8012406:	f000 fab3 	bl	8012970 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 801240a:	4603      	mov	r3, r0
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	429c      	cmp	r4, r3
 8012410:	bf0c      	ite	eq
 8012412:	2301      	moveq	r3, #1
 8012414:	2300      	movne	r3, #0
 8012416:	b2db      	uxtb	r3, r3
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00d      	beq.n	8012438 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801241c:	68b8      	ldr	r0, [r7, #8]
 801241e:	f000 faa7 	bl	8012970 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8012422:	4604      	mov	r4, r0
 8012424:	68b8      	ldr	r0, [r7, #8]
 8012426:	f000 faa3 	bl	8012970 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 801242a:	4603      	mov	r3, r0
 801242c:	461a      	mov	r2, r3
 801242e:	4621      	mov	r1, r4
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f7f7 fac5 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012436:	e0a9      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8012438:	68bc      	ldr	r4, [r7, #8]
 801243a:	f107 0314 	add.w	r3, r7, #20
 801243e:	4618      	mov	r0, r3
 8012440:	f000 faa2 	bl	8012988 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
 8012444:	4603      	mov	r3, r0
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4618      	mov	r0, r3
 801244a:	f000 fa00 	bl	801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801244e:	4603      	mov	r3, r0
 8012450:	683a      	ldr	r2, [r7, #0]
 8012452:	4619      	mov	r1, r3
 8012454:	4620      	mov	r0, r4
 8012456:	f7ff fe49 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d01f      	beq.n	80124a0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff ff30 	bl	80122c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	bf0c      	ite	eq
 801246e:	2301      	moveq	r3, #1
 8012470:	2300      	movne	r3, #0
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00a      	beq.n	801248e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8012478:	2300      	movs	r3, #0
 801247a:	623b      	str	r3, [r7, #32]
 801247c:	f107 0214 	add.w	r2, r7, #20
 8012480:	f107 0320 	add.w	r3, r7, #32
 8012484:	4619      	mov	r1, r3
 8012486:	68f8      	ldr	r0, [r7, #12]
 8012488:	f7f7 f9f3 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801248c:	e07e      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801248e:	f107 0218 	add.w	r2, r7, #24
 8012492:	f107 0318 	add.w	r3, r7, #24
 8012496:	4619      	mov	r1, r3
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7f7 fa91 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801249e:	e075      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	683a      	ldr	r2, [r7, #0]
 80124a4:	68b9      	ldr	r1, [r7, #8]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 f9dd 	bl	8012866 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 80124ac:	e06e      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80124ae:	68bc      	ldr	r4, [r7, #8]
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f000 f9cb 	bl	801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80124b8:	4603      	mov	r3, r0
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	4619      	mov	r1, r3
 80124be:	4620      	mov	r0, r4
 80124c0:	f7ff fe14 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d056      	beq.n	8012578 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80124ce:	69bc      	ldr	r4, [r7, #24]
 80124d0:	68b8      	ldr	r0, [r7, #8]
 80124d2:	f000 f9b0 	bl	8012836 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 80124d6:	4603      	mov	r3, r0
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	429c      	cmp	r4, r3
 80124dc:	bf0c      	ite	eq
 80124de:	2301      	moveq	r3, #1
 80124e0:	2300      	movne	r3, #0
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00c      	beq.n	8012502 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80124e8:	2300      	movs	r3, #0
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
 80124ec:	68b8      	ldr	r0, [r7, #8]
 80124ee:	f000 f9a2 	bl	8012836 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 80124f2:	4602      	mov	r2, r0
 80124f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124f8:	4619      	mov	r1, r3
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7f7 f9b9 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012500:	e044      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8012502:	68bc      	ldr	r4, [r7, #8]
 8012504:	f107 0310 	add.w	r3, r7, #16
 8012508:	4618      	mov	r0, r3
 801250a:	f000 fa4e 	bl	80129aa <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>
 801250e:	4603      	mov	r3, r0
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	4618      	mov	r0, r3
 8012514:	f000 f99b 	bl	801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012518:	4603      	mov	r3, r0
 801251a:	461a      	mov	r2, r3
 801251c:	6839      	ldr	r1, [r7, #0]
 801251e:	4620      	mov	r0, r4
 8012520:	f7ff fde4 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d01f      	beq.n	801256a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	4618      	mov	r0, r3
 801252e:	f7ff fecb 	bl	80122c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	bf0c      	ite	eq
 8012538:	2301      	moveq	r3, #1
 801253a:	2300      	movne	r3, #0
 801253c:	b2db      	uxtb	r3, r3
 801253e:	2b00      	cmp	r3, #0
 8012540:	d00a      	beq.n	8012558 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8012542:	2300      	movs	r3, #0
 8012544:	62bb      	str	r3, [r7, #40]	; 0x28
 8012546:	f107 0218 	add.w	r2, r7, #24
 801254a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801254e:	4619      	mov	r1, r3
 8012550:	68f8      	ldr	r0, [r7, #12]
 8012552:	f7f7 f98e 	bl	8009872 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012556:	e019      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8012558:	f107 0210 	add.w	r2, r7, #16
 801255c:	f107 0310 	add.w	r3, r7, #16
 8012560:	4619      	mov	r1, r3
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f7f7 fa2c 	bl	80099c0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012568:	e010      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	683a      	ldr	r2, [r7, #0]
 801256e:	68b9      	ldr	r1, [r7, #8]
 8012570:	4618      	mov	r0, r3
 8012572:	f000 f978 	bl	8012866 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8012576:	e009      	b.n	801258c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8012578:	2300      	movs	r3, #0
 801257a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801257c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012580:	f107 0318 	add.w	r3, r7, #24
 8012584:	4619      	mov	r1, r3
 8012586:	68f8      	ldr	r0, [r7, #12]
 8012588:	f7f7 fa55 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	3734      	adds	r7, #52	; 0x34
 8012590:	46bd      	mov	sp, r7
 8012592:	bd90      	pop	{r4, r7, pc}

08012594 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 fa15 	bl	80129cc <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 80125a2:	4602      	mov	r2, r0
 80125a4:	f107 030c 	add.w	r3, r7, #12
 80125a8:	4611      	mov	r1, r2
 80125aa:	4618      	mov	r0, r3
 80125ac:	f000 f86b 	bl	8012686 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 80125b0:	4603      	mov	r3, r0
      }
 80125b2:	4618      	mov	r0, r3
 80125b4:	3710      	adds	r7, #16
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}

080125ba <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80125ba:	b480      	push	{r7}
 80125bc:	b083      	sub	sp, #12
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
 80125c2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	601a      	str	r2, [r3, #0]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	370c      	adds	r7, #12
 80125d0:	46bd      	mov	sp, r7
 80125d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d6:	4770      	bx	lr

080125d8 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80125d8:	b590      	push	{r4, r7, lr}
 80125da:	b083      	sub	sp, #12
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 fa00 	bl	80129e8 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80125e8:	4604      	mov	r4, r0
 80125ea:	6838      	ldr	r0, [r7, #0]
 80125ec:	f7ff fd5c 	bl	80120a8 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>
 80125f0:	4603      	mov	r3, r0
 80125f2:	4619      	mov	r1, r3
 80125f4:	4620      	mov	r0, r4
 80125f6:	f000 fa02 	bl	80129fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 80125fa:	bf00      	nop
 80125fc:	370c      	adds	r7, #12
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd90      	pop	{r4, r7, pc}

08012602 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012602:	b580      	push	{r7, lr}
 8012604:	b082      	sub	sp, #8
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
 801260a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 f9eb 	bl	80129e8 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8012612:	4603      	mov	r3, r0
 8012614:	2201      	movs	r2, #1
 8012616:	6839      	ldr	r1, [r7, #0]
 8012618:	4618      	mov	r0, r3
 801261a:	f000 f9fc 	bl	8012a16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>
 801261e:	bf00      	nop
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}

08012626 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012626:	b480      	push	{r7}
 8012628:	b083      	sub	sp, #12
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	4618      	mov	r0, r3
 8012648:	370c      	adds	r7, #12
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr

08012652 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8012652:	b580      	push	{r7, lr}
 8012654:	b082      	sub	sp, #8
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801265c:	6839      	ldr	r1, [r7, #0]
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f000 f9f8 	bl	8012a54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4618      	mov	r0, r3
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}

0801266e <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 801266e:	b480      	push	{r7}
 8012670:	b083      	sub	sp, #12
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
 8012676:	6039      	str	r1, [r7, #0]
      { }
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4618      	mov	r0, r3
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr

08012686 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>:
      operator()(const _Pair& __x) const
 8012686:	b480      	push	{r7}
 8012688:	b083      	sub	sp, #12
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
 801268e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	4618      	mov	r0, r3
 8012694:	370c      	adds	r7, #12
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr

0801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801269e:	b480      	push	{r7}
 80126a0:	b083      	sub	sp, #12
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	4618      	mov	r0, r3
 80126aa:	370c      	adds	r7, #12
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr

080126b4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80126b4:	b5b0      	push	{r4, r5, r7, lr}
 80126b6:	b088      	sub	sp, #32
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	607a      	str	r2, [r7, #4]
 80126c0:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d11a      	bne.n	80126fe <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80126c8:	68f8      	ldr	r0, [r7, #12]
 80126ca:	f000 f86e 	bl	80127aa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 80126ce:	4602      	mov	r2, r0
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d013      	beq.n	80126fe <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80126d6:	68fc      	ldr	r4, [r7, #12]
 80126d8:	f107 0310 	add.w	r3, r7, #16
 80126dc:	6839      	ldr	r1, [r7, #0]
 80126de:	4618      	mov	r0, r3
 80126e0:	f7ff ffd1 	bl	8012686 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 80126e4:	4605      	mov	r5, r0
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f000 f8b1 	bl	801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80126ec:	4603      	mov	r3, r0
 80126ee:	461a      	mov	r2, r3
 80126f0:	4629      	mov	r1, r5
 80126f2:	4620      	mov	r0, r4
 80126f4:	f7ff fcfa 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d001      	beq.n	8012702 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4e>
 80126fe:	2301      	movs	r3, #1
 8012700:	e000      	b.n	8012704 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x50>
 8012702:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8012704:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8012706:	6838      	ldr	r0, [r7, #0]
 8012708:	f7ff ffc9 	bl	801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801270c:	4603      	mov	r3, r0
 801270e:	4619      	mov	r1, r3
 8012710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012712:	f000 f9ab 	bl	8012a6c <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>
 8012716:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801271c:	7ff8      	ldrb	r0, [r7, #31]
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	69b9      	ldr	r1, [r7, #24]
 8012722:	f000 fd86 	bl	8013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	695b      	ldr	r3, [r3, #20]
 801272a:	1c5a      	adds	r2, r3, #1
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8012730:	f107 0314 	add.w	r3, r7, #20
 8012734:	69b9      	ldr	r1, [r7, #24]
 8012736:	4618      	mov	r0, r3
 8012738:	f7ff ff3f 	bl	80125ba <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 801273c:	697b      	ldr	r3, [r7, #20]
      }
 801273e:	4618      	mov	r0, r3
 8012740:	3720      	adds	r7, #32
 8012742:	46bd      	mov	sp, r7
 8012744:	bdb0      	pop	{r4, r5, r7, pc}

08012746 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012746:	b590      	push	{r4, r7, lr}
 8012748:	b083      	sub	sp, #12
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
 801274e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 f99f 	bl	8012a94 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8012756:	4604      	mov	r4, r0
 8012758:	6838      	ldr	r0, [r7, #0]
 801275a:	f7ff fdea 	bl	8012332 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 801275e:	4603      	mov	r3, r0
 8012760:	4619      	mov	r1, r3
 8012762:	4620      	mov	r0, r4
 8012764:	f000 f9a1 	bl	8012aaa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>
      }
 8012768:	bf00      	nop
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	bd90      	pop	{r4, r7, pc}

08012770 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f000 f98a 	bl	8012a94 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8012780:	4603      	mov	r3, r0
 8012782:	2201      	movs	r2, #1
 8012784:	6839      	ldr	r1, [r7, #0]
 8012786:	4618      	mov	r0, r3
 8012788:	f000 f99b 	bl	8012ac2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>
 801278c:	bf00      	nop
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	370c      	adds	r7, #12
 80127a2:	46bd      	mov	sp, r7
 80127a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a8:	4770      	bx	lr

080127aa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80127aa:	b480      	push	{r7}
 80127ac:	b083      	sub	sp, #12
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	3304      	adds	r3, #4
 80127b6:	4618      	mov	r0, r3
 80127b8:	370c      	adds	r7, #12
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr

080127c2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() noexcept
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b082      	sub	sp, #8
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 f998 	bl	8012b00 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 80127d0:	4603      	mov	r3, r0
 80127d2:	4618      	mov	r0, r3
 80127d4:	3708      	adds	r7, #8
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 80127da:	b580      	push	{r7, lr}
 80127dc:	b082      	sub	sp, #8
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 f956 	bl	8012a94 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2101      	movs	r1, #1
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 f992 	bl	8012b16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>
 80127f2:	4603      	mov	r3, r0
 80127f4:	4618      	mov	r0, r3
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	f107 030c 	add.w	r3, r7, #12
 801280c:	4611      	mov	r1, r2
 801280e:	4618      	mov	r0, r3
 8012810:	f7ff fed3 	bl	80125ba <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	4618      	mov	r0, r3
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}

0801281e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801281e:	b480      	push	{r7}
 8012820:	b083      	sub	sp, #12
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	695b      	ldr	r3, [r3, #20]
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr

08012836 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8012836:	b480      	push	{r7}
 8012838:	b083      	sub	sp, #12
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	3310      	adds	r3, #16
 8012842:	4618      	mov	r0, r3
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr

0801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801284e:	b580      	push	{r7, lr}
 8012850:	b082      	sub	sp, #8
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f7ff fe9c 	bl	8012594 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 801285c:	4603      	mov	r3, r0
 801285e:	4618      	mov	r0, r3
 8012860:	3708      	adds	r7, #8
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}

08012866 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012866:	b590      	push	{r4, r7, lr}
 8012868:	b08b      	sub	sp, #44	; 0x2c
 801286a:	af00      	add	r7, sp, #0
 801286c:	60f8      	str	r0, [r7, #12]
 801286e:	60b9      	str	r1, [r7, #8]
 8012870:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8012872:	68b8      	ldr	r0, [r7, #8]
 8012874:	f7ff fc0c 	bl	8012090 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8012878:	4603      	mov	r3, r0
 801287a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801287c:	68b8      	ldr	r0, [r7, #8]
 801287e:	f7ff ff94 	bl	80127aa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8012882:	4603      	mov	r3, r0
 8012884:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8012886:	2301      	movs	r3, #1
 8012888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d020      	beq.n	80128d4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8012896:	68bc      	ldr	r4, [r7, #8]
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	4618      	mov	r0, r3
 801289c:	f7ff fe7a 	bl	8012594 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 80128a0:	4603      	mov	r3, r0
 80128a2:	461a      	mov	r2, r3
 80128a4:	6879      	ldr	r1, [r7, #4]
 80128a6:	4620      	mov	r0, r4
 80128a8:	f7ff fc20 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 80128ac:	4603      	mov	r3, r0
 80128ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80128b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d005      	beq.n	80128c6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 80128ba:	69bb      	ldr	r3, [r7, #24]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff fd0f 	bl	80122e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 80128c2:	4603      	mov	r3, r0
 80128c4:	e004      	b.n	80128d0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7ff fcfd 	bl	80122c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80128ce:	4603      	mov	r3, r0
 80128d0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80128d2:	e7db      	b.n	801288c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80128d4:	697a      	ldr	r2, [r7, #20]
 80128d6:	f107 0310 	add.w	r3, r7, #16
 80128da:	4611      	mov	r1, r2
 80128dc:	4618      	mov	r0, r3
 80128de:	f7ff fe6c 	bl	80125ba <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80128e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d01d      	beq.n	8012926 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 80128ea:	68b8      	ldr	r0, [r7, #8]
 80128ec:	f000 f936 	bl	8012b5c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>
 80128f0:	4603      	mov	r3, r0
 80128f2:	61fb      	str	r3, [r7, #28]
 80128f4:	f107 021c 	add.w	r2, r7, #28
 80128f8:	f107 0310 	add.w	r3, r7, #16
 80128fc:	4611      	mov	r1, r2
 80128fe:	4618      	mov	r0, r3
 8012900:	f7ff fbe0 	bl	80120c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d008      	beq.n	801291c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801290a:	f107 0214 	add.w	r2, r7, #20
 801290e:	f107 0318 	add.w	r3, r7, #24
 8012912:	4619      	mov	r1, r3
 8012914:	68f8      	ldr	r0, [r7, #12]
 8012916:	f000 f932 	bl	8012b7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 801291a:	e025      	b.n	8012968 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801291c:	f107 0310 	add.w	r3, r7, #16
 8012920:	4618      	mov	r0, r3
 8012922:	f000 f831 	bl	8012988 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8012926:	68bc      	ldr	r4, [r7, #8]
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	4618      	mov	r0, r3
 801292c:	f7ff ff8f 	bl	801284e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012930:	4603      	mov	r3, r0
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	4619      	mov	r1, r3
 8012936:	4620      	mov	r0, r4
 8012938:	f7ff fbd8 	bl	80120ec <_ZNKSt4lessImEclERKmS2_>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d008      	beq.n	8012954 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8012942:	f107 0214 	add.w	r2, r7, #20
 8012946:	f107 0318 	add.w	r3, r7, #24
 801294a:	4619      	mov	r1, r3
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f000 f916 	bl	8012b7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8012952:	e009      	b.n	8012968 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8012954:	2300      	movs	r3, #0
 8012956:	623b      	str	r3, [r7, #32]
 8012958:	f107 0220 	add.w	r2, r7, #32
 801295c:	f107 0310 	add.w	r3, r7, #16
 8012960:	4619      	mov	r1, r3
 8012962:	68f8      	ldr	r0, [r7, #12]
 8012964:	f7f7 f867 	bl	8009a36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012968:	68f8      	ldr	r0, [r7, #12]
 801296a:	372c      	adds	r7, #44	; 0x2c
 801296c:	46bd      	mov	sp, r7
 801296e:	bd90      	pop	{r4, r7, pc}

08012970 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	330c      	adds	r3, #12
 801297c:	4618      	mov	r0, r3
 801297e:	370c      	adds	r7, #12
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr

08012988 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4618      	mov	r0, r3
 8012996:	f000 fc4a 	bl	801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801299a:	4602      	mov	r2, r0
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	601a      	str	r2, [r3, #0]
	return *this;
 80129a0:	687b      	ldr	r3, [r7, #4]
      }
 80129a2:	4618      	mov	r0, r3
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}

080129aa <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80129aa:	b580      	push	{r7, lr}
 80129ac:	b082      	sub	sp, #8
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f000 fc37 	bl	801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80129bc:	4602      	mov	r2, r0
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	601a      	str	r2, [r3, #0]
	return *this;
 80129c2:	687b      	ldr	r3, [r7, #4]
      }
 80129c4:	4618      	mov	r0, r3
 80129c6:	3708      	adds	r7, #8
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr() const
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	3310      	adds	r3, #16
 80129d8:	4618      	mov	r0, r3
 80129da:	f000 f8e9 	bl	8012bb0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 80129de:	4603      	mov	r3, r0
 80129e0:	4618      	mov	r0, r3
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	4618      	mov	r0, r3
 80129f4:	370c      	adds	r7, #12
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr

080129fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b082      	sub	sp, #8
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
 8012a06:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8012a08:	6838      	ldr	r0, [r7, #0]
 8012a0a:	f000 f8dd 	bl	8012bc8 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>
	}
 8012a0e:	bf00      	nop
 8012a10:	3708      	adds	r7, #8
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}

08012a16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012a16:	b580      	push	{r7, lr}
 8012a18:	b088      	sub	sp, #32
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	60f8      	str	r0, [r7, #12]
 8012a1e:	60b9      	str	r1, [r7, #8]
 8012a20:	607a      	str	r2, [r7, #4]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	61fb      	str	r3, [r7, #28]
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	61bb      	str	r3, [r7, #24]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012a2e:	f7f2 fdd2 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d003      	beq.n	8012a40 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8012a38:	69b8      	ldr	r0, [r7, #24]
 8012a3a:	f000 fb8d 	bl	8013158 <_ZdlPv>
	    return;
 8012a3e:	e005      	b.n	8012a4c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012a40:	697a      	ldr	r2, [r7, #20]
 8012a42:	69b9      	ldr	r1, [r7, #24]
 8012a44:	69f8      	ldr	r0, [r7, #28]
 8012a46:	f000 f900 	bl	8012c4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8012a4a:	bf00      	nop
 8012a4c:	bf00      	nop
 8012a4e:	3720      	adds	r7, #32
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8012a54:	b480      	push	{r7}
 8012a56:	b083      	sub	sp, #12
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4618      	mov	r0, r3
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>:
	  operator()(_Arg&& __arg) const
 8012a6c:	b590      	push	{r4, r7, lr}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681c      	ldr	r4, [r3, #0]
 8012a7a:	6838      	ldr	r0, [r7, #0]
 8012a7c:	f7ff fe0f 	bl	801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012a80:	4603      	mov	r3, r0
 8012a82:	4619      	mov	r1, r3
 8012a84:	4620      	mov	r0, r4
 8012a86:	f000 f8a9 	bl	8012bdc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	370c      	adds	r7, #12
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd90      	pop	{r4, r7, pc}

08012a94 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8012a94:	b480      	push	{r7}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	370c      	adds	r7, #12
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr

08012aaa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b082      	sub	sp, #8
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
 8012ab2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8012ab4:	6838      	ldr	r0, [r7, #0]
 8012ab6:	f000 f8a8 	bl	8012c0a <_ZSt10destroy_atISt4pairIKmmEEvPT_>
	}
 8012aba:	bf00      	nop
 8012abc:	3708      	adds	r7, #8
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b088      	sub	sp, #32
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	60f8      	str	r0, [r7, #12]
 8012aca:	60b9      	str	r1, [r7, #8]
 8012acc:	607a      	str	r2, [r7, #4]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	61fb      	str	r3, [r7, #28]
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	61bb      	str	r3, [r7, #24]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012ada:	f7f2 fd7c 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d003      	beq.n	8012aec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8012ae4:	69b8      	ldr	r0, [r7, #24]
 8012ae6:	f000 fb37 	bl	8013158 <_ZdlPv>
	    return;
 8012aea:	e005      	b.n	8012af8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012aec:	697a      	ldr	r2, [r7, #20]
 8012aee:	69b9      	ldr	r1, [r7, #24]
 8012af0:	69f8      	ldr	r0, [r7, #28]
 8012af2:	f000 f8db 	bl	8012cac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8012af6:	bf00      	nop
 8012af8:	bf00      	nop
 8012afa:	3720      	adds	r7, #32
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() noexcept
 8012b00:	b480      	push	{r7}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	370c      	adds	r7, #12
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr

08012b16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8012b16:	b580      	push	{r7, lr}
 8012b18:	b084      	sub	sp, #16
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
 8012b1e:	6039      	str	r1, [r7, #0]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	60fb      	str	r3, [r7, #12]
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012b28:	f7f2 fd55 	bl	80055d6 <_ZSt21is_constant_evaluatedv>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d009      	beq.n	8012b46 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012b32:	68ba      	ldr	r2, [r7, #8]
 8012b34:	4613      	mov	r3, r2
 8012b36:	005b      	lsls	r3, r3, #1
 8012b38:	4413      	add	r3, r2
 8012b3a:	00db      	lsls	r3, r3, #3
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f000 fb0f 	bl	8013160 <_Znwj>
 8012b42:	4603      	mov	r3, r0
 8012b44:	e006      	b.n	8012b54 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012b46:	2200      	movs	r2, #0
 8012b48:	68b9      	ldr	r1, [r7, #8]
 8012b4a:	68f8      	ldr	r0, [r7, #12]
 8012b4c:	f000 f8c0 	bl	8012cd0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>
 8012b50:	4603      	mov	r3, r0
 8012b52:	bf00      	nop
      { return __a.allocate(__n); }
 8012b54:	4618      	mov	r0, r3
 8012b56:	3710      	adds	r7, #16
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}

08012b5c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	68da      	ldr	r2, [r3, #12]
 8012b68:	f107 030c 	add.w	r3, r7, #12
 8012b6c:	4611      	mov	r1, r2
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ff fd23 	bl	80125ba <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}

08012b7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b084      	sub	sp, #16
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	60f8      	str	r0, [r7, #12]
 8012b86:	60b9      	str	r1, [r7, #8]
 8012b88:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8012b8a:	68b8      	ldr	r0, [r7, #8]
 8012b8c:	f000 f847 	bl	8012c1e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8012b90:	4603      	mov	r3, r0
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	601a      	str	r2, [r3, #0]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7f7 fc82 	bl	800a4a2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	605a      	str	r2, [r3, #4]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3710      	adds	r7, #16
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f000 f83b 	bl	8012c34 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8012bc8:	b480      	push	{r7}
 8012bca:	b083      	sub	sp, #12
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
    }
 8012bd0:	bf00      	nop
 8012bd2:	370c      	adds	r7, #12
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr

08012bdc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b084      	sub	sp, #16
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7ff fdf7 	bl	80127da <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>
 8012bec:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8012bee:	6838      	ldr	r0, [r7, #0]
 8012bf0:	f7ff fd55 	bl	801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	68f9      	ldr	r1, [r7, #12]
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f000 f836 	bl	8012c6c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 8012c00:	68fb      	ldr	r3, [r7, #12]
	}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3710      	adds	r7, #16
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <_ZSt10destroy_atISt4pairIKmmEEvPT_>:
    destroy_at(_Tp* __location)
 8012c0a:	b480      	push	{r7}
 8012c0c:	b083      	sub	sp, #12
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
    }
 8012c12:	bf00      	nop
 8012c14:	370c      	adds	r7, #12
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr

08012c1e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012c1e:	b480      	push	{r7}
 8012c20:	b083      	sub	sp, #12
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	370c      	adds	r7, #12
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr

08012c34 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() const noexcept
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	370c      	adds	r7, #12
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr

08012c4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b084      	sub	sp, #16
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	60f8      	str	r0, [r7, #12]
 8012c52:	60b9      	str	r1, [r7, #8]
 8012c54:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2234      	movs	r2, #52	; 0x34
 8012c5a:	fb02 f303 	mul.w	r3, r2, r3
 8012c5e:	4619      	mov	r1, r3
 8012c60:	68b8      	ldr	r0, [r7, #8]
 8012c62:	f000 fa7b 	bl	801315c <_ZdlPvj>
      }
 8012c66:	3710      	adds	r7, #16
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012c6c:	b5b0      	push	{r4, r5, r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	2018      	movs	r0, #24
 8012c7e:	f7f2 fcb2 	bl	80055e6 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f7ff ff06 	bl	8012a94 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8012c88:	4604      	mov	r4, r0
 8012c8a:	68b8      	ldr	r0, [r7, #8]
 8012c8c:	f7ff fb51 	bl	8012332 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8012c90:	4605      	mov	r5, r0
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f7ff fd03 	bl	801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	f000 f852 	bl	8012d48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	}
 8012ca4:	bf00      	nop
 8012ca6:	3710      	adds	r7, #16
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bdb0      	pop	{r4, r5, r7, pc}

08012cac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	4613      	mov	r3, r2
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	4413      	add	r3, r2
 8012cc0:	00db      	lsls	r3, r3, #3
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	68b8      	ldr	r0, [r7, #8]
 8012cc6:	f000 fa49 	bl	801315c <_ZdlPvj>
      }
 8012cca:	3710      	adds	r7, #16
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	60b9      	str	r1, [r7, #8]
 8012cda:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f000 f845 	bl	8012d6c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	4293      	cmp	r3, r2
 8012ce8:	bf8c      	ite	hi
 8012cea:	2301      	movhi	r3, #1
 8012cec:	2300      	movls	r3, #0
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d001      	beq.n	8012cf8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8012cf4:	f000 faf8 	bl	80132e8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012cf8:	68ba      	ldr	r2, [r7, #8]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	005b      	lsls	r3, r3, #1
 8012cfe:	4413      	add	r3, r2
 8012d00:	00db      	lsls	r3, r3, #3
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 fa2c 	bl	8013160 <_Znwj>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	bf00      	nop
      }
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3710      	adds	r7, #16
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012d14:	b5b0      	push	{r4, r5, r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012d1e:	6838      	ldr	r0, [r7, #0]
 8012d20:	f7ff fcbd 	bl	801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012d24:	4605      	mov	r5, r0
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4619      	mov	r1, r3
 8012d2a:	2008      	movs	r0, #8
 8012d2c:	f7f2 fc5b 	bl	80055e6 <_ZnwjPv>
 8012d30:	4604      	mov	r4, r0
 8012d32:	4623      	mov	r3, r4
 8012d34:	462a      	mov	r2, r5
 8012d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8012d3e:	4623      	mov	r3, r4
 8012d40:	4618      	mov	r0, r3
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bdb0      	pop	{r4, r5, r7, pc}

08012d48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	60b9      	str	r1, [r7, #8]
 8012d52:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f7ff fca2 	bl	801269e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	68b8      	ldr	r0, [r7, #8]
 8012d60:	f7ff ffd8 	bl	8012d14 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 8012d64:	bf00      	nop
 8012d66:	3710      	adds	r7, #16
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012d74:	4b03      	ldr	r3, [pc, #12]	; (8012d84 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv+0x18>)
      }
 8012d76:	4618      	mov	r0, r3
 8012d78:	370c      	adds	r7, #12
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d80:	4770      	bx	lr
 8012d82:	bf00      	nop
 8012d84:	05555555 	.word	0x05555555

08012d88 <_Z41__static_initialization_and_destruction_0ii>:
		float falling_value = HAL_TIM_ReadCapturedValue(htim, instance.channel_falling);

		InputCapture::instances[instance.id].frequency = round(ref_clock / rising_value);
		InputCapture::instances[instance.id].duty_cycle = round((falling_value * 100) / rising_value);
	}
}
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b0d8      	sub	sp, #352	; 0x160
 8012d8c:	af02      	add	r7, sp, #8
 8012d8e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012d92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012d96:	6018      	str	r0, [r3, #0]
 8012d98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012d9c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8012da0:	6019      	str	r1, [r3, #0]
 8012da2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012da6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	f040 8088 	bne.w	8012ec2 <_Z41__static_initialization_and_destruction_0ii+0x13a>
 8012db2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012db6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	d17e      	bne.n	8012ec2 <_Z41__static_initialization_and_destruction_0ii+0x13a>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8012dc4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012dc8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012dcc:	4a4c      	ldr	r2, [pc, #304]	; (8012f00 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8012dce:	4618      	mov	r0, r3
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	f000 fb20 	bl	801341c <memcpy>
 8012ddc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012de0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012de4:	f107 0214 	add.w	r2, r7, #20
 8012de8:	601a      	str	r2, [r3, #0]
 8012dea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012dee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012df6:	605a      	str	r2, [r3, #4]
 8012df8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7f4 f95e 	bl	80070be <_ZNSaIhEC1Ev>
 8012e02:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8012e06:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8012e0a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8012e0e:	ca06      	ldmia	r2, {r1, r2}
 8012e10:	483c      	ldr	r0, [pc, #240]	; (8012f04 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8012e12:	f7f4 f96b 	bl	80070ec <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012e16:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7f4 f95b 	bl	80070d6 <_ZNSaIhED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 8012e20:	4b39      	ldr	r3, [pc, #228]	; (8012f08 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8012e22:	461a      	mov	r2, r3
 8012e24:	2300      	movs	r3, #0
 8012e26:	6013      	str	r3, [r2, #0]
 8012e28:	6053      	str	r3, [r2, #4]
 8012e2a:	6093      	str	r3, [r2, #8]
 8012e2c:	60d3      	str	r3, [r2, #12]
 8012e2e:	6113      	str	r3, [r2, #16]
 8012e30:	6153      	str	r3, [r2, #20]
 8012e32:	4835      	ldr	r0, [pc, #212]	; (8012f08 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8012e34:	f7fe ff67 	bl	8011d06 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
static map<uint32_t, uint32_t> channel_dict = {
 8012e38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012e3c:	2230      	movs	r2, #48	; 0x30
 8012e3e:	2100      	movs	r1, #0
 8012e40:	4618      	mov	r0, r3
 8012e42:	f000 fb13 	bl	801346c <memset>
 8012e46:	2301      	movs	r3, #1
 8012e48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012e4c:	2302      	movs	r3, #2
 8012e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012e52:	2304      	movs	r3, #4
 8012e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012e58:	2304      	movs	r3, #4
 8012e5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012e5e:	2308      	movs	r3, #8
 8012e60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8012e64:	2308      	movs	r3, #8
 8012e66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012e6a:	230c      	movs	r3, #12
 8012e6c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8012e70:	2310      	movs	r3, #16
 8012e72:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8012e76:	2310      	movs	r3, #16
 8012e78:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8012e7c:	2320      	movs	r3, #32
 8012e7e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8012e82:	2314      	movs	r3, #20
 8012e84:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8012e88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012e8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012e90:	2306      	movs	r3, #6
 8012e92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8012e96:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fe ffae 	bl	8011dfc <_ZNSaISt4pairIKmmEEC1Ev>
 8012ea0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8012ea4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8012ea8:	9300      	str	r3, [sp, #0]
 8012eaa:	4613      	mov	r3, r2
 8012eac:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8012eb0:	ca06      	ldmia	r2, {r1, r2}
 8012eb2:	4816      	ldr	r0, [pc, #88]	; (8012f0c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8012eb4:	f7fe ffb9 	bl	8011e2a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>
 8012eb8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7fe ffa9 	bl	8011e14 <_ZNSaISt4pairIKmmEED1Ev>
 8012ec2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012ec6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d111      	bne.n	8012ef4 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 8012ed0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012ed4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d108      	bne.n	8012ef4 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 8012ee2:	480a      	ldr	r0, [pc, #40]	; (8012f0c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8012ee4:	f7fe ff29 	bl	8011d3a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 8012ee8:	4807      	ldr	r0, [pc, #28]	; (8012f08 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8012eea:	f7fe ff19 	bl	8011d20 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8012eee:	4805      	ldr	r0, [pc, #20]	; (8012f04 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8012ef0:	f7f4 f92a 	bl	8007148 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 8012ef4:	bf00      	nop
 8012ef6:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	08013c70 	.word	0x08013c70
 8012f04:	24000e40 	.word	0x24000e40
 8012f08:	24000e44 	.word	0x24000e44
 8012f0c:	24000e5c 	.word	0x24000e5c

08012f10 <_GLOBAL__sub_I__ZN12InputCapture10id_managerE>:
 8012f10:	b580      	push	{r7, lr}
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012f18:	2001      	movs	r0, #1
 8012f1a:	f7ff ff35 	bl	8012d88 <_Z41__static_initialization_and_destruction_0ii>
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <_GLOBAL__sub_D__ZN12InputCapture10id_managerE>:
 8012f20:	b580      	push	{r7, lr}
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012f28:	2000      	movs	r0, #0
 8012f2a:	f7ff ff2d 	bl	8012d88 <_Z41__static_initialization_and_destruction_0ii>
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <_ZN13DigitalOutputC1ER3Pin>:
 *      Author: aleja
 */

#include "Actuator/DigitalOutput/DigitalOutput.hpp"

DigitalOutput::DigitalOutput(Pin& pin) : pin(pin) {
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	6039      	str	r1, [r7, #0]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	683a      	ldr	r2, [r7, #0]
 8012f3e:	3304      	adds	r3, #4
 8012f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f44:	e883 0003 	stmia.w	r3, {r0, r1}
	optional<uint8_t> try_id = DigitalOutputservice::inscribe(pin);
 8012f48:	6838      	ldr	r0, [r7, #0]
 8012f4a:	f000 f82b 	bl	8012fa4 <_ZN20DigitalOutputservice8inscribeER3Pin>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	73fb      	strb	r3, [r7, #15]
 8012f52:	f107 020f 	add.w	r2, r7, #15
 8012f56:	f107 030c 	add.w	r3, r7, #12
 8012f5a:	4611      	mov	r1, r2
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7f4 fa80 	bl	8007462 <_ZNSt8optionalIhEC1IhLb1EEEOT_>
		if (not try_id) {
 8012f62:	f107 030c 	add.w	r3, r7, #12
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7f8 f9f3 	bl	800b352 <_ZNKSt8optionalIhEcvbEv>
			//TODO: error handler
		}

		id = try_id.value();
 8012f6c:	f107 030c 	add.w	r3, r7, #12
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7f8 fa06 	bl	800b382 <_ZNRSt8optionalIhE5valueEv>
 8012f76:	4603      	mov	r3, r0
 8012f78:	781a      	ldrb	r2, [r3, #0]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	701a      	strb	r2, [r3, #0]
}
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4618      	mov	r0, r3
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <_ZN13DigitalOutput7turn_onEv>:

void DigitalOutput::turn_on() {
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
	DigitalOutputservice::turn_on(id);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 f82d 	bl	8012ff4 <_ZN20DigitalOutputservice7turn_onEh>
}
 8012f9a:	bf00      	nop
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
	...

08012fa4 <_ZN20DigitalOutputservice8inscribeER3Pin>:
#include "DigitalOutputservice/DigitalOutputservice.hpp"

forward_list<uint8_t> DigitalOutputservice::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t,Pin> DigitalOutputservice::service_ids = {};

uint8_t DigitalOutputservice::inscribe(Pin& pin){
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
        Pin::inscribe(pin, OUTPUT);
 8012fac:	2102      	movs	r1, #2
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f7f2 fb5e 	bl	8005670 <_ZN3Pin8inscribeERS_14Operation_Mode>
		uint8_t id = DigitalOutputservice::id_manager.front();
 8012fb4:	480d      	ldr	r0, [pc, #52]	; (8012fec <_ZN20DigitalOutputservice8inscribeER3Pin+0x48>)
 8012fb6:	f7f4 f9b6 	bl	8007326 <_ZNSt12forward_listIhSaIhEE5frontEv>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	73fb      	strb	r3, [r7, #15]
		DigitalOutputservice::service_ids[id] = pin;
 8012fc0:	f107 030f 	add.w	r3, r7, #15
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	480a      	ldr	r0, [pc, #40]	; (8012ff0 <_ZN20DigitalOutputservice8inscribeER3Pin+0x4c>)
 8012fc8:	f7fd fc1e 	bl	8010808 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	6811      	ldr	r1, [r2, #0]
 8012fd2:	6019      	str	r1, [r3, #0]
 8012fd4:	8891      	ldrh	r1, [r2, #4]
 8012fd6:	7992      	ldrb	r2, [r2, #6]
 8012fd8:	8099      	strh	r1, [r3, #4]
 8012fda:	719a      	strb	r2, [r3, #6]
		DigitalOutputservice::id_manager.pop_front();
 8012fdc:	4803      	ldr	r0, [pc, #12]	; (8012fec <_ZN20DigitalOutputservice8inscribeER3Pin+0x48>)
 8012fde:	f7f4 fa0d 	bl	80073fc <_ZNSt12forward_listIhSaIhEE9pop_frontEv>
		return id;
 8012fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	24000e74 	.word	0x24000e74
 8012ff0:	24000e78 	.word	0x24000e78

08012ff4 <_ZN20DigitalOutputservice7turn_onEh>:

	Pin pin = DigitalOutputservice::service_ids[id];
	HAL_GPIO_WritePin(pin.port, pin.gpio_pin, (GPIO_PinState)PinState::OFF);
}

void DigitalOutputservice::turn_on(uint8_t id){
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	71fb      	strb	r3, [r7, #7]
	if (not DigitalOutputservice::service_ids.contains(id))
 8012ffe:	1dfb      	adds	r3, r7, #7
 8013000:	4619      	mov	r1, r3
 8013002:	4810      	ldr	r0, [pc, #64]	; (8013044 <_ZN20DigitalOutputservice7turn_onEh+0x50>)
 8013004:	f7fd fc77 	bl	80108f6 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 8013008:	4603      	mov	r3, r0
 801300a:	f083 0301 	eor.w	r3, r3, #1
 801300e:	b2db      	uxtb	r3, r3
 8013010:	2b00      	cmp	r3, #0
 8013012:	d112      	bne.n	801303a <_ZN20DigitalOutputservice7turn_onEh+0x46>
		return;

	Pin pin = DigitalOutputservice::service_ids[id];
 8013014:	1dfb      	adds	r3, r7, #7
 8013016:	4619      	mov	r1, r3
 8013018:	480a      	ldr	r0, [pc, #40]	; (8013044 <_ZN20DigitalOutputservice7turn_onEh+0x50>)
 801301a:	f7fd fbf5 	bl	8010808 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801301e:	4602      	mov	r2, r0
 8013020:	f107 0308 	add.w	r3, r7, #8
 8013024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013028:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(pin.port, pin.gpio_pin, (GPIO_PinState)PinState::ON);
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	89b9      	ldrh	r1, [r7, #12]
 8013030:	2201      	movs	r2, #1
 8013032:	4618      	mov	r0, r3
 8013034:	f7ef f9ea 	bl	800240c <HAL_GPIO_WritePin>
 8013038:	e000      	b.n	801303c <_ZN20DigitalOutputservice7turn_onEh+0x48>
		return;
 801303a:	bf00      	nop
}
 801303c:	3710      	adds	r7, #16
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	24000e78 	.word	0x24000e78

08013048 <_Z41__static_initialization_and_destruction_0ii>:
	if (not DigitalOutputservice::service_ids.contains(id))
		return;

	Pin pin = DigitalOutputservice::service_ids[id];
	HAL_GPIO_WritePin(pin.port, pin.gpio_pin, (GPIO_PinState) state);
}
 8013048:	b580      	push	{r7, lr}
 801304a:	b0c6      	sub	sp, #280	; 0x118
 801304c:	af00      	add	r7, sp, #0
 801304e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013052:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013056:	6018      	str	r0, [r3, #0]
 8013058:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801305c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013060:	6019      	str	r1, [r3, #0]
 8013062:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013066:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	2b01      	cmp	r3, #1
 801306e:	d142      	bne.n	80130f6 <_Z41__static_initialization_and_destruction_0ii+0xae>
 8013070:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013074:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801307e:	4293      	cmp	r3, r2
 8013080:	d139      	bne.n	80130f6 <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> DigitalOutputservice::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8013082:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801308a:	4a28      	ldr	r2, [pc, #160]	; (801312c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 801308c:	4618      	mov	r0, r3
 801308e:	4611      	mov	r1, r2
 8013090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013094:	461a      	mov	r2, r3
 8013096:	f000 f9c1 	bl	801341c <memcpy>
 801309a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801309e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80130a2:	f107 0214 	add.w	r2, r7, #20
 80130a6:	601a      	str	r2, [r3, #0]
 80130a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80130ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80130b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130b4:	605a      	str	r2, [r3, #4]
 80130b6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f3 ffff 	bl	80070be <_ZNSaIhEC1Ev>
 80130c0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80130c4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80130c8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80130cc:	ca06      	ldmia	r2, {r1, r2}
 80130ce:	4818      	ldr	r0, [pc, #96]	; (8013130 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80130d0:	f7f4 f80c 	bl	80070ec <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80130d4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80130d8:	4618      	mov	r0, r3
 80130da:	f7f3 fffc 	bl	80070d6 <_ZNSaIhED1Ev>
map<uint8_t,Pin> DigitalOutputservice::service_ids = {};
 80130de:	4b15      	ldr	r3, [pc, #84]	; (8013134 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80130e0:	461a      	mov	r2, r3
 80130e2:	2300      	movs	r3, #0
 80130e4:	6013      	str	r3, [r2, #0]
 80130e6:	6053      	str	r3, [r2, #4]
 80130e8:	6093      	str	r3, [r2, #8]
 80130ea:	60d3      	str	r3, [r2, #12]
 80130ec:	6113      	str	r3, [r2, #16]
 80130ee:	6153      	str	r3, [r2, #20]
 80130f0:	4810      	ldr	r0, [pc, #64]	; (8013134 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80130f2:	f7fd fa88 	bl	8010606 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 80130f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80130fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10e      	bne.n	8013122 <_Z41__static_initialization_and_destruction_0ii+0xda>
 8013104:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013108:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013112:	4293      	cmp	r3, r2
 8013114:	d105      	bne.n	8013122 <_Z41__static_initialization_and_destruction_0ii+0xda>
 8013116:	4807      	ldr	r0, [pc, #28]	; (8013134 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8013118:	f7fd fa82 	bl	8010620 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
forward_list<uint8_t> DigitalOutputservice::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801311c:	4804      	ldr	r0, [pc, #16]	; (8013130 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 801311e:	f7f4 f813 	bl	8007148 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 8013122:	bf00      	nop
 8013124:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	08013d70 	.word	0x08013d70
 8013130:	24000e74 	.word	0x24000e74
 8013134:	24000e78 	.word	0x24000e78

08013138 <_GLOBAL__sub_I__ZN20DigitalOutputservice10id_managerE>:
 8013138:	b580      	push	{r7, lr}
 801313a:	af00      	add	r7, sp, #0
 801313c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013140:	2001      	movs	r0, #1
 8013142:	f7ff ff81 	bl	8013048 <_Z41__static_initialization_and_destruction_0ii>
 8013146:	bd80      	pop	{r7, pc}

08013148 <_GLOBAL__sub_D__ZN20DigitalOutputservice10id_managerE>:
 8013148:	b580      	push	{r7, lr}
 801314a:	af00      	add	r7, sp, #0
 801314c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013150:	2000      	movs	r0, #0
 8013152:	f7ff ff79 	bl	8013048 <_Z41__static_initialization_and_destruction_0ii>
 8013156:	bd80      	pop	{r7, pc}

08013158 <_ZdlPv>:
 8013158:	f000 b958 	b.w	801340c <free>

0801315c <_ZdlPvj>:
 801315c:	f7ff bffc 	b.w	8013158 <_ZdlPv>

08013160 <_Znwj>:
 8013160:	2801      	cmp	r0, #1
 8013162:	bf38      	it	cc
 8013164:	2001      	movcc	r0, #1
 8013166:	b510      	push	{r4, lr}
 8013168:	4604      	mov	r4, r0
 801316a:	4620      	mov	r0, r4
 801316c:	f000 f946 	bl	80133fc <malloc>
 8013170:	b930      	cbnz	r0, 8013180 <_Znwj+0x20>
 8013172:	f000 f8c3 	bl	80132fc <_ZSt15get_new_handlerv>
 8013176:	b908      	cbnz	r0, 801317c <_Znwj+0x1c>
 8013178:	f000 f90e 	bl	8013398 <abort>
 801317c:	4780      	blx	r0
 801317e:	e7f4      	b.n	801316a <_Znwj+0xa>
 8013180:	bd10      	pop	{r4, pc}

08013182 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8013182:	68c3      	ldr	r3, [r0, #12]
 8013184:	689a      	ldr	r2, [r3, #8]
 8013186:	60c2      	str	r2, [r0, #12]
 8013188:	b510      	push	{r4, lr}
 801318a:	b102      	cbz	r2, 801318e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 801318c:	6050      	str	r0, [r2, #4]
 801318e:	6842      	ldr	r2, [r0, #4]
 8013190:	605a      	str	r2, [r3, #4]
 8013192:	680c      	ldr	r4, [r1, #0]
 8013194:	4284      	cmp	r4, r0
 8013196:	d103      	bne.n	80131a0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8013198:	600b      	str	r3, [r1, #0]
 801319a:	6098      	str	r0, [r3, #8]
 801319c:	6043      	str	r3, [r0, #4]
 801319e:	bd10      	pop	{r4, pc}
 80131a0:	6891      	ldr	r1, [r2, #8]
 80131a2:	4281      	cmp	r1, r0
 80131a4:	bf0c      	ite	eq
 80131a6:	6093      	streq	r3, [r2, #8]
 80131a8:	60d3      	strne	r3, [r2, #12]
 80131aa:	e7f6      	b.n	801319a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080131ac <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80131ac:	6883      	ldr	r3, [r0, #8]
 80131ae:	68da      	ldr	r2, [r3, #12]
 80131b0:	6082      	str	r2, [r0, #8]
 80131b2:	b510      	push	{r4, lr}
 80131b4:	b102      	cbz	r2, 80131b8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80131b6:	6050      	str	r0, [r2, #4]
 80131b8:	6842      	ldr	r2, [r0, #4]
 80131ba:	605a      	str	r2, [r3, #4]
 80131bc:	680c      	ldr	r4, [r1, #0]
 80131be:	4284      	cmp	r4, r0
 80131c0:	d103      	bne.n	80131ca <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80131c2:	600b      	str	r3, [r1, #0]
 80131c4:	60d8      	str	r0, [r3, #12]
 80131c6:	6043      	str	r3, [r0, #4]
 80131c8:	bd10      	pop	{r4, pc}
 80131ca:	68d1      	ldr	r1, [r2, #12]
 80131cc:	4281      	cmp	r1, r0
 80131ce:	bf0c      	ite	eq
 80131d0:	60d3      	streq	r3, [r2, #12]
 80131d2:	6093      	strne	r3, [r2, #8]
 80131d4:	e7f6      	b.n	80131c4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080131d6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80131d6:	68c3      	ldr	r3, [r0, #12]
 80131d8:	b123      	cbz	r3, 80131e4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80131da:	4618      	mov	r0, r3
 80131dc:	689b      	ldr	r3, [r3, #8]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d1fb      	bne.n	80131da <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80131e2:	4770      	bx	lr
 80131e4:	6843      	ldr	r3, [r0, #4]
 80131e6:	68da      	ldr	r2, [r3, #12]
 80131e8:	4282      	cmp	r2, r0
 80131ea:	d102      	bne.n	80131f2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80131ec:	4618      	mov	r0, r3
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	e7f9      	b.n	80131e6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80131f2:	68c2      	ldr	r2, [r0, #12]
 80131f4:	4293      	cmp	r3, r2
 80131f6:	bf18      	it	ne
 80131f8:	4618      	movne	r0, r3
 80131fa:	4770      	bx	lr

080131fc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80131fc:	7803      	ldrb	r3, [r0, #0]
 80131fe:	b933      	cbnz	r3, 801320e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8013200:	6843      	ldr	r3, [r0, #4]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	4283      	cmp	r3, r0
 8013206:	d102      	bne.n	801320e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	4618      	mov	r0, r3
 801320c:	4770      	bx	lr
 801320e:	6882      	ldr	r2, [r0, #8]
 8013210:	b122      	cbz	r2, 801321c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8013212:	4613      	mov	r3, r2
 8013214:	68d2      	ldr	r2, [r2, #12]
 8013216:	2a00      	cmp	r2, #0
 8013218:	d1fb      	bne.n	8013212 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 801321a:	e7f6      	b.n	801320a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801321c:	6843      	ldr	r3, [r0, #4]
 801321e:	689a      	ldr	r2, [r3, #8]
 8013220:	4282      	cmp	r2, r0
 8013222:	d1f2      	bne.n	801320a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8013224:	4618      	mov	r0, r3
 8013226:	685b      	ldr	r3, [r3, #4]
 8013228:	e7f9      	b.n	801321e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0801322a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 801322a:	f7ff bfd4 	b.w	80131d6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0801322e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801322e:	f7ff bfe5 	b.w	80131fc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08013232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8013232:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013236:	461e      	mov	r6, r3
 8013238:	f103 0804 	add.w	r8, r3, #4
 801323c:	2300      	movs	r3, #0
 801323e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8013242:	460c      	mov	r4, r1
 8013244:	604a      	str	r2, [r1, #4]
 8013246:	700b      	strb	r3, [r1, #0]
 8013248:	b300      	cbz	r0, 801328c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 801324a:	4296      	cmp	r6, r2
 801324c:	6091      	str	r1, [r2, #8]
 801324e:	d118      	bne.n	8013282 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8013250:	6071      	str	r1, [r6, #4]
 8013252:	60f4      	str	r4, [r6, #12]
 8013254:	2701      	movs	r7, #1
 8013256:	f04f 0900 	mov.w	r9, #0
 801325a:	6873      	ldr	r3, [r6, #4]
 801325c:	42a3      	cmp	r3, r4
 801325e:	d03f      	beq.n	80132e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8013260:	6860      	ldr	r0, [r4, #4]
 8013262:	7802      	ldrb	r2, [r0, #0]
 8013264:	2a00      	cmp	r2, #0
 8013266:	d13b      	bne.n	80132e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8013268:	6845      	ldr	r5, [r0, #4]
 801326a:	68ab      	ldr	r3, [r5, #8]
 801326c:	4298      	cmp	r0, r3
 801326e:	d123      	bne.n	80132b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8013270:	68eb      	ldr	r3, [r5, #12]
 8013272:	b183      	cbz	r3, 8013296 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8013274:	781a      	ldrb	r2, [r3, #0]
 8013276:	b972      	cbnz	r2, 8013296 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8013278:	7007      	strb	r7, [r0, #0]
 801327a:	701f      	strb	r7, [r3, #0]
 801327c:	702a      	strb	r2, [r5, #0]
 801327e:	462c      	mov	r4, r5
 8013280:	e7eb      	b.n	801325a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8013282:	68b3      	ldr	r3, [r6, #8]
 8013284:	4293      	cmp	r3, r2
 8013286:	d1e5      	bne.n	8013254 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8013288:	60b1      	str	r1, [r6, #8]
 801328a:	e7e3      	b.n	8013254 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801328c:	60d1      	str	r1, [r2, #12]
 801328e:	68f3      	ldr	r3, [r6, #12]
 8013290:	4293      	cmp	r3, r2
 8013292:	d1df      	bne.n	8013254 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8013294:	e7dd      	b.n	8013252 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8013296:	68c3      	ldr	r3, [r0, #12]
 8013298:	42a3      	cmp	r3, r4
 801329a:	d103      	bne.n	80132a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 801329c:	4641      	mov	r1, r8
 801329e:	f7ff ff70 	bl	8013182 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80132a2:	4604      	mov	r4, r0
 80132a4:	6863      	ldr	r3, [r4, #4]
 80132a6:	4641      	mov	r1, r8
 80132a8:	701f      	strb	r7, [r3, #0]
 80132aa:	4628      	mov	r0, r5
 80132ac:	f885 9000 	strb.w	r9, [r5]
 80132b0:	f7ff ff7c 	bl	80131ac <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80132b4:	4625      	mov	r5, r4
 80132b6:	e7e2      	b.n	801327e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80132b8:	b113      	cbz	r3, 80132c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80132ba:	781a      	ldrb	r2, [r3, #0]
 80132bc:	2a00      	cmp	r2, #0
 80132be:	d0db      	beq.n	8013278 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80132c0:	6883      	ldr	r3, [r0, #8]
 80132c2:	42a3      	cmp	r3, r4
 80132c4:	d103      	bne.n	80132ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80132c6:	4641      	mov	r1, r8
 80132c8:	f7ff ff70 	bl	80131ac <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80132cc:	4604      	mov	r4, r0
 80132ce:	6863      	ldr	r3, [r4, #4]
 80132d0:	4641      	mov	r1, r8
 80132d2:	701f      	strb	r7, [r3, #0]
 80132d4:	4628      	mov	r0, r5
 80132d6:	f885 9000 	strb.w	r9, [r5]
 80132da:	f7ff ff52 	bl	8013182 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80132de:	e7e9      	b.n	80132b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80132e0:	2201      	movs	r2, #1
 80132e2:	701a      	strb	r2, [r3, #0]
 80132e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080132e8 <_ZSt17__throw_bad_allocv>:
 80132e8:	b508      	push	{r3, lr}
 80132ea:	f000 f855 	bl	8013398 <abort>

080132ee <_ZSt20__throw_length_errorPKc>:
 80132ee:	b508      	push	{r3, lr}
 80132f0:	f000 f852 	bl	8013398 <abort>

080132f4 <_ZSt25__throw_bad_function_callv>:
 80132f4:	b508      	push	{r3, lr}
 80132f6:	f000 f84f 	bl	8013398 <abort>
	...

080132fc <_ZSt15get_new_handlerv>:
 80132fc:	4b02      	ldr	r3, [pc, #8]	; (8013308 <_ZSt15get_new_handlerv+0xc>)
 80132fe:	6818      	ldr	r0, [r3, #0]
 8013300:	f3bf 8f5b 	dmb	ish
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	24000e90 	.word	0x24000e90

0801330c <round>:
 801330c:	ee10 1a90 	vmov	r1, s1
 8013310:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8013314:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8013318:	2a13      	cmp	r2, #19
 801331a:	b510      	push	{r4, lr}
 801331c:	ee10 3a10 	vmov	r3, s0
 8013320:	dc19      	bgt.n	8013356 <round+0x4a>
 8013322:	2a00      	cmp	r2, #0
 8013324:	da09      	bge.n	801333a <round+0x2e>
 8013326:	3201      	adds	r2, #1
 8013328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801332c:	d103      	bne.n	8013336 <round+0x2a>
 801332e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8013332:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013336:	2000      	movs	r0, #0
 8013338:	e026      	b.n	8013388 <round+0x7c>
 801333a:	4816      	ldr	r0, [pc, #88]	; (8013394 <round+0x88>)
 801333c:	4110      	asrs	r0, r2
 801333e:	ea01 0400 	and.w	r4, r1, r0
 8013342:	4323      	orrs	r3, r4
 8013344:	d00e      	beq.n	8013364 <round+0x58>
 8013346:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801334a:	fa43 f202 	asr.w	r2, r3, r2
 801334e:	4411      	add	r1, r2
 8013350:	ea21 0100 	bic.w	r1, r1, r0
 8013354:	e7ef      	b.n	8013336 <round+0x2a>
 8013356:	2a33      	cmp	r2, #51	; 0x33
 8013358:	dd05      	ble.n	8013366 <round+0x5a>
 801335a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801335e:	d101      	bne.n	8013364 <round+0x58>
 8013360:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013364:	bd10      	pop	{r4, pc}
 8013366:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 801336a:	f04f 30ff 	mov.w	r0, #4294967295
 801336e:	40e0      	lsrs	r0, r4
 8013370:	4203      	tst	r3, r0
 8013372:	d0f7      	beq.n	8013364 <round+0x58>
 8013374:	2401      	movs	r4, #1
 8013376:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 801337a:	fa04 f202 	lsl.w	r2, r4, r2
 801337e:	189b      	adds	r3, r3, r2
 8013380:	bf28      	it	cs
 8013382:	1909      	addcs	r1, r1, r4
 8013384:	ea23 0000 	bic.w	r0, r3, r0
 8013388:	460b      	mov	r3, r1
 801338a:	4602      	mov	r2, r0
 801338c:	ec43 2b10 	vmov	d0, r2, r3
 8013390:	e7e8      	b.n	8013364 <round+0x58>
 8013392:	bf00      	nop
 8013394:	000fffff 	.word	0x000fffff

08013398 <abort>:
 8013398:	b508      	push	{r3, lr}
 801339a:	2006      	movs	r0, #6
 801339c:	f000 f986 	bl	80136ac <raise>
 80133a0:	2001      	movs	r0, #1
 80133a2:	f7ed f95f 	bl	8000664 <_exit>
	...

080133a8 <__errno>:
 80133a8:	4b01      	ldr	r3, [pc, #4]	; (80133b0 <__errno+0x8>)
 80133aa:	6818      	ldr	r0, [r3, #0]
 80133ac:	4770      	bx	lr
 80133ae:	bf00      	nop
 80133b0:	24000010 	.word	0x24000010

080133b4 <__libc_init_array>:
 80133b4:	b570      	push	{r4, r5, r6, lr}
 80133b6:	4d0d      	ldr	r5, [pc, #52]	; (80133ec <__libc_init_array+0x38>)
 80133b8:	4c0d      	ldr	r4, [pc, #52]	; (80133f0 <__libc_init_array+0x3c>)
 80133ba:	1b64      	subs	r4, r4, r5
 80133bc:	10a4      	asrs	r4, r4, #2
 80133be:	2600      	movs	r6, #0
 80133c0:	42a6      	cmp	r6, r4
 80133c2:	d109      	bne.n	80133d8 <__libc_init_array+0x24>
 80133c4:	4d0b      	ldr	r5, [pc, #44]	; (80133f4 <__libc_init_array+0x40>)
 80133c6:	4c0c      	ldr	r4, [pc, #48]	; (80133f8 <__libc_init_array+0x44>)
 80133c8:	f000 f99a 	bl	8013700 <_init>
 80133cc:	1b64      	subs	r4, r4, r5
 80133ce:	10a4      	asrs	r4, r4, #2
 80133d0:	2600      	movs	r6, #0
 80133d2:	42a6      	cmp	r6, r4
 80133d4:	d105      	bne.n	80133e2 <__libc_init_array+0x2e>
 80133d6:	bd70      	pop	{r4, r5, r6, pc}
 80133d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80133dc:	4798      	blx	r3
 80133de:	3601      	adds	r6, #1
 80133e0:	e7ee      	b.n	80133c0 <__libc_init_array+0xc>
 80133e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80133e6:	4798      	blx	r3
 80133e8:	3601      	adds	r6, #1
 80133ea:	e7f2      	b.n	80133d2 <__libc_init_array+0x1e>
 80133ec:	08013e88 	.word	0x08013e88
 80133f0:	08013e88 	.word	0x08013e88
 80133f4:	08013e88 	.word	0x08013e88
 80133f8:	08013ea8 	.word	0x08013ea8

080133fc <malloc>:
 80133fc:	4b02      	ldr	r3, [pc, #8]	; (8013408 <malloc+0xc>)
 80133fe:	4601      	mov	r1, r0
 8013400:	6818      	ldr	r0, [r3, #0]
 8013402:	f000 b8a7 	b.w	8013554 <_malloc_r>
 8013406:	bf00      	nop
 8013408:	24000010 	.word	0x24000010

0801340c <free>:
 801340c:	4b02      	ldr	r3, [pc, #8]	; (8013418 <free+0xc>)
 801340e:	4601      	mov	r1, r0
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	f000 b833 	b.w	801347c <_free_r>
 8013416:	bf00      	nop
 8013418:	24000010 	.word	0x24000010

0801341c <memcpy>:
 801341c:	440a      	add	r2, r1
 801341e:	4291      	cmp	r1, r2
 8013420:	f100 33ff 	add.w	r3, r0, #4294967295
 8013424:	d100      	bne.n	8013428 <memcpy+0xc>
 8013426:	4770      	bx	lr
 8013428:	b510      	push	{r4, lr}
 801342a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801342e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013432:	4291      	cmp	r1, r2
 8013434:	d1f9      	bne.n	801342a <memcpy+0xe>
 8013436:	bd10      	pop	{r4, pc}

08013438 <memmove>:
 8013438:	4288      	cmp	r0, r1
 801343a:	b510      	push	{r4, lr}
 801343c:	eb01 0402 	add.w	r4, r1, r2
 8013440:	d902      	bls.n	8013448 <memmove+0x10>
 8013442:	4284      	cmp	r4, r0
 8013444:	4623      	mov	r3, r4
 8013446:	d807      	bhi.n	8013458 <memmove+0x20>
 8013448:	1e43      	subs	r3, r0, #1
 801344a:	42a1      	cmp	r1, r4
 801344c:	d008      	beq.n	8013460 <memmove+0x28>
 801344e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013456:	e7f8      	b.n	801344a <memmove+0x12>
 8013458:	4402      	add	r2, r0
 801345a:	4601      	mov	r1, r0
 801345c:	428a      	cmp	r2, r1
 801345e:	d100      	bne.n	8013462 <memmove+0x2a>
 8013460:	bd10      	pop	{r4, pc}
 8013462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801346a:	e7f7      	b.n	801345c <memmove+0x24>

0801346c <memset>:
 801346c:	4402      	add	r2, r0
 801346e:	4603      	mov	r3, r0
 8013470:	4293      	cmp	r3, r2
 8013472:	d100      	bne.n	8013476 <memset+0xa>
 8013474:	4770      	bx	lr
 8013476:	f803 1b01 	strb.w	r1, [r3], #1
 801347a:	e7f9      	b.n	8013470 <memset+0x4>

0801347c <_free_r>:
 801347c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801347e:	2900      	cmp	r1, #0
 8013480:	d044      	beq.n	801350c <_free_r+0x90>
 8013482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013486:	9001      	str	r0, [sp, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	f1a1 0404 	sub.w	r4, r1, #4
 801348e:	bfb8      	it	lt
 8013490:	18e4      	addlt	r4, r4, r3
 8013492:	f000 f927 	bl	80136e4 <__malloc_lock>
 8013496:	4a1e      	ldr	r2, [pc, #120]	; (8013510 <_free_r+0x94>)
 8013498:	9801      	ldr	r0, [sp, #4]
 801349a:	6813      	ldr	r3, [r2, #0]
 801349c:	b933      	cbnz	r3, 80134ac <_free_r+0x30>
 801349e:	6063      	str	r3, [r4, #4]
 80134a0:	6014      	str	r4, [r2, #0]
 80134a2:	b003      	add	sp, #12
 80134a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134a8:	f000 b922 	b.w	80136f0 <__malloc_unlock>
 80134ac:	42a3      	cmp	r3, r4
 80134ae:	d908      	bls.n	80134c2 <_free_r+0x46>
 80134b0:	6825      	ldr	r5, [r4, #0]
 80134b2:	1961      	adds	r1, r4, r5
 80134b4:	428b      	cmp	r3, r1
 80134b6:	bf01      	itttt	eq
 80134b8:	6819      	ldreq	r1, [r3, #0]
 80134ba:	685b      	ldreq	r3, [r3, #4]
 80134bc:	1949      	addeq	r1, r1, r5
 80134be:	6021      	streq	r1, [r4, #0]
 80134c0:	e7ed      	b.n	801349e <_free_r+0x22>
 80134c2:	461a      	mov	r2, r3
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	b10b      	cbz	r3, 80134cc <_free_r+0x50>
 80134c8:	42a3      	cmp	r3, r4
 80134ca:	d9fa      	bls.n	80134c2 <_free_r+0x46>
 80134cc:	6811      	ldr	r1, [r2, #0]
 80134ce:	1855      	adds	r5, r2, r1
 80134d0:	42a5      	cmp	r5, r4
 80134d2:	d10b      	bne.n	80134ec <_free_r+0x70>
 80134d4:	6824      	ldr	r4, [r4, #0]
 80134d6:	4421      	add	r1, r4
 80134d8:	1854      	adds	r4, r2, r1
 80134da:	42a3      	cmp	r3, r4
 80134dc:	6011      	str	r1, [r2, #0]
 80134de:	d1e0      	bne.n	80134a2 <_free_r+0x26>
 80134e0:	681c      	ldr	r4, [r3, #0]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	6053      	str	r3, [r2, #4]
 80134e6:	4421      	add	r1, r4
 80134e8:	6011      	str	r1, [r2, #0]
 80134ea:	e7da      	b.n	80134a2 <_free_r+0x26>
 80134ec:	d902      	bls.n	80134f4 <_free_r+0x78>
 80134ee:	230c      	movs	r3, #12
 80134f0:	6003      	str	r3, [r0, #0]
 80134f2:	e7d6      	b.n	80134a2 <_free_r+0x26>
 80134f4:	6825      	ldr	r5, [r4, #0]
 80134f6:	1961      	adds	r1, r4, r5
 80134f8:	428b      	cmp	r3, r1
 80134fa:	bf04      	itt	eq
 80134fc:	6819      	ldreq	r1, [r3, #0]
 80134fe:	685b      	ldreq	r3, [r3, #4]
 8013500:	6063      	str	r3, [r4, #4]
 8013502:	bf04      	itt	eq
 8013504:	1949      	addeq	r1, r1, r5
 8013506:	6021      	streq	r1, [r4, #0]
 8013508:	6054      	str	r4, [r2, #4]
 801350a:	e7ca      	b.n	80134a2 <_free_r+0x26>
 801350c:	b003      	add	sp, #12
 801350e:	bd30      	pop	{r4, r5, pc}
 8013510:	24000e94 	.word	0x24000e94

08013514 <sbrk_aligned>:
 8013514:	b570      	push	{r4, r5, r6, lr}
 8013516:	4e0e      	ldr	r6, [pc, #56]	; (8013550 <sbrk_aligned+0x3c>)
 8013518:	460c      	mov	r4, r1
 801351a:	6831      	ldr	r1, [r6, #0]
 801351c:	4605      	mov	r5, r0
 801351e:	b911      	cbnz	r1, 8013526 <sbrk_aligned+0x12>
 8013520:	f000 f88c 	bl	801363c <_sbrk_r>
 8013524:	6030      	str	r0, [r6, #0]
 8013526:	4621      	mov	r1, r4
 8013528:	4628      	mov	r0, r5
 801352a:	f000 f887 	bl	801363c <_sbrk_r>
 801352e:	1c43      	adds	r3, r0, #1
 8013530:	d00a      	beq.n	8013548 <sbrk_aligned+0x34>
 8013532:	1cc4      	adds	r4, r0, #3
 8013534:	f024 0403 	bic.w	r4, r4, #3
 8013538:	42a0      	cmp	r0, r4
 801353a:	d007      	beq.n	801354c <sbrk_aligned+0x38>
 801353c:	1a21      	subs	r1, r4, r0
 801353e:	4628      	mov	r0, r5
 8013540:	f000 f87c 	bl	801363c <_sbrk_r>
 8013544:	3001      	adds	r0, #1
 8013546:	d101      	bne.n	801354c <sbrk_aligned+0x38>
 8013548:	f04f 34ff 	mov.w	r4, #4294967295
 801354c:	4620      	mov	r0, r4
 801354e:	bd70      	pop	{r4, r5, r6, pc}
 8013550:	24000e98 	.word	0x24000e98

08013554 <_malloc_r>:
 8013554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013558:	1ccd      	adds	r5, r1, #3
 801355a:	f025 0503 	bic.w	r5, r5, #3
 801355e:	3508      	adds	r5, #8
 8013560:	2d0c      	cmp	r5, #12
 8013562:	bf38      	it	cc
 8013564:	250c      	movcc	r5, #12
 8013566:	2d00      	cmp	r5, #0
 8013568:	4607      	mov	r7, r0
 801356a:	db01      	blt.n	8013570 <_malloc_r+0x1c>
 801356c:	42a9      	cmp	r1, r5
 801356e:	d905      	bls.n	801357c <_malloc_r+0x28>
 8013570:	230c      	movs	r3, #12
 8013572:	603b      	str	r3, [r7, #0]
 8013574:	2600      	movs	r6, #0
 8013576:	4630      	mov	r0, r6
 8013578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801357c:	4e2e      	ldr	r6, [pc, #184]	; (8013638 <_malloc_r+0xe4>)
 801357e:	f000 f8b1 	bl	80136e4 <__malloc_lock>
 8013582:	6833      	ldr	r3, [r6, #0]
 8013584:	461c      	mov	r4, r3
 8013586:	bb34      	cbnz	r4, 80135d6 <_malloc_r+0x82>
 8013588:	4629      	mov	r1, r5
 801358a:	4638      	mov	r0, r7
 801358c:	f7ff ffc2 	bl	8013514 <sbrk_aligned>
 8013590:	1c43      	adds	r3, r0, #1
 8013592:	4604      	mov	r4, r0
 8013594:	d14d      	bne.n	8013632 <_malloc_r+0xde>
 8013596:	6834      	ldr	r4, [r6, #0]
 8013598:	4626      	mov	r6, r4
 801359a:	2e00      	cmp	r6, #0
 801359c:	d140      	bne.n	8013620 <_malloc_r+0xcc>
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	4631      	mov	r1, r6
 80135a2:	4638      	mov	r0, r7
 80135a4:	eb04 0803 	add.w	r8, r4, r3
 80135a8:	f000 f848 	bl	801363c <_sbrk_r>
 80135ac:	4580      	cmp	r8, r0
 80135ae:	d13a      	bne.n	8013626 <_malloc_r+0xd2>
 80135b0:	6821      	ldr	r1, [r4, #0]
 80135b2:	3503      	adds	r5, #3
 80135b4:	1a6d      	subs	r5, r5, r1
 80135b6:	f025 0503 	bic.w	r5, r5, #3
 80135ba:	3508      	adds	r5, #8
 80135bc:	2d0c      	cmp	r5, #12
 80135be:	bf38      	it	cc
 80135c0:	250c      	movcc	r5, #12
 80135c2:	4629      	mov	r1, r5
 80135c4:	4638      	mov	r0, r7
 80135c6:	f7ff ffa5 	bl	8013514 <sbrk_aligned>
 80135ca:	3001      	adds	r0, #1
 80135cc:	d02b      	beq.n	8013626 <_malloc_r+0xd2>
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	442b      	add	r3, r5
 80135d2:	6023      	str	r3, [r4, #0]
 80135d4:	e00e      	b.n	80135f4 <_malloc_r+0xa0>
 80135d6:	6822      	ldr	r2, [r4, #0]
 80135d8:	1b52      	subs	r2, r2, r5
 80135da:	d41e      	bmi.n	801361a <_malloc_r+0xc6>
 80135dc:	2a0b      	cmp	r2, #11
 80135de:	d916      	bls.n	801360e <_malloc_r+0xba>
 80135e0:	1961      	adds	r1, r4, r5
 80135e2:	42a3      	cmp	r3, r4
 80135e4:	6025      	str	r5, [r4, #0]
 80135e6:	bf18      	it	ne
 80135e8:	6059      	strne	r1, [r3, #4]
 80135ea:	6863      	ldr	r3, [r4, #4]
 80135ec:	bf08      	it	eq
 80135ee:	6031      	streq	r1, [r6, #0]
 80135f0:	5162      	str	r2, [r4, r5]
 80135f2:	604b      	str	r3, [r1, #4]
 80135f4:	4638      	mov	r0, r7
 80135f6:	f104 060b 	add.w	r6, r4, #11
 80135fa:	f000 f879 	bl	80136f0 <__malloc_unlock>
 80135fe:	f026 0607 	bic.w	r6, r6, #7
 8013602:	1d23      	adds	r3, r4, #4
 8013604:	1af2      	subs	r2, r6, r3
 8013606:	d0b6      	beq.n	8013576 <_malloc_r+0x22>
 8013608:	1b9b      	subs	r3, r3, r6
 801360a:	50a3      	str	r3, [r4, r2]
 801360c:	e7b3      	b.n	8013576 <_malloc_r+0x22>
 801360e:	6862      	ldr	r2, [r4, #4]
 8013610:	42a3      	cmp	r3, r4
 8013612:	bf0c      	ite	eq
 8013614:	6032      	streq	r2, [r6, #0]
 8013616:	605a      	strne	r2, [r3, #4]
 8013618:	e7ec      	b.n	80135f4 <_malloc_r+0xa0>
 801361a:	4623      	mov	r3, r4
 801361c:	6864      	ldr	r4, [r4, #4]
 801361e:	e7b2      	b.n	8013586 <_malloc_r+0x32>
 8013620:	4634      	mov	r4, r6
 8013622:	6876      	ldr	r6, [r6, #4]
 8013624:	e7b9      	b.n	801359a <_malloc_r+0x46>
 8013626:	230c      	movs	r3, #12
 8013628:	603b      	str	r3, [r7, #0]
 801362a:	4638      	mov	r0, r7
 801362c:	f000 f860 	bl	80136f0 <__malloc_unlock>
 8013630:	e7a1      	b.n	8013576 <_malloc_r+0x22>
 8013632:	6025      	str	r5, [r4, #0]
 8013634:	e7de      	b.n	80135f4 <_malloc_r+0xa0>
 8013636:	bf00      	nop
 8013638:	24000e94 	.word	0x24000e94

0801363c <_sbrk_r>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	4d06      	ldr	r5, [pc, #24]	; (8013658 <_sbrk_r+0x1c>)
 8013640:	2300      	movs	r3, #0
 8013642:	4604      	mov	r4, r0
 8013644:	4608      	mov	r0, r1
 8013646:	602b      	str	r3, [r5, #0]
 8013648:	f7ed f816 	bl	8000678 <_sbrk>
 801364c:	1c43      	adds	r3, r0, #1
 801364e:	d102      	bne.n	8013656 <_sbrk_r+0x1a>
 8013650:	682b      	ldr	r3, [r5, #0]
 8013652:	b103      	cbz	r3, 8013656 <_sbrk_r+0x1a>
 8013654:	6023      	str	r3, [r4, #0]
 8013656:	bd38      	pop	{r3, r4, r5, pc}
 8013658:	24000e9c 	.word	0x24000e9c

0801365c <_raise_r>:
 801365c:	291f      	cmp	r1, #31
 801365e:	b538      	push	{r3, r4, r5, lr}
 8013660:	4604      	mov	r4, r0
 8013662:	460d      	mov	r5, r1
 8013664:	d904      	bls.n	8013670 <_raise_r+0x14>
 8013666:	2316      	movs	r3, #22
 8013668:	6003      	str	r3, [r0, #0]
 801366a:	f04f 30ff 	mov.w	r0, #4294967295
 801366e:	bd38      	pop	{r3, r4, r5, pc}
 8013670:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013672:	b112      	cbz	r2, 801367a <_raise_r+0x1e>
 8013674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013678:	b94b      	cbnz	r3, 801368e <_raise_r+0x32>
 801367a:	4620      	mov	r0, r4
 801367c:	f000 f830 	bl	80136e0 <_getpid_r>
 8013680:	462a      	mov	r2, r5
 8013682:	4601      	mov	r1, r0
 8013684:	4620      	mov	r0, r4
 8013686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801368a:	f000 b817 	b.w	80136bc <_kill_r>
 801368e:	2b01      	cmp	r3, #1
 8013690:	d00a      	beq.n	80136a8 <_raise_r+0x4c>
 8013692:	1c59      	adds	r1, r3, #1
 8013694:	d103      	bne.n	801369e <_raise_r+0x42>
 8013696:	2316      	movs	r3, #22
 8013698:	6003      	str	r3, [r0, #0]
 801369a:	2001      	movs	r0, #1
 801369c:	e7e7      	b.n	801366e <_raise_r+0x12>
 801369e:	2400      	movs	r4, #0
 80136a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80136a4:	4628      	mov	r0, r5
 80136a6:	4798      	blx	r3
 80136a8:	2000      	movs	r0, #0
 80136aa:	e7e0      	b.n	801366e <_raise_r+0x12>

080136ac <raise>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	; (80136b8 <raise+0xc>)
 80136ae:	4601      	mov	r1, r0
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	f7ff bfd3 	b.w	801365c <_raise_r>
 80136b6:	bf00      	nop
 80136b8:	24000010 	.word	0x24000010

080136bc <_kill_r>:
 80136bc:	b538      	push	{r3, r4, r5, lr}
 80136be:	4d07      	ldr	r5, [pc, #28]	; (80136dc <_kill_r+0x20>)
 80136c0:	2300      	movs	r3, #0
 80136c2:	4604      	mov	r4, r0
 80136c4:	4608      	mov	r0, r1
 80136c6:	4611      	mov	r1, r2
 80136c8:	602b      	str	r3, [r5, #0]
 80136ca:	f7ec ffbb 	bl	8000644 <_kill>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	d102      	bne.n	80136d8 <_kill_r+0x1c>
 80136d2:	682b      	ldr	r3, [r5, #0]
 80136d4:	b103      	cbz	r3, 80136d8 <_kill_r+0x1c>
 80136d6:	6023      	str	r3, [r4, #0]
 80136d8:	bd38      	pop	{r3, r4, r5, pc}
 80136da:	bf00      	nop
 80136dc:	24000e9c 	.word	0x24000e9c

080136e0 <_getpid_r>:
 80136e0:	f7ec bfa8 	b.w	8000634 <_getpid>

080136e4 <__malloc_lock>:
 80136e4:	4801      	ldr	r0, [pc, #4]	; (80136ec <__malloc_lock+0x8>)
 80136e6:	f000 b809 	b.w	80136fc <__retarget_lock_acquire_recursive>
 80136ea:	bf00      	nop
 80136ec:	24000ea0 	.word	0x24000ea0

080136f0 <__malloc_unlock>:
 80136f0:	4801      	ldr	r0, [pc, #4]	; (80136f8 <__malloc_unlock+0x8>)
 80136f2:	f000 b804 	b.w	80136fe <__retarget_lock_release_recursive>
 80136f6:	bf00      	nop
 80136f8:	24000ea0 	.word	0x24000ea0

080136fc <__retarget_lock_acquire_recursive>:
 80136fc:	4770      	bx	lr

080136fe <__retarget_lock_release_recursive>:
 80136fe:	4770      	bx	lr

08013700 <_init>:
 8013700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013702:	bf00      	nop
 8013704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013706:	bc08      	pop	{r3}
 8013708:	469e      	mov	lr, r3
 801370a:	4770      	bx	lr

0801370c <_fini>:
 801370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370e:	bf00      	nop
 8013710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013712:	bc08      	pop	{r3}
 8013714:	469e      	mov	lr, r3
 8013716:	4770      	bx	lr
